
STMCODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002978  08002978  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002980  08002980  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000002c  080029b4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080029b4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009171  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001390  00000000  00000000  000291cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0002a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  0002abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f2d  00000000  00000000  0002b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b29  00000000  00000000  0004f135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c7f  00000000  00000000  00057c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001398dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c4  00000000  00000000  00139930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002948 	.word	0x08002948

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08002948 	.word	0x08002948

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f9af 	bl	8000872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f810 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f89a 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f868 	bl	80005f0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, txdata, sizeof(txdata),100);
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	221e      	movs	r2, #30
 8000524:	4902      	ldr	r1, [pc, #8]	; (8000530 <main+0x24>)
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x28>)
 8000528:	f001 fd5a 	bl	8001fe0 <HAL_UART_Transmit>
 800052c:	e7f8      	b.n	8000520 <main+0x14>
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000
 8000534:	20000048 	.word	0x20000048

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f9f6 	bl	8002938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xb0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xb0>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xb0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <SystemClock_Config+0xb4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <SystemClock_Config+0xb4>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <SystemClock_Config+0xb4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fc53 	bl	8000e50 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005b0:	f000 f872 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fee2 	bl	8001398 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005da:	f000 f85d 	bl	8000698 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART2_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000634:	f001 fc86 	bl	8001f44 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f82b 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000048 	.word	0x20000048
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x44>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_GPIO_Init+0x44>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_GPIO_Init+0x44>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x44>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x44>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x44>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x44>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x44>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x44>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x44>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0aa      	sub	sp, #168	; 0xa8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2284      	movs	r2, #132	; 0x84
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f913 	bl	8002938 <memset>
  if(huart->Instance==USART2)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_UART_MspInit+0xb0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d13a      	bne.n	8000792 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f81b 	bl	8001764 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000734:	f7ff ffb0 	bl	8000698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 800073e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_UART_MspInit+0xb4>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000768:	230c      	movs	r3, #12
 800076a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000780:	2307      	movs	r3, #7
 8000782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <HAL_UART_MspInit+0xb8>)
 800078e:	f000 f9b3 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	37a8      	adds	r7, #168	; 0xa8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40004400 	.word	0x40004400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f87a 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000826:	490e      	ldr	r1, [pc, #56]	; (8000860 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800083c:	4c0b      	ldr	r4, [pc, #44]	; (800086c <LoopFillZerobss+0x26>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800084a:	f7ff ffd7 	bl	80007fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 f84f 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000852:	f7ff fe5b 	bl	800050c <main>
  bx  lr    
 8000856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000864:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 8000868:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800086c:	200000d4 	.word	0x200000d4

08000870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC_IRQHandler>

08000872 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000876:	2003      	movs	r0, #3
 8000878:	f000 f90a 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087c:	200f      	movs	r0, #15
 800087e:	f000 f805 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff ff0f 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f917 	bl	8000ade <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f8ed 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000020 	.word	0x20000020
 80008e4:	20000028 	.word	0x20000028
 80008e8:	20000024 	.word	0x20000024

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000028 	.word	0x20000028
 8000910:	200000d0 	.word	0x200000d0

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000d0 	.word	0x200000d0

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	4313      	orrs	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	05fa0000 	.word	0x05fa0000

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff47 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5c 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff8e 	bl	80009e4 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5d 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb0 	bl	8000a4c <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e175      	b.n	8000e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f040 8164 	bne.w	8000dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d005      	beq.n	8000b4e <HAL_GPIO_Init+0x56>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d130      	bne.n	8000bb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b84:	2201      	movs	r2, #1
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	f003 0201 	and.w	r2, r3, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d017      	beq.n	8000bec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d123      	bne.n	8000c40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	69b9      	ldr	r1, [r7, #24]
 8000c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0203 	and.w	r2, r3, #3
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 80be 	beq.w	8000dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <HAL_GPIO_Init+0x324>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <HAL_GPIO_Init+0x324>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_GPIO_Init+0x324>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c9a:	4a61      	ldr	r2, [pc, #388]	; (8000e20 <HAL_GPIO_Init+0x328>)
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a58      	ldr	r2, [pc, #352]	; (8000e24 <HAL_GPIO_Init+0x32c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d037      	beq.n	8000d36 <HAL_GPIO_Init+0x23e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_GPIO_Init+0x330>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d031      	beq.n	8000d32 <HAL_GPIO_Init+0x23a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <HAL_GPIO_Init+0x334>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d02b      	beq.n	8000d2e <HAL_GPIO_Init+0x236>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a55      	ldr	r2, [pc, #340]	; (8000e30 <HAL_GPIO_Init+0x338>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d025      	beq.n	8000d2a <HAL_GPIO_Init+0x232>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x33c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01f      	beq.n	8000d26 <HAL_GPIO_Init+0x22e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a53      	ldr	r2, [pc, #332]	; (8000e38 <HAL_GPIO_Init+0x340>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d019      	beq.n	8000d22 <HAL_GPIO_Init+0x22a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_GPIO_Init+0x344>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d013      	beq.n	8000d1e <HAL_GPIO_Init+0x226>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a51      	ldr	r2, [pc, #324]	; (8000e40 <HAL_GPIO_Init+0x348>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00d      	beq.n	8000d1a <HAL_GPIO_Init+0x222>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a50      	ldr	r2, [pc, #320]	; (8000e44 <HAL_GPIO_Init+0x34c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d007      	beq.n	8000d16 <HAL_GPIO_Init+0x21e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <HAL_GPIO_Init+0x350>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_GPIO_Init+0x21a>
 8000d0e:	2309      	movs	r3, #9
 8000d10:	e012      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d12:	230a      	movs	r3, #10
 8000d14:	e010      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d16:	2308      	movs	r3, #8
 8000d18:	e00e      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	e00c      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d1e:	2306      	movs	r3, #6
 8000d20:	e00a      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e008      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x240>
 8000d36:	2300      	movs	r3, #0
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d48:	4935      	ldr	r1, [pc, #212]	; (8000e20 <HAL_GPIO_Init+0x328>)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d7a:	4a34      	ldr	r2, [pc, #208]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d80:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_GPIO_Init+0x354>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	f67f ae86 	bls.w	8000b18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40021c00 	.word	0x40021c00
 8000e44:	40022000 	.word	0x40022000
 8000e48:	40022400 	.word	0x40022400
 8000e4c:	40013c00 	.word	0x40013c00

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e291      	b.n	800138a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8087 	beq.w	8000f82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e74:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d00c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e80:	4b93      	ldr	r3, [pc, #588]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d112      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x62>
 8000e8c:	4b90      	ldr	r3, [pc, #576]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e98:	d10b      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9a:	4b8d      	ldr	r3, [pc, #564]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d06c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x130>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d168      	bne.n	8000f80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e26b      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x7a>
 8000ebc:	4b84      	ldr	r3, [pc, #528]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a83      	ldr	r2, [pc, #524]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e02e      	b.n	8000f28 <HAL_RCC_OscConfig+0xd8>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x9c>
 8000ed2:	4b7f      	ldr	r3, [pc, #508]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7e      	ldr	r2, [pc, #504]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7b      	ldr	r2, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xd8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0xc0>
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a75      	ldr	r2, [pc, #468]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xd8>
 8000f10:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6e      	ldr	r2, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fcf0 	bl	8000914 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fcec 	bl	8000914 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e21f      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xe8>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fcdc 	bl	8000914 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fcd8 	bl	8000914 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e20b      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x110>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d069      	beq.n	8001062 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x190>
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_RCC_OscConfig+0x17a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d001      	beq.n	8000fca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e1df      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	493d      	ldr	r1, [pc, #244]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e040      	b.n	8001062 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d023      	beq.n	8001030 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc8e 	bl	8000914 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc8a 	bl	8000914 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e1bd      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4929      	ldr	r1, [pc, #164]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
 800102e:	e018      	b.n	8001062 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103c:	f7ff fc6a 	bl	8000914 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fc66 	bl	8000914 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e199      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d038      	beq.n	80010e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 8001078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001082:	f7ff fc47 	bl	8000914 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff fc43 	bl	8000914 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e176      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 800109e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x23a>
 80010a8:	e01a      	b.n	80010e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 80010ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_RCC_OscConfig+0x280>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fc2d 	bl	8000914 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fc29 	bl	8000914 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d903      	bls.n	80010d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e15c      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
 80010d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d4:	4b91      	ldr	r3, [pc, #580]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80010d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ee      	bne.n	80010be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a4 	beq.w	8001236 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10d      	bne.n	8001116 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a87      	ldr	r2, [pc, #540]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b85      	ldr	r3, [pc, #532]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001112:	2301      	movs	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001116:	4b82      	ldr	r3, [pc, #520]	; (8001320 <HAL_RCC_OscConfig+0x4d0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <HAL_RCC_OscConfig+0x4d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7e      	ldr	r2, [pc, #504]	; (8001320 <HAL_RCC_OscConfig+0x4d0>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112e:	f7ff fbf1 	bl	8000914 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001136:	f7ff fbed 	bl	8000914 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e120      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x4d0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d106      	bne.n	800116a <HAL_RCC_OscConfig+0x31a>
 800115c:	4b6f      	ldr	r3, [pc, #444]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	4a6e      	ldr	r2, [pc, #440]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6713      	str	r3, [r2, #112]	; 0x70
 8001168:	e02d      	b.n	80011c6 <HAL_RCC_OscConfig+0x376>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x33c>
 8001172:	4b6a      	ldr	r3, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	4a69      	ldr	r2, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6713      	str	r3, [r2, #112]	; 0x70
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001182:	4a66      	ldr	r2, [pc, #408]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001184:	f023 0304 	bic.w	r3, r3, #4
 8001188:	6713      	str	r3, [r2, #112]	; 0x70
 800118a:	e01c      	b.n	80011c6 <HAL_RCC_OscConfig+0x376>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d10c      	bne.n	80011ae <HAL_RCC_OscConfig+0x35e>
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001198:	4a60      	ldr	r2, [pc, #384]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6713      	str	r3, [r2, #112]	; 0x70
 80011a0:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	4a5d      	ldr	r2, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6713      	str	r3, [r2, #112]	; 0x70
 80011ac:	e00b      	b.n	80011c6 <HAL_RCC_OscConfig+0x376>
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b2:	4a5a      	ldr	r2, [pc, #360]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011be:	4a57      	ldr	r2, [pc, #348]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d015      	beq.n	80011fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff fba1 	bl	8000914 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fb9d 	bl	8000914 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0ce      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ee      	beq.n	80011d6 <HAL_RCC_OscConfig+0x386>
 80011f8:	e014      	b.n	8001224 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb8b 	bl	8000914 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fb87 	bl	8000914 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0b8      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ee      	bne.n	8001202 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d105      	bne.n	8001236 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a3b      	ldr	r2, [pc, #236]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80a4 	beq.w	8001388 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d06b      	beq.n	8001324 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d149      	bne.n	80012e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800125a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800125e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fb58 	bl	8000914 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff fb54 	bl	8000914 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e087      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	3b01      	subs	r3, #1
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	061b      	lsls	r3, r3, #24
 80012aa:	4313      	orrs	r3, r2
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb28 	bl	8000914 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fb24 	bl	8000914 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e057      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x478>
 80012e6:	e04f      	b.n	8001388 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb0e 	bl	8000914 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fb0a 	bl	8000914 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e03d      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_RCC_OscConfig+0x4cc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x4ac>
 800131a:	e035      	b.n	8001388 <HAL_RCC_OscConfig+0x538>
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_RCC_OscConfig+0x544>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d028      	beq.n	8001384 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d121      	bne.n	8001384 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d11a      	bne.n	8001384 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001354:	4013      	ands	r3, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800135a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800135c:	4293      	cmp	r3, r2
 800135e:	d111      	bne.n	8001384 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	3b01      	subs	r3, #1
 800136e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d910      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 020f 	bic.w	r2, r3, #15
 80013c6:	4965      	ldr	r1, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 80013fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d040      	beq.n	80014bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d115      	bne.n	800147a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e073      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800148c:	f7ff fa42 	bl	8000914 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa3e 	bl	8000914 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e053      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d210      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 020f 	bic.w	r2, r3, #15
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1cc>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1d0>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1d4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f99e 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00
 8001560:	40023800 	.word	0x40023800
 8001564:	08002960 	.word	0x08002960
 8001568:	20000020 	.word	0x20000020
 800156c:	20000024 	.word	0x20000024

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001574:	b090      	sub	sp, #64	; 0x40
 8001576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d00d      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001594:	2b08      	cmp	r3, #8
 8001596:	f200 80a1 	bhi.w	80016dc <HAL_RCC_GetSysClockFreq+0x16c>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x34>
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x3a>
 80015a2:	e09b      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015a8:	e09b      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015ae:	e098      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d028      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	2200      	movs	r2, #0
 80015ce:	623b      	str	r3, [r7, #32]
 80015d0:	627a      	str	r2, [r7, #36]	; 0x24
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015d8:	2100      	movs	r1, #0
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80015dc:	fb03 f201 	mul.w	r2, r3, r1
 80015e0:	2300      	movs	r3, #0
 80015e2:	fb00 f303 	mul.w	r3, r0, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ea:	fba0 1202 	umull	r1, r2, r0, r2
 80015ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015f0:	460a      	mov	r2, r1
 80015f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80015f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f6:	4413      	add	r3, r2
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	2200      	movs	r2, #0
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	61fa      	str	r2, [r7, #28]
 8001602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800160a:	f7fe fdfd 	bl	8000208 <__aeabi_uldivmod>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4613      	mov	r3, r2
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001616:	e053      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	617a      	str	r2, [r7, #20]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800162a:	f04f 0b00 	mov.w	fp, #0
 800162e:	4652      	mov	r2, sl
 8001630:	465b      	mov	r3, fp
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0159      	lsls	r1, r3, #5
 800163c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001640:	0150      	lsls	r0, r2, #5
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ebb2 080a 	subs.w	r8, r2, sl
 800164a:	eb63 090b 	sbc.w	r9, r3, fp
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800165a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800165e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001662:	ebb2 0408 	subs.w	r4, r2, r8
 8001666:	eb63 0509 	sbc.w	r5, r3, r9
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	00eb      	lsls	r3, r5, #3
 8001674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001678:	00e2      	lsls	r2, r4, #3
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	eb14 030a 	adds.w	r3, r4, sl
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	eb45 030b 	adc.w	r3, r5, fp
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001696:	4629      	mov	r1, r5
 8001698:	028b      	lsls	r3, r1, #10
 800169a:	4621      	mov	r1, r4
 800169c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a0:	4621      	mov	r1, r4
 80016a2:	028a      	lsls	r2, r1, #10
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016aa:	2200      	movs	r2, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	60fa      	str	r2, [r7, #12]
 80016b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b4:	f7fe fda8 	bl	8000208 <__aeabi_uldivmod>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4613      	mov	r3, r2
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	3301      	adds	r3, #1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80016d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016da:	e002      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3740      	adds	r7, #64	; 0x40
 80016e8:	46bd      	mov	sp, r7
 80016ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	00f42400 	.word	0x00f42400
 80016f8:	017d7840 	.word	0x017d7840

080016fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_GetHCLKFreq+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000020 	.word	0x20000020

08001714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001718:	f7ff fff0 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 800171c:	4602      	mov	r2, r0
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	4903      	ldr	r1, [pc, #12]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800172a:	5ccb      	ldrb	r3, [r1, r3]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	08002970 	.word	0x08002970

0800173c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001740:	f7ff ffdc 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	0b5b      	lsrs	r3, r3, #13
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	08002970 	.word	0x08002970

08001764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d012      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800178c:	4b69      	ldr	r3, [pc, #420]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a68      	ldr	r2, [pc, #416]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001796:	6093      	str	r3, [r2, #8]
 8001798:	4b66      	ldr	r3, [pc, #408]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	4964      	ldr	r1, [pc, #400]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d017      	beq.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	4959      	ldr	r1, [pc, #356]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017dc:	d101      	bne.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d017      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017fa:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	494a      	ldr	r1, [pc, #296]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001818:	d101      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 808b 	beq.w	800195e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a39      	ldr	r2, [pc, #228]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800186c:	f7ff f852 	bl	8000914 <HAL_GetTick>
 8001870:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7ff f84e 	bl	8000914 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e357      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d035      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d02e      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018d2:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d114      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f816 	bl	8000914 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff f812 	bl	8000914 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e319      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800191a:	d111      	bne.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800192a:	400b      	ands	r3, r1
 800192c:	4901      	ldr	r1, [pc, #4]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
 8001932:	e00b      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000
 800193c:	0ffffcff 	.word	0x0ffffcff
 8001940:	4baa      	ldr	r3, [pc, #680]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4aa9      	ldr	r2, [pc, #676]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001946:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800194a:	6093      	str	r3, [r2, #8]
 800194c:	4ba7      	ldr	r3, [pc, #668]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800194e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	49a4      	ldr	r1, [pc, #656]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800195a:	4313      	orrs	r3, r2
 800195c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800196a:	4ba0      	ldr	r3, [pc, #640]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800196c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001970:	4a9e      	ldr	r2, [pc, #632]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800197a:	4b9c      	ldr	r3, [pc, #624]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800197c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	4999      	ldr	r1, [pc, #612]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a6:	4991      	ldr	r1, [pc, #580]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019ba:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019c8:	4988      	ldr	r1, [pc, #544]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ea:	4980      	ldr	r1, [pc, #512]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4977      	ldr	r1, [pc, #476]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a20:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	496f      	ldr	r1, [pc, #444]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	f023 020c 	bic.w	r2, r3, #12
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a50:	4966      	ldr	r1, [pc, #408]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	495e      	ldr	r1, [pc, #376]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a94:	4955      	ldr	r1, [pc, #340]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	494d      	ldr	r1, [pc, #308]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001aca:	4b48      	ldr	r3, [pc, #288]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4944      	ldr	r1, [pc, #272]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	493c      	ldr	r1, [pc, #240]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	4933      	ldr	r1, [pc, #204]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b3e:	492b      	ldr	r1, [pc, #172]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d011      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b60:	4922      	ldr	r1, [pc, #136]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b70:	d101      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba0:	4912      	ldr	r1, [pc, #72]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bc4:	4909      	ldr	r1, [pc, #36]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d006      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80d9 	beq.w	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a01      	ldr	r2, [pc, #4]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bea:	e001      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf2:	f7fe fe8f 	bl	8000914 <HAL_GetTick>
 8001bf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bfa:	f7fe fe8b 	bl	8000914 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d901      	bls.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e194      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11d      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c3a:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c40:	0e1b      	lsrs	r3, r3, #24
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	019a      	lsls	r2, r3, #6
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	071b      	lsls	r3, r3, #28
 8001c60:	4957      	ldr	r1, [pc, #348]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c7c:	d00a      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d02e      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c92:	d129      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca8:	0f1b      	lsrs	r3, r3, #28
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	019a      	lsls	r2, r3, #6
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	071b      	lsls	r3, r3, #28
 8001cc8:	493d      	ldr	r1, [pc, #244]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd6:	f023 021f 	bic.w	r2, r3, #31
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01d      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cfa:	0e1b      	lsrs	r3, r3, #24
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d08:	0f1b      	lsrs	r3, r3, #28
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	019a      	lsls	r2, r3, #6
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	071b      	lsls	r3, r3, #28
 8001d28:	4925      	ldr	r1, [pc, #148]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d011      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	019a      	lsls	r2, r3, #6
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	061b      	lsls	r3, r3, #24
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	071b      	lsls	r3, r3, #28
 8001d58:	4919      	ldr	r1, [pc, #100]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6c:	f7fe fdd2 	bl	8000914 <HAL_GetTick>
 8001d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d74:	f7fe fdce 	bl	8000914 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0d7      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80cd 	bne.w	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da6:	f7fe fdb5 	bl	8000914 <HAL_GetTick>
 8001daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dae:	f7fe fdb1 	bl	8000914 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d903      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0ba      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001dc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dc4:	4b5e      	ldr	r3, [pc, #376]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd0:	d0ed      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d02e      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12a      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dfa:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	0f1b      	lsrs	r3, r3, #28
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	019a      	lsls	r2, r3, #6
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	071b      	lsls	r3, r3, #28
 8001e2e:	4944      	ldr	r1, [pc, #272]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e36:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	493d      	ldr	r1, [pc, #244]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d022      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e64:	d11d      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6c:	0e1b      	lsrs	r3, r3, #24
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	0f1b      	lsrs	r3, r3, #28
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	019a      	lsls	r2, r3, #6
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	071b      	lsls	r3, r3, #28
 8001e9a:	4929      	ldr	r1, [pc, #164]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d028      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	0e1b      	lsrs	r3, r3, #24
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	019a      	lsls	r2, r3, #6
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	071b      	lsls	r3, r3, #28
 8001ee2:	4917      	ldr	r1, [pc, #92]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	4911      	ldr	r1, [pc, #68]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fd02 	bl	8000914 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f14:	f7fe fcfe 	bl	8000914 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e007      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f32:	d1ef      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e040      	b.n	8001fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fbc0 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8b0 	bl	80020e8 <UART_SetConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e022      	b.n	8001fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb08 	bl	80025b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fb8f 	bl	80026f4 <UART_CheckIdleState>
 8001fd6:	4603      	mov	r3, r0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d171      	bne.n	80020dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_UART_Transmit+0x24>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06a      	b.n	80020de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002016:	f7fe fc7d 	bl	8000914 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d108      	bne.n	8002048 <HAL_UART_Transmit+0x68>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e003      	b.n	8002050 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002050:	e02c      	b.n	80020ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fb80 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e038      	b.n	80020de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	3302      	adds	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e007      	b.n	800209a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1cc      	bne.n	8002052 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fb4d 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e005      	b.n	80020de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <UART_SetConfig+0x2c4>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	430b      	orrs	r3, r1
 800211e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a94      	ldr	r2, [pc, #592]	; (80023b0 <UART_SetConfig+0x2c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d120      	bne.n	80021a6 <UART_SetConfig+0xbe>
 8002164:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <UART_SetConfig+0x2cc>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d816      	bhi.n	80021a0 <UART_SetConfig+0xb8>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <UART_SetConfig+0x90>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	08002195 	.word	0x08002195
 8002180:	0800218f 	.word	0x0800218f
 8002184:	0800219b 	.word	0x0800219b
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]
 800218c:	e150      	b.n	8002430 <UART_SetConfig+0x348>
 800218e:	2302      	movs	r3, #2
 8002190:	77fb      	strb	r3, [r7, #31]
 8002192:	e14d      	b.n	8002430 <UART_SetConfig+0x348>
 8002194:	2304      	movs	r3, #4
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e14a      	b.n	8002430 <UART_SetConfig+0x348>
 800219a:	2308      	movs	r3, #8
 800219c:	77fb      	strb	r3, [r7, #31]
 800219e:	e147      	b.n	8002430 <UART_SetConfig+0x348>
 80021a0:	2310      	movs	r3, #16
 80021a2:	77fb      	strb	r3, [r7, #31]
 80021a4:	e144      	b.n	8002430 <UART_SetConfig+0x348>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <UART_SetConfig+0x2d0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d132      	bne.n	8002216 <UART_SetConfig+0x12e>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <UART_SetConfig+0x2cc>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d828      	bhi.n	8002210 <UART_SetConfig+0x128>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <UART_SetConfig+0xdc>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021f9 	.word	0x080021f9
 80021c8:	08002211 	.word	0x08002211
 80021cc:	08002211 	.word	0x08002211
 80021d0:	08002211 	.word	0x08002211
 80021d4:	08002205 	.word	0x08002205
 80021d8:	08002211 	.word	0x08002211
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002211 	.word	0x08002211
 80021e4:	080021ff 	.word	0x080021ff
 80021e8:	08002211 	.word	0x08002211
 80021ec:	08002211 	.word	0x08002211
 80021f0:	08002211 	.word	0x08002211
 80021f4:	0800220b 	.word	0x0800220b
 80021f8:	2300      	movs	r3, #0
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	e118      	b.n	8002430 <UART_SetConfig+0x348>
 80021fe:	2302      	movs	r3, #2
 8002200:	77fb      	strb	r3, [r7, #31]
 8002202:	e115      	b.n	8002430 <UART_SetConfig+0x348>
 8002204:	2304      	movs	r3, #4
 8002206:	77fb      	strb	r3, [r7, #31]
 8002208:	e112      	b.n	8002430 <UART_SetConfig+0x348>
 800220a:	2308      	movs	r3, #8
 800220c:	77fb      	strb	r3, [r7, #31]
 800220e:	e10f      	b.n	8002430 <UART_SetConfig+0x348>
 8002210:	2310      	movs	r3, #16
 8002212:	77fb      	strb	r3, [r7, #31]
 8002214:	e10c      	b.n	8002430 <UART_SetConfig+0x348>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a68      	ldr	r2, [pc, #416]	; (80023bc <UART_SetConfig+0x2d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d120      	bne.n	8002262 <UART_SetConfig+0x17a>
 8002220:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <UART_SetConfig+0x2cc>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800222a:	2b30      	cmp	r3, #48	; 0x30
 800222c:	d013      	beq.n	8002256 <UART_SetConfig+0x16e>
 800222e:	2b30      	cmp	r3, #48	; 0x30
 8002230:	d814      	bhi.n	800225c <UART_SetConfig+0x174>
 8002232:	2b20      	cmp	r3, #32
 8002234:	d009      	beq.n	800224a <UART_SetConfig+0x162>
 8002236:	2b20      	cmp	r3, #32
 8002238:	d810      	bhi.n	800225c <UART_SetConfig+0x174>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <UART_SetConfig+0x15c>
 800223e:	2b10      	cmp	r3, #16
 8002240:	d006      	beq.n	8002250 <UART_SetConfig+0x168>
 8002242:	e00b      	b.n	800225c <UART_SetConfig+0x174>
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
 8002248:	e0f2      	b.n	8002430 <UART_SetConfig+0x348>
 800224a:	2302      	movs	r3, #2
 800224c:	77fb      	strb	r3, [r7, #31]
 800224e:	e0ef      	b.n	8002430 <UART_SetConfig+0x348>
 8002250:	2304      	movs	r3, #4
 8002252:	77fb      	strb	r3, [r7, #31]
 8002254:	e0ec      	b.n	8002430 <UART_SetConfig+0x348>
 8002256:	2308      	movs	r3, #8
 8002258:	77fb      	strb	r3, [r7, #31]
 800225a:	e0e9      	b.n	8002430 <UART_SetConfig+0x348>
 800225c:	2310      	movs	r3, #16
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	e0e6      	b.n	8002430 <UART_SetConfig+0x348>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <UART_SetConfig+0x2d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d120      	bne.n	80022ae <UART_SetConfig+0x1c6>
 800226c:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <UART_SetConfig+0x2cc>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002276:	2bc0      	cmp	r3, #192	; 0xc0
 8002278:	d013      	beq.n	80022a2 <UART_SetConfig+0x1ba>
 800227a:	2bc0      	cmp	r3, #192	; 0xc0
 800227c:	d814      	bhi.n	80022a8 <UART_SetConfig+0x1c0>
 800227e:	2b80      	cmp	r3, #128	; 0x80
 8002280:	d009      	beq.n	8002296 <UART_SetConfig+0x1ae>
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d810      	bhi.n	80022a8 <UART_SetConfig+0x1c0>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <UART_SetConfig+0x1a8>
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d006      	beq.n	800229c <UART_SetConfig+0x1b4>
 800228e:	e00b      	b.n	80022a8 <UART_SetConfig+0x1c0>
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
 8002294:	e0cc      	b.n	8002430 <UART_SetConfig+0x348>
 8002296:	2302      	movs	r3, #2
 8002298:	77fb      	strb	r3, [r7, #31]
 800229a:	e0c9      	b.n	8002430 <UART_SetConfig+0x348>
 800229c:	2304      	movs	r3, #4
 800229e:	77fb      	strb	r3, [r7, #31]
 80022a0:	e0c6      	b.n	8002430 <UART_SetConfig+0x348>
 80022a2:	2308      	movs	r3, #8
 80022a4:	77fb      	strb	r3, [r7, #31]
 80022a6:	e0c3      	b.n	8002430 <UART_SetConfig+0x348>
 80022a8:	2310      	movs	r3, #16
 80022aa:	77fb      	strb	r3, [r7, #31]
 80022ac:	e0c0      	b.n	8002430 <UART_SetConfig+0x348>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <UART_SetConfig+0x2dc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d125      	bne.n	8002304 <UART_SetConfig+0x21c>
 80022b8:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <UART_SetConfig+0x2cc>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022c6:	d017      	beq.n	80022f8 <UART_SetConfig+0x210>
 80022c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022cc:	d817      	bhi.n	80022fe <UART_SetConfig+0x216>
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d2:	d00b      	beq.n	80022ec <UART_SetConfig+0x204>
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d8:	d811      	bhi.n	80022fe <UART_SetConfig+0x216>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <UART_SetConfig+0x1fe>
 80022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e2:	d006      	beq.n	80022f2 <UART_SetConfig+0x20a>
 80022e4:	e00b      	b.n	80022fe <UART_SetConfig+0x216>
 80022e6:	2300      	movs	r3, #0
 80022e8:	77fb      	strb	r3, [r7, #31]
 80022ea:	e0a1      	b.n	8002430 <UART_SetConfig+0x348>
 80022ec:	2302      	movs	r3, #2
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	e09e      	b.n	8002430 <UART_SetConfig+0x348>
 80022f2:	2304      	movs	r3, #4
 80022f4:	77fb      	strb	r3, [r7, #31]
 80022f6:	e09b      	b.n	8002430 <UART_SetConfig+0x348>
 80022f8:	2308      	movs	r3, #8
 80022fa:	77fb      	strb	r3, [r7, #31]
 80022fc:	e098      	b.n	8002430 <UART_SetConfig+0x348>
 80022fe:	2310      	movs	r3, #16
 8002300:	77fb      	strb	r3, [r7, #31]
 8002302:	e095      	b.n	8002430 <UART_SetConfig+0x348>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <UART_SetConfig+0x2e0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d125      	bne.n	800235a <UART_SetConfig+0x272>
 800230e:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <UART_SetConfig+0x2cc>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800231c:	d017      	beq.n	800234e <UART_SetConfig+0x266>
 800231e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002322:	d817      	bhi.n	8002354 <UART_SetConfig+0x26c>
 8002324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002328:	d00b      	beq.n	8002342 <UART_SetConfig+0x25a>
 800232a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800232e:	d811      	bhi.n	8002354 <UART_SetConfig+0x26c>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <UART_SetConfig+0x254>
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002338:	d006      	beq.n	8002348 <UART_SetConfig+0x260>
 800233a:	e00b      	b.n	8002354 <UART_SetConfig+0x26c>
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
 8002340:	e076      	b.n	8002430 <UART_SetConfig+0x348>
 8002342:	2302      	movs	r3, #2
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	e073      	b.n	8002430 <UART_SetConfig+0x348>
 8002348:	2304      	movs	r3, #4
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e070      	b.n	8002430 <UART_SetConfig+0x348>
 800234e:	2308      	movs	r3, #8
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e06d      	b.n	8002430 <UART_SetConfig+0x348>
 8002354:	2310      	movs	r3, #16
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	e06a      	b.n	8002430 <UART_SetConfig+0x348>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <UART_SetConfig+0x2e4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d138      	bne.n	80023d6 <UART_SetConfig+0x2ee>
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <UART_SetConfig+0x2cc>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800236e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002372:	d017      	beq.n	80023a4 <UART_SetConfig+0x2bc>
 8002374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002378:	d82a      	bhi.n	80023d0 <UART_SetConfig+0x2e8>
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237e:	d00b      	beq.n	8002398 <UART_SetConfig+0x2b0>
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d824      	bhi.n	80023d0 <UART_SetConfig+0x2e8>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <UART_SetConfig+0x2aa>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d006      	beq.n	800239e <UART_SetConfig+0x2b6>
 8002390:	e01e      	b.n	80023d0 <UART_SetConfig+0x2e8>
 8002392:	2300      	movs	r3, #0
 8002394:	77fb      	strb	r3, [r7, #31]
 8002396:	e04b      	b.n	8002430 <UART_SetConfig+0x348>
 8002398:	2302      	movs	r3, #2
 800239a:	77fb      	strb	r3, [r7, #31]
 800239c:	e048      	b.n	8002430 <UART_SetConfig+0x348>
 800239e:	2304      	movs	r3, #4
 80023a0:	77fb      	strb	r3, [r7, #31]
 80023a2:	e045      	b.n	8002430 <UART_SetConfig+0x348>
 80023a4:	2308      	movs	r3, #8
 80023a6:	77fb      	strb	r3, [r7, #31]
 80023a8:	e042      	b.n	8002430 <UART_SetConfig+0x348>
 80023aa:	bf00      	nop
 80023ac:	efff69f3 	.word	0xefff69f3
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40004400 	.word	0x40004400
 80023bc:	40004800 	.word	0x40004800
 80023c0:	40004c00 	.word	0x40004c00
 80023c4:	40005000 	.word	0x40005000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	40007800 	.word	0x40007800
 80023d0:	2310      	movs	r3, #16
 80023d2:	77fb      	strb	r3, [r7, #31]
 80023d4:	e02c      	b.n	8002430 <UART_SetConfig+0x348>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <UART_SetConfig+0x4bc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d125      	bne.n	800242c <UART_SetConfig+0x344>
 80023e0:	4b71      	ldr	r3, [pc, #452]	; (80025a8 <UART_SetConfig+0x4c0>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023ee:	d017      	beq.n	8002420 <UART_SetConfig+0x338>
 80023f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023f4:	d817      	bhi.n	8002426 <UART_SetConfig+0x33e>
 80023f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fa:	d00b      	beq.n	8002414 <UART_SetConfig+0x32c>
 80023fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002400:	d811      	bhi.n	8002426 <UART_SetConfig+0x33e>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <UART_SetConfig+0x326>
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d006      	beq.n	800241a <UART_SetConfig+0x332>
 800240c:	e00b      	b.n	8002426 <UART_SetConfig+0x33e>
 800240e:	2300      	movs	r3, #0
 8002410:	77fb      	strb	r3, [r7, #31]
 8002412:	e00d      	b.n	8002430 <UART_SetConfig+0x348>
 8002414:	2302      	movs	r3, #2
 8002416:	77fb      	strb	r3, [r7, #31]
 8002418:	e00a      	b.n	8002430 <UART_SetConfig+0x348>
 800241a:	2304      	movs	r3, #4
 800241c:	77fb      	strb	r3, [r7, #31]
 800241e:	e007      	b.n	8002430 <UART_SetConfig+0x348>
 8002420:	2308      	movs	r3, #8
 8002422:	77fb      	strb	r3, [r7, #31]
 8002424:	e004      	b.n	8002430 <UART_SetConfig+0x348>
 8002426:	2310      	movs	r3, #16
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	e001      	b.n	8002430 <UART_SetConfig+0x348>
 800242c:	2310      	movs	r3, #16
 800242e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002438:	d15b      	bne.n	80024f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d828      	bhi.n	8002492 <UART_SetConfig+0x3aa>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <UART_SetConfig+0x360>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800246d 	.word	0x0800246d
 800244c:	08002475 	.word	0x08002475
 8002450:	0800247d 	.word	0x0800247d
 8002454:	08002493 	.word	0x08002493
 8002458:	08002483 	.word	0x08002483
 800245c:	08002493 	.word	0x08002493
 8002460:	08002493 	.word	0x08002493
 8002464:	08002493 	.word	0x08002493
 8002468:	0800248b 	.word	0x0800248b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800246c:	f7ff f952 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 8002470:	61b8      	str	r0, [r7, #24]
        break;
 8002472:	e013      	b.n	800249c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002474:	f7ff f962 	bl	800173c <HAL_RCC_GetPCLK2Freq>
 8002478:	61b8      	str	r0, [r7, #24]
        break;
 800247a:	e00f      	b.n	800249c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <UART_SetConfig+0x4c4>)
 800247e:	61bb      	str	r3, [r7, #24]
        break;
 8002480:	e00c      	b.n	800249c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002482:	f7ff f875 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8002486:	61b8      	str	r0, [r7, #24]
        break;
 8002488:	e008      	b.n	800249c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800248a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248e:	61bb      	str	r3, [r7, #24]
        break;
 8002490:	e004      	b.n	800249c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77bb      	strb	r3, [r7, #30]
        break;
 800249a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d074      	beq.n	800258c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	d916      	bls.n	80024ec <UART_SetConfig+0x404>
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d212      	bcs.n	80024ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f023 030f 	bic.w	r3, r3, #15
 80024ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	b29a      	uxth	r2, r3
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	4313      	orrs	r3, r2
 80024e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	89fa      	ldrh	r2, [r7, #14]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	e04f      	b.n	800258c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	77bb      	strb	r3, [r7, #30]
 80024f0:	e04c      	b.n	800258c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d828      	bhi.n	800254a <UART_SetConfig+0x462>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <UART_SetConfig+0x418>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002525 	.word	0x08002525
 8002504:	0800252d 	.word	0x0800252d
 8002508:	08002535 	.word	0x08002535
 800250c:	0800254b 	.word	0x0800254b
 8002510:	0800253b 	.word	0x0800253b
 8002514:	0800254b 	.word	0x0800254b
 8002518:	0800254b 	.word	0x0800254b
 800251c:	0800254b 	.word	0x0800254b
 8002520:	08002543 	.word	0x08002543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002524:	f7ff f8f6 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 8002528:	61b8      	str	r0, [r7, #24]
        break;
 800252a:	e013      	b.n	8002554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800252c:	f7ff f906 	bl	800173c <HAL_RCC_GetPCLK2Freq>
 8002530:	61b8      	str	r0, [r7, #24]
        break;
 8002532:	e00f      	b.n	8002554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <UART_SetConfig+0x4c4>)
 8002536:	61bb      	str	r3, [r7, #24]
        break;
 8002538:	e00c      	b.n	8002554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800253a:	f7ff f819 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800253e:	61b8      	str	r0, [r7, #24]
        break;
 8002540:	e008      	b.n	8002554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002546:	61bb      	str	r3, [r7, #24]
        break;
 8002548:	e004      	b.n	8002554 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	77bb      	strb	r3, [r7, #30]
        break;
 8002552:	bf00      	nop
    }

    if (pclk != 0U)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	085a      	lsrs	r2, r3, #1
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	441a      	add	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b0f      	cmp	r3, #15
 8002572:	d909      	bls.n	8002588 <UART_SetConfig+0x4a0>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d205      	bcs.n	8002588 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	e001      	b.n	800258c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002598:	7fbb      	ldrb	r3, [r7, #30]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40007c00 	.word	0x40007c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	00f42400 	.word	0x00f42400

080025b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01a      	beq.n	80026c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ae:	d10a      	bne.n	80026c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  }
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002704:	f7fe f906 	bl	8000914 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b08      	cmp	r3, #8
 8002716:	d10e      	bne.n	8002736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f81b 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e011      	b.n	800275a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b09c      	sub	sp, #112	; 0x70
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	e0a7      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	f000 80a3 	beq.w	80028c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe f8c9 	bl	8000914 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <UART_WaitOnFlagUntilTimeout+0x32>
 800278e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13f      	bne.n	8002814 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027a8:	667b      	str	r3, [r7, #100]	; 0x64
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e6      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3308      	adds	r3, #8
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	663b      	str	r3, [r7, #96]	; 0x60
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3308      	adds	r3, #8
 80027e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80027ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e5      	bne.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e068      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d050      	beq.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002830:	d148      	bne.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002850:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e6      	bne.n	800283c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3308      	adds	r3, #8
 8002874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	613b      	str	r3, [r7, #16]
   return(result);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	66bb      	str	r3, [r7, #104]	; 0x68
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3308      	adds	r3, #8
 800288c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800288e:	623a      	str	r2, [r7, #32]
 8002890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	69f9      	ldr	r1, [r7, #28]
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	61bb      	str	r3, [r7, #24]
   return(result);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e5      	bne.n	800286e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e010      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	f43f af48 	beq.w	8002774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3770      	adds	r7, #112	; 0x70
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4d0d      	ldr	r5, [pc, #52]	; (8002928 <__libc_init_array+0x38>)
 80028f4:	4c0d      	ldr	r4, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	2600      	movs	r6, #0
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	4d0b      	ldr	r5, [pc, #44]	; (8002930 <__libc_init_array+0x40>)
 8002902:	4c0c      	ldr	r4, [pc, #48]	; (8002934 <__libc_init_array+0x44>)
 8002904:	f000 f820 	bl	8002948 <_init>
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	2600      	movs	r6, #0
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	f855 3b04 	ldr.w	r3, [r5], #4
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08002980 	.word	0x08002980
 800292c:	08002980 	.word	0x08002980
 8002930:	08002980 	.word	0x08002980
 8002934:	08002984 	.word	0x08002984

08002938 <memset>:
 8002938:	4402      	add	r2, r0
 800293a:	4603      	mov	r3, r0
 800293c:	4293      	cmp	r3, r2
 800293e:	d100      	bne.n	8002942 <memset+0xa>
 8002940:	4770      	bx	lr
 8002942:	f803 1b01 	strb.w	r1, [r3], #1
 8002946:	e7f9      	b.n	800293c <memset+0x4>

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
