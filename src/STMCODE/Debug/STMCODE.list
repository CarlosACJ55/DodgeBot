
STMCODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003940  08003940  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000002c  08003974  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003974  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a78b  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001746  00000000  00000000  0002a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024101  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ac2  00000000  00000000  00050e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1fb1  00000000  00000000  0005a8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c88c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c70  00000000  00000000  0013c8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003900 	.word	0x08003900

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08003900 	.word	0x08003900

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa4d 	bl	80009ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f812 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8ba 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f86a 	bl	80005f4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000520:	f000 f898 	bl	8000654 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  HAL_UART_Transmit(&huart2, txdata, sizeof(txdata),100);
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	221e      	movs	r2, #30
 8000528:	4902      	ldr	r1, [pc, #8]	; (8000534 <main+0x28>)
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x2c>)
 800052c:	f002 f99e 	bl	800286c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x24>
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000
 8000538:	20000048 	.word	0x20000048

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f9d0 	bl	80038f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xb0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xb0>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xb0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <SystemClock_Config+0xb4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SystemClock_Config+0xb4>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SystemClock_Config+0xb4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f897 	bl	80016dc <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005b4:	f000 f89c 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb26 	bl	8001c24 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005de:	f000 f887 	bl	80006f0 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	f002 f8ca 	bl	80027d0 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f000 f855 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000048 	.word	0x20000048
 8000650:	40004400 	.word	0x40004400

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_DMA_Init+0x38>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <MX_DMA_Init+0x38>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_DMA_Init+0x38>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2010      	movs	r0, #16
 8000678:	f000 fad1 	bl	8000c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800067c:	2010      	movs	r0, #16
 800067e:	f000 faea 	bl	8000c56 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_GPIO_Init+0x5c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_GPIO_Init+0x5c>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_GPIO_Init+0x5c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	; 0xb0
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	2284      	movs	r2, #132	; 0x84
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f003 f8c3 	bl	80038f0 <memset>
  if(huart->Instance==USART2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <HAL_UART_MspInit+0x160>)
 8000770:	4293      	cmp	r3, r2
 8000772:	f040 8093 	bne.w	800089c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fc34 	bl	8001ff0 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800078e:	f7ff ffaf 	bl	80006f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <HAL_UART_MspInit+0x164>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a44      	ldr	r2, [pc, #272]	; (80008a8 <HAL_UART_MspInit+0x164>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <HAL_UART_MspInit+0x164>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007da:	2308      	movs	r3, #8
 80007dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f2:	2307      	movs	r3, #7
 80007f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007fc:	4619      	mov	r1, r3
 80007fe:	482b      	ldr	r0, [pc, #172]	; (80008ac <HAL_UART_MspInit+0x168>)
 8000800:	f000 fdc0 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000804:	2320      	movs	r3, #32
 8000806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081c:	2307      	movs	r3, #7
 800081e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000822:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000826:	4619      	mov	r1, r3
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0x16c>)
 800082a:	f000 fdab 	bl	8001384 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <HAL_UART_MspInit+0x174>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <HAL_UART_MspInit+0x170>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0x170>)
 800084a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_UART_MspInit+0x170>)
 800085e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000862:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_UART_MspInit+0x170>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000872:	f000 fa0b 	bl	8000c8c <HAL_DMA_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800087c:	f7ff ff38 	bl	80006f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000884:	675a      	str	r2, [r3, #116]	; 0x74
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_UART_MspInit+0x170>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2026      	movs	r0, #38	; 0x26
 8000892:	f000 f9c4 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000896:	2026      	movs	r0, #38	; 0x26
 8000898:	f000 f9dd 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	37b0      	adds	r7, #176	; 0xb0
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	40026088 	.word	0x40026088

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f88e 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <DMA1_Stream5_IRQHandler+0x10>)
 8000916:	f000 faf9 	bl	8000f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000d0 	.word	0x200000d0

08000924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USART2_IRQHandler+0x10>)
 800092a:	f002 f823 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000048 	.word	0x20000048

08000938 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000962:	490e      	ldr	r1, [pc, #56]	; (800099c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000978:	4c0b      	ldr	r4, [pc, #44]	; (80009a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000986:	f7ff ffd7 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f002 ff8d 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fdbd 	bl	800050c <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009a0:	08003948 	.word	0x08003948
  ldr r2, =_sbss
 80009a4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009a8:	20000134 	.word	0x20000134

080009ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>

080009ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b2:	2003      	movs	r0, #3
 80009b4:	f000 f928 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b8:	200f      	movs	r0, #15
 80009ba:	f000 f805 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009be:	f7ff fe9d 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f943 	bl	8000c72 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f90b 	bl	8000c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000020 	.word	0x20000020
 8000a20:	20000028 	.word	0x20000028
 8000a24:	20000024 	.word	0x20000024

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000028 	.word	0x20000028
 8000a4c:	20000130 	.word	0x20000130

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000130 	.word	0x20000130

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	05fa0000 	.word	0x05fa0000

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff29 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff3e 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff8e 	bl	8000b5c <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff31 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffa2 	bl	8000bc4 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff feda 	bl	8000a50 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e099      	b.n	8000ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2202      	movs	r2, #2
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cc8:	e00f      	b.n	8000cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cca:	f7ff fec1 	bl	8000a50 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d908      	bls.n	8000cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2220      	movs	r2, #32
 8000cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e078      	b.n	8000ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1e8      	bne.n	8000cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <HAL_DMA_Init+0x158>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d107      	bne.n	8000d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d117      	bne.n	8000dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00e      	beq.n	8000dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 fa7b 	bl	800128c <DMA_CheckFifoParam>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000daa:	2301      	movs	r3, #1
 8000dac:	e016      	b.n	8000ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fa32 	bl	8001220 <DMA_CalcBaseAndBitshift>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc4:	223f      	movs	r2, #63	; 0x3f
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	f010803f 	.word	0xf010803f

08000de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000df6:	f7ff fe2b 	bl	8000a50 <HAL_GetTick>
 8000dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e052      	b.n	8000ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0216 	bic.w	r2, r2, #22
 8000e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695a      	ldr	r2, [r3, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <HAL_DMA_Abort+0x62>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0208 	bic.w	r2, r2, #8
 8000e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6a:	e013      	b.n	8000e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6c:	f7ff fdf0 	bl	8000a50 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d90c      	bls.n	8000e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e015      	b.n	8000ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1e4      	bne.n	8000e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea6:	223f      	movs	r2, #63	; 0x3f
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d004      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00c      	b.n	8000f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2205      	movs	r2, #5
 8000eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000f18:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <HAL_DMA_IRQHandler+0x248>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a8e      	ldr	r2, [pc, #568]	; (8001158 <HAL_DMA_IRQHandler+0x24c>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0a9b      	lsrs	r3, r3, #10
 8000f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f36:	2208      	movs	r2, #8
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d01a      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0204 	bic.w	r2, r2, #4
 8000f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f64:	2208      	movs	r2, #8
 8000f66:	409a      	lsls	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d012      	beq.n	8000fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	f043 0202 	orr.w	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d012      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fdc:	f043 0204 	orr.w	r2, r3, #4
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe8:	2210      	movs	r2, #16
 8000fea:	409a      	lsls	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d043      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d03c      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001006:	2210      	movs	r2, #16
 8001008:	409a      	lsls	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d018      	beq.n	800104e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d024      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
 800103a:	e01f      	b.n	800107c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01b      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
 800104c:	e016      	b.n	800107c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0208 	bic.w	r2, r2, #8
 800106a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	2220      	movs	r2, #32
 8001082:	409a      	lsls	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 808f 	beq.w	80011ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8087 	beq.w	80011ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	2220      	movs	r2, #32
 80010a4:	409a      	lsls	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d136      	bne.n	8001124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0216 	bic.w	r2, r2, #22
 80010c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <HAL_DMA_IRQHandler+0x1da>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0208 	bic.w	r2, r2, #8
 80010f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	223f      	movs	r2, #63	; 0x3f
 80010fc:	409a      	lsls	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001116:	2b00      	cmp	r3, #0
 8001118:	d07e      	beq.n	8001218 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
        }
        return;
 8001122:	e079      	b.n	8001218 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01d      	beq.n	800116e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10d      	bne.n	800115c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	2b00      	cmp	r3, #0
 8001146:	d031      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
 8001150:	e02c      	b.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
 8001152:	bf00      	nop
 8001154:	20000020 	.word	0x20000020
 8001158:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
 800116c:	e01e      	b.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10f      	bne.n	800119c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0210 	bic.w	r2, r2, #16
 800118a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d032      	beq.n	800121a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d022      	beq.n	8001206 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d307      	bcc.n	80011f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f2      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x2cc>
 80011f2:	e000      	b.n	80011f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
 8001216:	e000      	b.n	800121a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001218:	bf00      	nop
    }
  }
}
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b10      	subs	r3, #16
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <DMA_CalcBaseAndBitshift+0x60>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <DMA_CalcBaseAndBitshift+0x64>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d908      	bls.n	8001260 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <DMA_CalcBaseAndBitshift+0x68>)
 8001256:	4013      	ands	r3, r2
 8001258:	1d1a      	adds	r2, r3, #4
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	659a      	str	r2, [r3, #88]	; 0x58
 800125e:	e006      	b.n	800126e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <DMA_CalcBaseAndBitshift+0x68>)
 8001268:	4013      	ands	r3, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	aaaaaaab 	.word	0xaaaaaaab
 8001284:	08003930 	.word	0x08003930
 8001288:	fffffc00 	.word	0xfffffc00

0800128c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d11f      	bne.n	80012e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d856      	bhi.n	800135a <DMA_CheckFifoParam+0xce>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <DMA_CheckFifoParam+0x28>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012d7 	.word	0x080012d7
 80012bc:	080012c5 	.word	0x080012c5
 80012c0:	0800135b 	.word	0x0800135b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d046      	beq.n	800135e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012d4:	e043      	b.n	800135e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012de:	d140      	bne.n	8001362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012e4:	e03d      	b.n	8001362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ee:	d121      	bne.n	8001334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d837      	bhi.n	8001366 <DMA_CheckFifoParam+0xda>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <DMA_CheckFifoParam+0x70>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	08001313 	.word	0x08001313
 8001304:	0800130d 	.word	0x0800130d
 8001308:	08001325 	.word	0x08001325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
      break;
 8001310:	e030      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d025      	beq.n	800136a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001322:	e022      	b.n	800136a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800132c:	d11f      	bne.n	800136e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001332:	e01c      	b.n	800136e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d903      	bls.n	8001342 <DMA_CheckFifoParam+0xb6>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d003      	beq.n	8001348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001340:	e018      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
      break;
 8001346:	e015      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00e      	beq.n	8001372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
      break;
 8001358:	e00b      	b.n	8001372 <DMA_CheckFifoParam+0xe6>
      break;
 800135a:	bf00      	nop
 800135c:	e00a      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;
 800135e:	bf00      	nop
 8001360:	e008      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;
 8001362:	bf00      	nop
 8001364:	e006      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;
 8001366:	bf00      	nop
 8001368:	e004      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;
 800136a:	bf00      	nop
 800136c:	e002      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;   
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <DMA_CheckFifoParam+0xe8>
      break;
 8001372:	bf00      	nop
    }
  } 
  
  return status; 
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e175      	b.n	8001690 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8164 	bne.w	800168a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x56>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80be 	beq.w	800168a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001526:	4a61      	ldr	r2, [pc, #388]	; (80016ac <HAL_GPIO_Init+0x328>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_GPIO_Init+0x32c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d037      	beq.n	80015c2 <HAL_GPIO_Init+0x23e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_GPIO_Init+0x330>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d031      	beq.n	80015be <HAL_GPIO_Init+0x23a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <HAL_GPIO_Init+0x334>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d02b      	beq.n	80015ba <HAL_GPIO_Init+0x236>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a55      	ldr	r2, [pc, #340]	; (80016bc <HAL_GPIO_Init+0x338>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d025      	beq.n	80015b6 <HAL_GPIO_Init+0x232>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_GPIO_Init+0x33c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x22e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a53      	ldr	r2, [pc, #332]	; (80016c4 <HAL_GPIO_Init+0x340>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x22a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_GPIO_Init+0x344>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x226>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a51      	ldr	r2, [pc, #324]	; (80016cc <HAL_GPIO_Init+0x348>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x222>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a50      	ldr	r2, [pc, #320]	; (80016d0 <HAL_GPIO_Init+0x34c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x21e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_GPIO_Init+0x350>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x21a>
 800159a:	2309      	movs	r3, #9
 800159c:	e012      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 800159e:	230a      	movs	r3, #10
 80015a0:	e010      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00e      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015aa:	2306      	movs	r3, #6
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x240>
 80015c2:	2300      	movs	r3, #0
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015d4:	4935      	ldr	r1, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x328>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_GPIO_Init+0x354>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_GPIO_Init+0x354>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_GPIO_Init+0x354>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001630:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_GPIO_Init+0x354>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_GPIO_Init+0x354>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_GPIO_Init+0x354>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_GPIO_Init+0x354>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_GPIO_Init+0x354>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	f67f ae86 	bls.w	80013a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40021c00 	.word	0x40021c00
 80016d0:	40022000 	.word	0x40022000
 80016d4:	40022400 	.word	0x40022400
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e291      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170c:	4b93      	ldr	r3, [pc, #588]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
 8001718:	4b90      	ldr	r3, [pc, #576]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x130>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e26b      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x7a>
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a83      	ldr	r2, [pc, #524]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x9c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7e      	ldr	r2, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7b      	ldr	r2, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xc0>
 8001782:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6b      	ldr	r2, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff f948 	bl	8000a50 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff f944 	bl	8000a50 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e21f      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f934 	bl	8000a50 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f930 	bl	8000a50 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e20b      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x110>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d069      	beq.n	80018ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1df      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	493d      	ldr	r1, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e040      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f8e6 	bl	8000a50 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff f8e2 	bl	8000a50 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1bd      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4929      	ldr	r1, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f8c2 	bl	8000a50 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff f8be 	bl	8000a50 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e199      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d038      	beq.n	800196c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f89f 	bl	8000a50 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff f89b 	bl	8000a50 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e176      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x23a>
 8001934:	e01a      	b.n	800196c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff f885 	bl	8000a50 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff f881 	bl	8000a50 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d903      	bls.n	8001960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e15c      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
 800195c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b91      	ldr	r3, [pc, #580]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a4 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a87      	ldr	r2, [pc, #540]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019ae:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7e      	ldr	r2, [pc, #504]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f849 	bl	8000a50 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff f845 	bl	8000a50 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e120      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x31a>
 80019e8:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a6e      	ldr	r2, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x33c>
 80019fe:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x35e>
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a60      	ldr	r2, [pc, #384]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fff9 	bl	8000a50 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe fff5 	bl	8000a50 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ce      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x386>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7fe ffe3 	bl	8000a50 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe ffdf 	bl	8000a50 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a4 	beq.w	8001c14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d06b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d149      	bne.n	8001b74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7fe ffb0 	bl	8000a50 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe ffac 	bl	8000a50 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e087      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4313      	orrs	r3, r2
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff80 	bl	8000a50 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe ff7c 	bl	8000a50 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e057      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x478>
 8001b72:	e04f      	b.n	8001c14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe ff66 	bl	8000a50 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff62 	bl	8000a50 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e03d      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4ac>
 8001ba6:	e035      	b.n	8001c14 <HAL_RCC_OscConfig+0x538>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x544>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d028      	beq.n	8001c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d121      	bne.n	8001c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d111      	bne.n	8001c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0d0      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	4965      	ldr	r1, [pc, #404]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b8      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	494d      	ldr	r1, [pc, #308]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d040      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e073      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06b      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4936      	ldr	r1, [pc, #216]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d18:	f7fe fe9a 	bl	8000a50 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7fe fe96 	bl	8000a50 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e053      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d210      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 020f 	bic.w	r2, r3, #15
 8001d5e:	4922      	ldr	r1, [pc, #136]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e032      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4916      	ldr	r1, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f000 f821 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc8:	5ccb      	ldrb	r3, [r1, r3]
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1d4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fdf6 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08003918 	.word	0x08003918
 8001df4:	20000020 	.word	0x20000020
 8001df8:	20000024 	.word	0x20000024

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b090      	sub	sp, #64	; 0x40
 8001e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d00d      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x40>
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	f200 80a1 	bhi.w	8001f68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2e:	e09b      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e34:	e09b      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e3a:	e098      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e46:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d028      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e64:	2100      	movs	r1, #0
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e68:	fb03 f201 	mul.w	r2, r3, r1
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	fb00 f303 	mul.w	r3, r0, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e76:	fba0 1202 	umull	r1, r2, r0, r2
 8001e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e82:	4413      	add	r3, r2
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	61fa      	str	r2, [r7, #28]
 8001e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e96:	f7fe f9b7 	bl	8000208 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea2:	e053      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	2200      	movs	r2, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	617a      	str	r2, [r7, #20]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eb6:	f04f 0b00 	mov.w	fp, #0
 8001eba:	4652      	mov	r2, sl
 8001ebc:	465b      	mov	r3, fp
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	0159      	lsls	r1, r3, #5
 8001ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ecc:	0150      	lsls	r0, r2, #5
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ed6:	eb63 090b 	sbc.w	r9, r3, fp
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ee6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eee:	ebb2 0408 	subs.w	r4, r2, r8
 8001ef2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	00eb      	lsls	r3, r5, #3
 8001f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f04:	00e2      	lsls	r2, r4, #3
 8001f06:	4614      	mov	r4, r2
 8001f08:	461d      	mov	r5, r3
 8001f0a:	eb14 030a 	adds.w	r3, r4, sl
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	eb45 030b 	adc.w	r3, r5, fp
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f22:	4629      	mov	r1, r5
 8001f24:	028b      	lsls	r3, r1, #10
 8001f26:	4621      	mov	r1, r4
 8001f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	028a      	lsls	r2, r1, #10
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f36:	2200      	movs	r2, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f40:	f7fe f962 	bl	8000208 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3740      	adds	r7, #64	; 0x40
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	017d7840 	.word	0x017d7840

08001f88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000020 	.word	0x20000020

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08003928 	.word	0x08003928

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003928 	.word	0x08003928

08001ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002018:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a68      	ldr	r2, [pc, #416]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002022:	6093      	str	r3, [r2, #8]
 8002024:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	4964      	ldr	r1, [pc, #400]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d017      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	4959      	ldr	r1, [pc, #356]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d017      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	494a      	ldr	r1, [pc, #296]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a4:	d101      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 808b 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a34      	ldr	r2, [pc, #208]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7fe fcaa 	bl	8000a50 <HAL_GetTick>
 80020fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe fca6 	bl	8000a50 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e357      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d035      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d02e      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d114      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fc6e 	bl	8000a50 <HAL_GetTick>
 8002174:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7fe fc6a 	bl	8000a50 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e319      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ee      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021a6:	d111      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021b6:	400b      	ands	r3, r1
 80021b8:	4901      	ldr	r1, [pc, #4]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
 80021be:	e00b      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
 80021c8:	0ffffcff 	.word	0x0ffffcff
 80021cc:	4baa      	ldr	r3, [pc, #680]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4aa9      	ldr	r2, [pc, #676]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	49a4      	ldr	r1, [pc, #656]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021f6:	4ba0      	ldr	r3, [pc, #640]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021fc:	4a9e      	ldr	r2, [pc, #632]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002202:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002206:	4b9c      	ldr	r3, [pc, #624]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002208:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	4999      	ldr	r1, [pc, #612]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002224:	4b94      	ldr	r3, [pc, #592]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002232:	4991      	ldr	r1, [pc, #580]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002246:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002254:	4988      	ldr	r1, [pc, #544]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002268:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002276:	4980      	ldr	r1, [pc, #512]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800228a:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4977      	ldr	r1, [pc, #476]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ac:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	496f      	ldr	r1, [pc, #444]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ce:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f023 020c 	bic.w	r2, r3, #12
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022dc:	4966      	ldr	r1, [pc, #408]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	495e      	ldr	r1, [pc, #376]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002312:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	4955      	ldr	r1, [pc, #340]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002356:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4944      	ldr	r1, [pc, #272]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	493c      	ldr	r1, [pc, #240]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a8:	4933      	ldr	r1, [pc, #204]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ca:	492b      	ldr	r1, [pc, #172]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d011      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ec:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	4912      	ldr	r1, [pc, #72]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d006      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80d9 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a01      	ldr	r2, [pc, #4]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002476:	e001      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002478:	40023800 	.word	0x40023800
 800247c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247e:	f7fe fae7 	bl	8000a50 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002486:	f7fe fae3 	bl	8000a50 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e194      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002498:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d021      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11d      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024c6:	4b61      	ldr	r3, [pc, #388]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024cc:	0e1b      	lsrs	r3, r3, #24
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	019a      	lsls	r2, r3, #6
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	061b      	lsls	r3, r3, #24
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	071b      	lsls	r3, r3, #28
 80024ec:	4957      	ldr	r1, [pc, #348]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02e      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d129      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002520:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002526:	0c1b      	lsrs	r3, r3, #16
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002534:	0f1b      	lsrs	r3, r3, #28
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	019a      	lsls	r2, r3, #6
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	431a      	orrs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	071b      	lsls	r3, r3, #28
 8002554:	493d      	ldr	r1, [pc, #244]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800255e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002562:	f023 021f 	bic.w	r2, r3, #31
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01d      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	0e1b      	lsrs	r3, r3, #24
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002594:	0f1b      	lsrs	r3, r3, #28
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	019a      	lsls	r2, r3, #6
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	071b      	lsls	r3, r3, #28
 80025b4:	4925      	ldr	r1, [pc, #148]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d011      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	019a      	lsls	r2, r3, #6
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	071b      	lsls	r3, r3, #28
 80025e4:	4919      	ldr	r1, [pc, #100]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe fa2a 	bl	8000a50 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002600:	f7fe fa26 	bl	8000a50 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0d7      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 80cd 	bne.w	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002632:	f7fe fa0d 	bl	8000a50 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800263a:	f7fe fa09 	bl	8000a50 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d903      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0ba      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800264c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800265c:	d0ed      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02e      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12a      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002694:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	0f1b      	lsrs	r3, r3, #28
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	019a      	lsls	r2, r3, #6
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	4944      	ldr	r1, [pc, #272]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026c2:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	493d      	ldr	r1, [pc, #244]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d022      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f0:	d11d      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	0e1b      	lsrs	r3, r3, #24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0f1b      	lsrs	r3, r3, #28
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	4929      	ldr	r1, [pc, #164]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	019a      	lsls	r2, r3, #6
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	4917      	ldr	r1, [pc, #92]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4911      	ldr	r1, [pc, #68]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe f95a 	bl	8000a50 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a0:	f7fe f956 	bl	8000a50 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e007      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027be:	d1ef      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e040      	b.n	8002864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fd ffa6 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fba2 	bl	8002f58 <UART_SetConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e022      	b.n	8002864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fdfa 	bl	8003420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fe81 	bl	8003564 <UART_CheckIdleState>
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002880:	2b20      	cmp	r3, #32
 8002882:	d171      	bne.n	8002968 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_UART_Transmit+0x24>
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e06a      	b.n	800296a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	; 0x21
 80028a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a2:	f7fe f8d5 	bl	8000a50 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d108      	bne.n	80028d4 <HAL_UART_Transmit+0x68>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e003      	b.n	80028dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028dc:	e02c      	b.n	8002938 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fe72 	bl	80035d2 <UART_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e038      	b.n	800296a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3302      	adds	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e007      	b.n	8002926 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1cc      	bne.n	80028de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fe3f 	bl	80035d2 <UART_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e005      	b.n	800296a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0ba      	sub	sp, #232	; 0xe8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800299a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800299e:	f640 030f 	movw	r3, #2063	; 0x80f
 80029a2:	4013      	ands	r3, r2
 80029a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00f      	beq.n	80029dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8297 	beq.w	8002f00 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
      }
      return;
 80029da:	e291      	b.n	8002f00 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8117 	beq.w	8002c14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029f6:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <HAL_UART_IRQHandler+0x298>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 810a 	beq.w	8002c14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d011      	beq.n	8002a30 <HAL_UART_IRQHandler+0xbc>
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d011      	beq.n	8002a60 <HAL_UART_IRQHandler+0xec>
 8002a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d011      	beq.n	8002a90 <HAL_UART_IRQHandler+0x11c>
 8002a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d017      	beq.n	8002acc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac2:	f043 0208 	orr.w	r2, r3, #8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_UART_IRQHandler+0x18a>
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 81fd 	beq.w	8002f04 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d005      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04f      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fe01 	bl	800375e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d141      	bne.n	8002bee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3308      	adds	r3, #8
 8002b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1d9      	bne.n	8002b6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d013      	beq.n	8002be6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_UART_IRQHandler+0x29c>)
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe f97c 	bl	8000ec8 <HAL_DMA_Abort_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d017      	beq.n	8002c06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002be0:	4610      	mov	r0, r2
 8002be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e00f      	b.n	8002c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9a0 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	e00b      	b.n	8002c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f99c 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e007      	b.n	8002c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f998 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c04:	e17e      	b.n	8002f04 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c06:	bf00      	nop
    return;
 8002c08:	e17c      	b.n	8002f04 <HAL_UART_IRQHandler+0x590>
 8002c0a:	bf00      	nop
 8002c0c:	04000120 	.word	0x04000120
 8002c10:	08003827 	.word	0x08003827

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	f040 814c 	bne.w	8002eb6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8145 	beq.w	8002eb6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 813e 	beq.w	8002eb6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	f040 80b6 	bne.w	8002dbe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8150 	beq.w	8002f08 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c72:	429a      	cmp	r2, r3
 8002c74:	f080 8148 	bcs.w	8002f08 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8c:	f000 8086 	beq.w	8002d9c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1da      	bne.n	8002c90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e1      	bne.n	8002cda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3308      	adds	r3, #8
 8002d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e3      	bne.n	8002d16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6c:	f023 0310 	bic.w	r3, r3, #16
 8002d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e4      	bne.n	8002d5c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f826 	bl	8000de8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8c2 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dbc:	e0a4      	b.n	8002f08 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8096 	beq.w	8002f0c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8091 	beq.w	8002f0c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e4      	bne.n	8002dea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3308      	adds	r3, #8
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3308      	adds	r3, #8
 8002e40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e44:	633a      	str	r2, [r7, #48]	; 0x30
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e3      	bne.n	8002e20 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0310 	bic.w	r3, r3, #16
 8002e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f846 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eb4:	e02a      	b.n	8002f0c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01c      	beq.n	8002f10 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
    }
    return;
 8002ede:	e017      	b.n	8002f10 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <HAL_UART_IRQHandler+0x59e>
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00c      	beq.n	8002f12 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fcaa 	bl	8003852 <UART_EndTransmit_IT>
    return;
 8002efe:	e008      	b.n	8002f12 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f00:	bf00      	nop
 8002f02:	e006      	b.n	8002f12 <HAL_UART_IRQHandler+0x59e>
    return;
 8002f04:	bf00      	nop
 8002f06:	e004      	b.n	8002f12 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f08:	bf00      	nop
 8002f0a:	e002      	b.n	8002f12 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <HAL_UART_IRQHandler+0x59e>
    return;
 8002f10:	bf00      	nop
  }

}
 8002f12:	37e8      	adds	r7, #232	; 0xe8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4ba6      	ldr	r3, [pc, #664]	; (800321c <UART_SetConfig+0x2c4>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a94      	ldr	r2, [pc, #592]	; (8003220 <UART_SetConfig+0x2c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d120      	bne.n	8003016 <UART_SetConfig+0xbe>
 8002fd4:	4b93      	ldr	r3, [pc, #588]	; (8003224 <UART_SetConfig+0x2cc>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d816      	bhi.n	8003010 <UART_SetConfig+0xb8>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <UART_SetConfig+0x90>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003005 	.word	0x08003005
 8002ff0:	08002fff 	.word	0x08002fff
 8002ff4:	0800300b 	.word	0x0800300b
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e150      	b.n	80032a0 <UART_SetConfig+0x348>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e14d      	b.n	80032a0 <UART_SetConfig+0x348>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e14a      	b.n	80032a0 <UART_SetConfig+0x348>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e147      	b.n	80032a0 <UART_SetConfig+0x348>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e144      	b.n	80032a0 <UART_SetConfig+0x348>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a83      	ldr	r2, [pc, #524]	; (8003228 <UART_SetConfig+0x2d0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d132      	bne.n	8003086 <UART_SetConfig+0x12e>
 8003020:	4b80      	ldr	r3, [pc, #512]	; (8003224 <UART_SetConfig+0x2cc>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d828      	bhi.n	8003080 <UART_SetConfig+0x128>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <UART_SetConfig+0xdc>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003069 	.word	0x08003069
 8003038:	08003081 	.word	0x08003081
 800303c:	08003081 	.word	0x08003081
 8003040:	08003081 	.word	0x08003081
 8003044:	08003075 	.word	0x08003075
 8003048:	08003081 	.word	0x08003081
 800304c:	08003081 	.word	0x08003081
 8003050:	08003081 	.word	0x08003081
 8003054:	0800306f 	.word	0x0800306f
 8003058:	08003081 	.word	0x08003081
 800305c:	08003081 	.word	0x08003081
 8003060:	08003081 	.word	0x08003081
 8003064:	0800307b 	.word	0x0800307b
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e118      	b.n	80032a0 <UART_SetConfig+0x348>
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e115      	b.n	80032a0 <UART_SetConfig+0x348>
 8003074:	2304      	movs	r3, #4
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e112      	b.n	80032a0 <UART_SetConfig+0x348>
 800307a:	2308      	movs	r3, #8
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e10f      	b.n	80032a0 <UART_SetConfig+0x348>
 8003080:	2310      	movs	r3, #16
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e10c      	b.n	80032a0 <UART_SetConfig+0x348>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a68      	ldr	r2, [pc, #416]	; (800322c <UART_SetConfig+0x2d4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d120      	bne.n	80030d2 <UART_SetConfig+0x17a>
 8003090:	4b64      	ldr	r3, [pc, #400]	; (8003224 <UART_SetConfig+0x2cc>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d013      	beq.n	80030c6 <UART_SetConfig+0x16e>
 800309e:	2b30      	cmp	r3, #48	; 0x30
 80030a0:	d814      	bhi.n	80030cc <UART_SetConfig+0x174>
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x162>
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d810      	bhi.n	80030cc <UART_SetConfig+0x174>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <UART_SetConfig+0x15c>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d006      	beq.n	80030c0 <UART_SetConfig+0x168>
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x174>
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e0f2      	b.n	80032a0 <UART_SetConfig+0x348>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e0ef      	b.n	80032a0 <UART_SetConfig+0x348>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e0ec      	b.n	80032a0 <UART_SetConfig+0x348>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e0e9      	b.n	80032a0 <UART_SetConfig+0x348>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e0e6      	b.n	80032a0 <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a56      	ldr	r2, [pc, #344]	; (8003230 <UART_SetConfig+0x2d8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0x1c6>
 80030dc:	4b51      	ldr	r3, [pc, #324]	; (8003224 <UART_SetConfig+0x2cc>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030e6:	2bc0      	cmp	r3, #192	; 0xc0
 80030e8:	d013      	beq.n	8003112 <UART_SetConfig+0x1ba>
 80030ea:	2bc0      	cmp	r3, #192	; 0xc0
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x1c0>
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d009      	beq.n	8003106 <UART_SetConfig+0x1ae>
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d810      	bhi.n	8003118 <UART_SetConfig+0x1c0>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x1a8>
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x1b4>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x1c0>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0cc      	b.n	80032a0 <UART_SetConfig+0x348>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0c9      	b.n	80032a0 <UART_SetConfig+0x348>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0c6      	b.n	80032a0 <UART_SetConfig+0x348>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0c3      	b.n	80032a0 <UART_SetConfig+0x348>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e0c0      	b.n	80032a0 <UART_SetConfig+0x348>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a44      	ldr	r2, [pc, #272]	; (8003234 <UART_SetConfig+0x2dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d125      	bne.n	8003174 <UART_SetConfig+0x21c>
 8003128:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <UART_SetConfig+0x2cc>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003136:	d017      	beq.n	8003168 <UART_SetConfig+0x210>
 8003138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800313c:	d817      	bhi.n	800316e <UART_SetConfig+0x216>
 800313e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003142:	d00b      	beq.n	800315c <UART_SetConfig+0x204>
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d811      	bhi.n	800316e <UART_SetConfig+0x216>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <UART_SetConfig+0x1fe>
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d006      	beq.n	8003162 <UART_SetConfig+0x20a>
 8003154:	e00b      	b.n	800316e <UART_SetConfig+0x216>
 8003156:	2300      	movs	r3, #0
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e0a1      	b.n	80032a0 <UART_SetConfig+0x348>
 800315c:	2302      	movs	r3, #2
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e09e      	b.n	80032a0 <UART_SetConfig+0x348>
 8003162:	2304      	movs	r3, #4
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e09b      	b.n	80032a0 <UART_SetConfig+0x348>
 8003168:	2308      	movs	r3, #8
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e098      	b.n	80032a0 <UART_SetConfig+0x348>
 800316e:	2310      	movs	r3, #16
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e095      	b.n	80032a0 <UART_SetConfig+0x348>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <UART_SetConfig+0x2e0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d125      	bne.n	80031ca <UART_SetConfig+0x272>
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <UART_SetConfig+0x2cc>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318c:	d017      	beq.n	80031be <UART_SetConfig+0x266>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003192:	d817      	bhi.n	80031c4 <UART_SetConfig+0x26c>
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d00b      	beq.n	80031b2 <UART_SetConfig+0x25a>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	d811      	bhi.n	80031c4 <UART_SetConfig+0x26c>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x254>
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d006      	beq.n	80031b8 <UART_SetConfig+0x260>
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x26c>
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e076      	b.n	80032a0 <UART_SetConfig+0x348>
 80031b2:	2302      	movs	r3, #2
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e073      	b.n	80032a0 <UART_SetConfig+0x348>
 80031b8:	2304      	movs	r3, #4
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e070      	b.n	80032a0 <UART_SetConfig+0x348>
 80031be:	2308      	movs	r3, #8
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e06d      	b.n	80032a0 <UART_SetConfig+0x348>
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e06a      	b.n	80032a0 <UART_SetConfig+0x348>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <UART_SetConfig+0x2e4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d138      	bne.n	8003246 <UART_SetConfig+0x2ee>
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <UART_SetConfig+0x2cc>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031e2:	d017      	beq.n	8003214 <UART_SetConfig+0x2bc>
 80031e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031e8:	d82a      	bhi.n	8003240 <UART_SetConfig+0x2e8>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	d00b      	beq.n	8003208 <UART_SetConfig+0x2b0>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d824      	bhi.n	8003240 <UART_SetConfig+0x2e8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <UART_SetConfig+0x2aa>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	d006      	beq.n	800320e <UART_SetConfig+0x2b6>
 8003200:	e01e      	b.n	8003240 <UART_SetConfig+0x2e8>
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e04b      	b.n	80032a0 <UART_SetConfig+0x348>
 8003208:	2302      	movs	r3, #2
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e048      	b.n	80032a0 <UART_SetConfig+0x348>
 800320e:	2304      	movs	r3, #4
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e045      	b.n	80032a0 <UART_SetConfig+0x348>
 8003214:	2308      	movs	r3, #8
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e042      	b.n	80032a0 <UART_SetConfig+0x348>
 800321a:	bf00      	nop
 800321c:	efff69f3 	.word	0xefff69f3
 8003220:	40011000 	.word	0x40011000
 8003224:	40023800 	.word	0x40023800
 8003228:	40004400 	.word	0x40004400
 800322c:	40004800 	.word	0x40004800
 8003230:	40004c00 	.word	0x40004c00
 8003234:	40005000 	.word	0x40005000
 8003238:	40011400 	.word	0x40011400
 800323c:	40007800 	.word	0x40007800
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e02c      	b.n	80032a0 <UART_SetConfig+0x348>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a72      	ldr	r2, [pc, #456]	; (8003414 <UART_SetConfig+0x4bc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d125      	bne.n	800329c <UART_SetConfig+0x344>
 8003250:	4b71      	ldr	r3, [pc, #452]	; (8003418 <UART_SetConfig+0x4c0>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800325e:	d017      	beq.n	8003290 <UART_SetConfig+0x338>
 8003260:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003264:	d817      	bhi.n	8003296 <UART_SetConfig+0x33e>
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326a:	d00b      	beq.n	8003284 <UART_SetConfig+0x32c>
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003270:	d811      	bhi.n	8003296 <UART_SetConfig+0x33e>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <UART_SetConfig+0x326>
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327a:	d006      	beq.n	800328a <UART_SetConfig+0x332>
 800327c:	e00b      	b.n	8003296 <UART_SetConfig+0x33e>
 800327e:	2300      	movs	r3, #0
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e00d      	b.n	80032a0 <UART_SetConfig+0x348>
 8003284:	2302      	movs	r3, #2
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e00a      	b.n	80032a0 <UART_SetConfig+0x348>
 800328a:	2304      	movs	r3, #4
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e007      	b.n	80032a0 <UART_SetConfig+0x348>
 8003290:	2308      	movs	r3, #8
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e004      	b.n	80032a0 <UART_SetConfig+0x348>
 8003296:	2310      	movs	r3, #16
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e001      	b.n	80032a0 <UART_SetConfig+0x348>
 800329c:	2310      	movs	r3, #16
 800329e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a8:	d15b      	bne.n	8003362 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d828      	bhi.n	8003302 <UART_SetConfig+0x3aa>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0x360>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	08003303 	.word	0x08003303
 80032c8:	080032f3 	.word	0x080032f3
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003303 	.word	0x08003303
 80032d4:	08003303 	.word	0x08003303
 80032d8:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fe60 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e013      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7fe fe70 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80032e8:	61b8      	str	r0, [r7, #24]
        break;
 80032ea:	e00f      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <UART_SetConfig+0x4c4>)
 80032ee:	61bb      	str	r3, [r7, #24]
        break;
 80032f0:	e00c      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7fe fd83 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 80032f6:	61b8      	str	r0, [r7, #24]
        break;
 80032f8:	e008      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	61bb      	str	r3, [r7, #24]
        break;
 8003300:	e004      	b.n	800330c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	77bb      	strb	r3, [r7, #30]
        break;
 800330a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d074      	beq.n	80033fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	005a      	lsls	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d916      	bls.n	800335c <UART_SetConfig+0x404>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d212      	bcs.n	800335c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	b29a      	uxth	r2, r3
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	4313      	orrs	r3, r2
 8003350:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	89fa      	ldrh	r2, [r7, #14]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e04f      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
 8003360:	e04c      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x462>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0x418>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe fe04 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e013      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7fe fe14 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80033a0:	61b8      	str	r0, [r7, #24]
        break;
 80033a2:	e00f      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <UART_SetConfig+0x4c4>)
 80033a6:	61bb      	str	r3, [r7, #24]
        break;
 80033a8:	e00c      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7fe fd27 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 80033ae:	61b8      	str	r0, [r7, #24]
        break;
 80033b0:	e008      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e004      	b.n	80033c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77bb      	strb	r3, [r7, #30]
        break;
 80033c2:	bf00      	nop
    }

    if (pclk != 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085a      	lsrs	r2, r3, #1
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d909      	bls.n	80033f8 <UART_SetConfig+0x4a0>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d205      	bcs.n	80033f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e001      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003408:	7fbb      	ldrb	r3, [r7, #30]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40007c00 	.word	0x40007c00
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400

08003420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01a      	beq.n	8003536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351e:	d10a      	bne.n	8003536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003574:	f7fd fa6c 	bl	8000a50 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d10e      	bne.n	80035a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f81b 	bl	80035d2 <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e011      	b.n	80035ca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b09c      	sub	sp, #112	; 0x70
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e2:	e0a7      	b.n	8003734 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	f000 80a3 	beq.w	8003734 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fd fa2f 	bl	8000a50 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <UART_WaitOnFlagUntilTimeout+0x32>
 80035fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13f      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003618:	667b      	str	r3, [r7, #100]	; 0x64
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003624:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	663b      	str	r3, [r7, #96]	; 0x60
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3308      	adds	r3, #8
 8003654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003656:	64ba      	str	r2, [r7, #72]	; 0x48
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800365c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e068      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d050      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a0:	d148      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
 80036cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e6      	bne.n	80036ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3308      	adds	r3, #8
 80036e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	613b      	str	r3, [r7, #16]
   return(result);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036fe:	623a      	str	r2, [r7, #32]
 8003700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	61bb      	str	r3, [r7, #24]
   return(result);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e5      	bne.n	80036de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e010      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	f43f af48 	beq.w	80035e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3770      	adds	r7, #112	; 0x70
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375e:	b480      	push	{r7}
 8003760:	b095      	sub	sp, #84	; 0x54
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	643b      	str	r3, [r7, #64]	; 0x40
 8003786:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800378a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e6      	bne.n	8003766 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d118      	bne.n	8003806 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0310 	bic.w	r3, r3, #16
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e6      	bne.n	80037d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	; 0x68
}
 800381a:	bf00      	nop
 800381c:	3754      	adds	r7, #84	; 0x54
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fb71 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	60bb      	str	r3, [r7, #8]
   return(result);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	613b      	str	r3, [r7, #16]
   return(result);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e6      	bne.n	800385a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fb3d 	bl	8002f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4d0d      	ldr	r5, [pc, #52]	; (80038e0 <__libc_init_array+0x38>)
 80038ac:	4c0d      	ldr	r4, [pc, #52]	; (80038e4 <__libc_init_array+0x3c>)
 80038ae:	1b64      	subs	r4, r4, r5
 80038b0:	10a4      	asrs	r4, r4, #2
 80038b2:	2600      	movs	r6, #0
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	4d0b      	ldr	r5, [pc, #44]	; (80038e8 <__libc_init_array+0x40>)
 80038ba:	4c0c      	ldr	r4, [pc, #48]	; (80038ec <__libc_init_array+0x44>)
 80038bc:	f000 f820 	bl	8003900 <_init>
 80038c0:	1b64      	subs	r4, r4, r5
 80038c2:	10a4      	asrs	r4, r4, #2
 80038c4:	2600      	movs	r6, #0
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	08003940 	.word	0x08003940
 80038e4:	08003940 	.word	0x08003940
 80038e8:	08003940 	.word	0x08003940
 80038ec:	08003944 	.word	0x08003944

080038f0 <memset>:
 80038f0:	4402      	add	r2, r0
 80038f2:	4603      	mov	r3, r0
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d100      	bne.n	80038fa <memset+0xa>
 80038f8:	4770      	bx	lr
 80038fa:	f803 1b01 	strb.w	r1, [r3], #1
 80038fe:	e7f9      	b.n	80038f4 <memset+0x4>

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
