
actuation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000005c  08004ce0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004ce0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc11  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242f  00000000  00000000  0002fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b70  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c14  00000000  00000000  00033b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001258a  00000000  00000000  0005472c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90c9  00000000  00000000  00066cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004394  00000000  00000000  0012fd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00134114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000005c 	.word	0x2000005c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08004bb4 	.word	0x08004bb4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000060 	.word	0x20000060
 80001c0:	08004bb4 	.word	0x08004bb4

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	468e      	mov	lr, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14c      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d967      	bls.n	80002fe <__udivmoddi4+0xe6>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b153      	cbz	r3, 800024a <__udivmoddi4+0x32>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000240:	fa20 f202 	lsr.w	r2, r0, r2
 8000244:	ea42 0e0e 	orr.w	lr, r2, lr
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fbbe f1f7 	udiv	r1, lr, r7
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fb07 ee11 	mls	lr, r7, r1, lr
 800025a:	fb01 f005 	mul.w	r0, r1, r5
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x66>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000270:	f080 8119 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8116 	bls.w	80004a6 <__udivmoddi4+0x28e>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	fbb2 f0f7 	udiv	r0, r2, r7
 8000284:	fb07 2210 	mls	r2, r7, r0, r2
 8000288:	fb00 f505 	mul.w	r5, r0, r5
 800028c:	b2a4      	uxth	r4, r4
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8104 	bcs.w	80004aa <__udivmoddi4+0x292>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8101 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa6>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xc0>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ea 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d148      	bne.n	8000372 <__udivmoddi4+0x15a>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xd2>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2c2>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4696      	mov	lr, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa6>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xea>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 808e 	bne.w	8000428 <__udivmoddi4+0x210>
 800030c:	1a88      	subs	r0, r1, r2
 800030e:	2101      	movs	r1, #1
 8000310:	0c17      	lsrs	r7, r2, #16
 8000312:	fa1f fe82 	uxth.w	lr, r2
 8000316:	fbb0 f5f7 	udiv	r5, r0, r7
 800031a:	fb07 0015 	mls	r0, r7, r5, r0
 800031e:	0c22      	lsrs	r2, r4, #16
 8000320:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000324:	fb0e f005 	mul.w	r0, lr, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x126>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f105 38ff 	add.w	r8, r5, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x124>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 80cc 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033c:	4645      	mov	r5, r8
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	45a6      	cmp	lr, r4
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x150>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14e>
 8000360:	45a6      	cmp	lr, r4
 8000362:	f200 80b4 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000366:	4610      	mov	r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000370:	e7a0      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000372:	f1c1 0720 	rsb	r7, r1, #32
 8000376:	408b      	lsls	r3, r1
 8000378:	fa22 fc07 	lsr.w	ip, r2, r7
 800037c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000380:	fa25 fa07 	lsr.w	sl, r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	fbba f8f9 	udiv	r8, sl, r9
 800038c:	408d      	lsls	r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	432b      	orrs	r3, r5
 800039c:	fa00 f501 	lsl.w	r5, r0, r1
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	0c1c      	lsrs	r4, r3, #16
 80003a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003aa:	42a0      	cmp	r0, r4
 80003ac:	fa02 f201 	lsl.w	r2, r2, r1
 80003b0:	d90b      	bls.n	80003ca <__udivmoddi4+0x1b2>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ba:	f080 8086 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003be:	42a0      	cmp	r0, r4
 80003c0:	f240 8083 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c4:	f1a8 0802 	sub.w	r8, r8, #2
 80003c8:	4464      	add	r4, ip
 80003ca:	1a24      	subs	r4, r4, r0
 80003cc:	b298      	uxth	r0, r3
 80003ce:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d2:	fb09 4413 	mls	r4, r9, r3, r4
 80003d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80003da:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x1dc>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ea:	d26a      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d968      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003f0:	3b02      	subs	r3, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f8:	fba0 9302 	umull	r9, r3, r0, r2
 80003fc:	eba4 040e 	sub.w	r4, r4, lr
 8000400:	429c      	cmp	r4, r3
 8000402:	46c8      	mov	r8, r9
 8000404:	469e      	mov	lr, r3
 8000406:	d354      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000408:	d051      	beq.n	80004ae <__udivmoddi4+0x296>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d067      	beq.n	80004de <__udivmoddi4+0x2c6>
 800040e:	ebb5 0308 	subs.w	r3, r5, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	40cb      	lsrs	r3, r1
 8000418:	fa04 f707 	lsl.w	r7, r4, r7
 800041c:	431f      	orrs	r7, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e74a      	b.n	80002be <__udivmoddi4+0xa6>
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	f1c3 0020 	rsb	r0, r3, #32
 8000430:	40c1      	lsrs	r1, r0
 8000432:	409d      	lsls	r5, r3
 8000434:	fa24 f000 	lsr.w	r0, r4, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	4328      	orrs	r0, r5
 800043e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000442:	fb07 1115 	mls	r1, r7, r5, r1
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	0c02      	lsrs	r2, r0, #16
 800044c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000450:	fb05 f10e 	mul.w	r1, r5, lr
 8000454:	4291      	cmp	r1, r2
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f105 38ff 	add.w	r8, r5, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	4291      	cmp	r1, r2
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3d02      	subs	r5, #2
 800046c:	4462      	add	r2, ip
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	fbb2 f1f7 	udiv	r1, r2, r7
 8000474:	fb07 2211 	mls	r2, r7, r1, r2
 8000478:	b280      	uxth	r0, r0
 800047a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800047e:	fb01 f20e 	mul.w	r2, r1, lr
 8000482:	4282      	cmp	r2, r0
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0000 	adds.w	r0, ip, r0
 800048a:	f101 38ff 	add.w	r8, r1, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4282      	cmp	r2, r0
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3902      	subs	r1, #2
 8000496:	4460      	add	r0, ip
 8000498:	1a80      	subs	r0, r0, r2
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	e73a      	b.n	8000316 <__udivmoddi4+0xfe>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e70b      	b.n	80002be <__udivmoddi4+0xa6>
 80004a6:	4671      	mov	r1, lr
 80004a8:	e6e9      	b.n	800027e <__udivmoddi4+0x66>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fe      	b.n	80002ac <__udivmoddi4+0x94>
 80004ae:	454d      	cmp	r5, r9
 80004b0:	d2ab      	bcs.n	800040a <__udivmoddi4+0x1f2>
 80004b2:	ebb9 0802 	subs.w	r8, r9, r2
 80004b6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a5      	b.n	800040a <__udivmoddi4+0x1f2>
 80004be:	4641      	mov	r1, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1dc>
 80004c6:	4645      	mov	r5, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77d      	b.n	80003ca <__udivmoddi4+0x1b2>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e749      	b.n	8000368 <__udivmoddi4+0x150>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e731      	b.n	800033e <__udivmoddi4+0x126>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xdc>
 80004de:	4631      	mov	r1, r6
 80004e0:	e6ed      	b.n	80002be <__udivmoddi4+0xa6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fda8 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f854 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fa2a 	bl	800094c <MX_GPIO_Init>
  MX_RTC_Init();
 80004f8:	f000 f8e4 	bl	80006c4 <MX_RTC_Init>
  MX_TIM1_Init();
 80004fc:	f000 f908 	bl	8000710 <MX_TIM1_Init>
  MX_TIM12_Init();
 8000500:	f000 f990 	bl	8000824 <MX_TIM12_Init>
  MX_DAC_Init();
 8000504:	f000 f8aa 	bl	800065c <MX_DAC_Init>
  MX_USART6_UART_Init();
 8000508:	f000 f9f6 	bl	80008f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_RegisterRxEventCallback(&huart6, handleRx)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0x98>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <main+0x98>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f042 0220 	orr.w	r2, r2, #32
 800051a:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart6, (unsigned char *)&c, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4919      	ldr	r1, [pc, #100]	; (8000584 <main+0x9c>)
 8000520:	4817      	ldr	r0, [pc, #92]	; (8000580 <main+0x98>)
 8000522:	f003 f80c 	bl	800353e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000526:	210c      	movs	r1, #12
 8000528:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0xa0>)
 800052a:	f002 f8ab 	bl	8002684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	4816      	ldr	r0, [pc, #88]	; (800058c <main+0xa4>)
 8000532:	f002 f8a7 	bl	8002684 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim1.Instance->CNT = 0;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0xa0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  htim12.Instance->CNT = 0;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0xa4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (msgReady) {
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <main+0xa8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0fb      	beq.n	8000546 <main+0x5e>
      msgReady = 0;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <main+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
      switch (msg[0]) {
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0xac>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b21      	cmp	r3, #33	; 0x21
 800055a:	d002      	beq.n	8000562 <main+0x7a>
 800055c:	2b58      	cmp	r3, #88	; 0x58
 800055e:	d00d      	beq.n	800057c <main+0x94>
 8000560:	e008      	b.n	8000574 <main+0x8c>
      case '!':
        transmit(msg);
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <main+0xac>)
 8000564:	f000 fab2 	bl	8000acc <transmit>
        handleCommand(msg[1]);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0xac>)
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fad1 	bl	8000b14 <handleCommand>
        break;
 8000572:	e004      	b.n	800057e <main+0x96>
      case 'X':
        break;
      default:

        gameState = DISCONNECTED;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <main+0xb0>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e7e4      	b.n	8000546 <main+0x5e>
        break;
 800057c:	bf00      	nop
    if (msgReady) {
 800057e:	e7e2      	b.n	8000546 <main+0x5e>
 8000580:	2000013c 	.word	0x2000013c
 8000584:	200001d2 	.word	0x200001d2
 8000588:	200000ac 	.word	0x200000ac
 800058c:	200000f4 	.word	0x200000f4
 8000590:	200001d8 	.word	0x200001d8
 8000594:	200001dc 	.word	0x200001dc
 8000598:	200001eb 	.word	0x200001eb

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	; 0x58
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fe68 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ce:	230a      	movs	r3, #10
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2300      	movs	r3, #0
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 80005e6:	230d      	movs	r3, #13
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 80005ea:	23c3      	movs	r3, #195	; 0xc3
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f95c 	bl	80018b8 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000606:	f000 fb01 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2103      	movs	r1, #3
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fb99 	bl	8001d60 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000634:	f000 faea 	bl	8000c0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000638:	2304      	movs	r3, #4
 800063a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800063c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000640:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fd8b 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000650:	f000 fadc 	bl	8000c0c <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3758      	adds	r7, #88	; 0x58
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_DAC_Init+0x60>)
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <MX_DAC_Init+0x64>)
 800066e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <MX_DAC_Init+0x60>)
 8000672:	f000 fe60 	bl	8001336 <HAL_DAC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800067c:	f000 fac6 	bl	8000c0c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	4619      	mov	r1, r3
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_DAC_Init+0x60>)
 8000690:	f000 fe73 	bl	800137a <HAL_DAC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800069a:	f000 fab7 	bl	8000c0c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2210      	movs	r2, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_DAC_Init+0x60>)
 80006a6:	f000 fe68 	bl	800137a <HAL_DAC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80006b0:	f000 faac 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000078 	.word	0x20000078
 80006c0:	40007400 	.word	0x40007400

080006c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_RTC_Init+0x44>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <MX_RTC_Init+0x48>)
 80006cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_RTC_Init+0x44>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_RTC_Init+0x44>)
 80006d6:	227f      	movs	r2, #127	; 0x7f
 80006d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_RTC_Init+0x44>)
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_RTC_Init+0x44>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_RTC_Init+0x44>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_RTC_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_RTC_Init+0x44>)
 80006f4:	f001 fe2a 	bl	800234c <HAL_RTC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006fe:	f000 fa85 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40002800 	.word	0x40002800

08000710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b092      	sub	sp, #72	; 0x48
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fda0 	bl	8004280 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <MX_TIM1_Init+0x10c>)
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <MX_TIM1_Init+0x110>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_TIM1_Init+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <MX_TIM1_Init+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_TIM1_Init+0x10c>)
 8000754:	2204      	movs	r2, #4
 8000756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_TIM1_Init+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_TIM1_Init+0x10c>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_TIM1_Init+0x10c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076a:	482c      	ldr	r0, [pc, #176]	; (800081c <MX_TIM1_Init+0x10c>)
 800076c:	f001 ff3a 	bl	80025e4 <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 fa49 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800077a:	2108      	movs	r1, #8
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <MX_TIM1_Init+0x10c>)
 800077e:	f002 f849 	bl	8002814 <HAL_TIM_OnePulse_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 fa40 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000794:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000798:	4619      	mov	r1, r3
 800079a:	4820      	ldr	r0, [pc, #128]	; (800081c <MX_TIM1_Init+0x10c>)
 800079c:	f002 fd22 	bl	80031e4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80007a6:	f000 fa31 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80007aa:	2370      	movs	r3, #112	; 0x70
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	220c      	movs	r2, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <MX_TIM1_Init+0x10c>)
 80007cc:	f002 f87c 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007d6:	f000 fa19 	bl	8000c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM1_Init+0x10c>)
 80007fe:	f002 fd6b 	bl	80032d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000808:	f000 fa00 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM1_Init+0x10c>)
 800080e:	f000 fac5 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3748      	adds	r7, #72	; 0x48
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000ac 	.word	0x200000ac
 8000820:	40010000 	.word	0x40010000

08000824 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_TIM12_Init+0xcc>)
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <MX_TIM12_Init+0xd0>)
 800084e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_TIM12_Init+0xcc>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_TIM12_Init+0xcc>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_TIM12_Init+0xcc>)
 800085e:	2204      	movs	r2, #4
 8000860:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_TIM12_Init+0xcc>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_TIM12_Init+0xcc>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_TIM12_Init+0xcc>)
 8000870:	f001 fe69 	bl	8002546 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 f9c7 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <MX_TIM12_Init+0xcc>)
 800088c:	f002 f8de 	bl	8002a4c <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000896:	f000 f9b9 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_TIM12_Init+0xcc>)
 800089c:	f001 fea2 	bl	80025e4 <HAL_TIM_PWM_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80008a6:	f000 f9b1 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK)
 80008aa:	2108      	movs	r1, #8
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM12_Init+0xcc>)
 80008ae:	f001 ffb1 	bl	8002814 <HAL_TIM_OnePulse_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM12_Init+0x98>
  {
    Error_Handler();
 80008b8:	f000 f9a8 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008bc:	2370      	movs	r3, #112	; 0x70
 80008be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM12_Init+0xcc>)
 80008d4:	f001 fff8 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 80008de:	f000 f995 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM12_Init+0xcc>)
 80008e4:	f000 fa5a 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000f4 	.word	0x200000f4
 80008f4:	40001800 	.word	0x40001800

080008f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART6_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 8000904:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000908:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART6_UART_Init+0x4c>)
 8000930:	f002 fd24 	bl	800337c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f967 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000013c 	.word	0x2000013c
 8000948:	40011400 	.word	0x40011400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a53      	ldr	r2, [pc, #332]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a4c      	ldr	r2, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a45      	ldr	r2, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0x16c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <MX_GPIO_Init+0x170>)
 8000a12:	f000 ff39 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <MX_GPIO_Init+0x174>)
 8000a1e:	f000 ff33 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x178>)
 8000a2a:	f000 ff2d 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	4825      	ldr	r0, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0x17c>)
 8000a34:	f000 ff28 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481a      	ldr	r0, [pc, #104]	; (8000abc <MX_GPIO_Init+0x170>)
 8000a52:	f000 fd7b 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0x174>)
 8000a70:	f000 fd6c 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x178>)
 8000a8e:	f000 fd5d 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_GPIO_Init+0x17c>)
 8000aaa:	f000 fd4f 	bl	800154c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40021000 	.word	0x40021000

08000acc <transmit>:

/* USER CODE BEGIN 4 */
void transmit(const unsigned char *m) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
  char s[MAX_TX_LEN];
  snprintf(s, sizeof(s), "%s#%s;\n", m, m);
 8000ad4:	f107 0008 	add.w	r0, r7, #8
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <transmit+0x40>)
 8000ae0:	211e      	movs	r1, #30
 8000ae2:	f003 fb99 	bl	8004218 <sniprintf>
  HAL_UART_Transmit(&huart6, (unsigned char *)s, strlen(s), HAL_MAX_DELAY);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb74 	bl	80001d8 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f107 0108 	add.w	r1, r7, #8
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <transmit+0x44>)
 8000afe:	f002 fc9b 	bl	8003438 <HAL_UART_Transmit>
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08004bcc 	.word	0x08004bcc
 8000b10:	2000013c 	.word	0x2000013c

08000b14 <handleCommand>:
  htim12.Instance->CNT = 0;
  htim1.Instance->CNT = 0;
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
}

static void handleCommand(const char cmd) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  switch (cmd) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d80f      	bhi.n	8000b44 <handleCommand+0x30>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <handleCommand+0x18>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b4d 	.word	0x08000b4d
 8000b30:	08000b3d 	.word	0x08000b3d
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000b4d 	.word	0x08000b4d
  case IN_GAME:
    break;
    case IDLE:
      transmit((unsigned char *)"X,1,200,0,100\n");
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <handleCommand+0x44>)
 8000b3e:	f7ff ffc5 	bl	8000acc <transmit>
    break;
 8000b42:	e004      	b.n	8000b4e <handleCommand+0x3a>
    /* code */
    break;
  case DISCONNECTED:
    break;
  default:
    transmit((unsigned char *)"Unsynchronized.\n");
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <handleCommand+0x48>)
 8000b46:	f7ff ffc1 	bl	8000acc <transmit>
  }
}
 8000b4a:	e000      	b.n	8000b4e <handleCommand+0x3a>
    break;
 8000b4c:	bf00      	nop
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08004c04 	.word	0x08004c04
 8000b5c:	08004c14 	.word	0x08004c14

08000b60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  switch (c) {
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_UART_RxCpltCallback+0x94>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b23      	cmp	r3, #35	; 0x23
 8000b70:	d002      	beq.n	8000b78 <HAL_UART_RxCpltCallback+0x18>
 8000b72:	2b3b      	cmp	r3, #59	; 0x3b
 8000b74:	d013      	beq.n	8000b9e <HAL_UART_RxCpltCallback+0x3e>
 8000b76:	e02d      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x74>
  case '#':
    msg[i] = buffer[i] = '\0';
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <HAL_UART_RxCpltCallback+0x9c>)
 8000b80:	4601      	mov	r1, r0
 8000b82:	54d1      	strb	r1, [r2, r3]
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_UART_RxCpltCallback+0xa0>)
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	54d1      	strb	r1, [r2, r3]
    strcpy((char *)msg, (char *)buffer);
 8000b8e:	491b      	ldr	r1, [pc, #108]	; (8000bfc <HAL_UART_RxCpltCallback+0x9c>)
 8000b90:	481b      	ldr	r0, [pc, #108]	; (8000c00 <HAL_UART_RxCpltCallback+0xa0>)
 8000b92:	f003 fba9 	bl	80042e8 <strcpy>
    i = 0;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
    break;
 8000b9c:	e025      	b.n	8000bea <HAL_UART_RxCpltCallback+0x8a>
  case ';':
    buffer[i] = '\0';
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_UART_RxCpltCallback+0x9c>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	54d1      	strb	r1, [r2, r3]
    if (strcmp((char *)msg, (char *)buffer) || msgReady)
 8000ba8:	4914      	ldr	r1, [pc, #80]	; (8000bfc <HAL_UART_RxCpltCallback+0x9c>)
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <HAL_UART_RxCpltCallback+0xa0>)
 8000bac:	f7ff fb0a 	bl	80001c4 <strcmp>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0x5e>
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_UART_RxCpltCallback+0xa4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_UART_RxCpltCallback+0x66>
      gameState = DISCONNECTED;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_UART_RxCpltCallback+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e002      	b.n	8000bcc <HAL_UART_RxCpltCallback+0x6c>
    else
      msgReady = 1;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0xa4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
    i = 0;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
    break;
 8000bd2:	e00a      	b.n	8000bea <HAL_UART_RxCpltCallback+0x8a>
  default:
    buffer[i++] = c;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <HAL_UART_RxCpltCallback+0x98>)
 8000bdc:	600a      	str	r2, [r1, #0]
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <HAL_UART_RxCpltCallback+0x94>)
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_UART_RxCpltCallback+0x9c>)
 8000be6:	54d1      	strb	r1, [r2, r3]
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001d2 	.word	0x200001d2
 8000bf8:	200001d4 	.word	0x200001d4
 8000bfc:	200001b4 	.word	0x200001b4
 8000c00:	200001dc 	.word	0x200001dc
 8000c04:	200001d8 	.word	0x200001d8
 8000c08:	200001eb 	.word	0x200001eb

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
   */
  __disable_irq();
  //  while (1) {
  //  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x48>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x48>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x48>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_MspInit+0x48>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_MspInit+0x48>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_MspInit+0x48>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_DAC_MspInit+0x7c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d127      	bne.n	8000cda <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_DAC_MspInit+0x80>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_DAC_MspInit+0x84>)
 8000cd6:	f000 fc39 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40007400 	.word	0x40007400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <HAL_RTC_MspInit+0x24>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_RTC_MspInit+0x28>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40002800 	.word	0x40002800
 8000d18:	42470e3c 	.word	0x42470e3c

08000d1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_TIM_PWM_MspInit+0x38>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_TIM_Base_MspInit+0x38>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10d      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_TIM_Base_MspInit+0x3c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_TIM_Base_MspInit+0x3c>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_TIM_Base_MspInit+0x3c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40001800 	.word	0x40001800
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d11f      	bne.n	8000dfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <HAL_TIM_MspPostInit+0xbc>)
 8000df8:	f000 fba8 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000dfc:	e023      	b.n	8000e46 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <HAL_TIM_MspPostInit+0xc0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d11e      	bne.n	8000e46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e36:	2309      	movs	r3, #9
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <HAL_TIM_MspPostInit+0xc4>)
 8000e42:	f000 fb83 	bl	800154c <HAL_GPIO_Init>
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010000 	.word	0x40010000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40001800 	.word	0x40001800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_UART_MspInit+0x94>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d133      	bne.n	8000eee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ebe:	23c0      	movs	r3, #192	; 0xc0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_UART_MspInit+0x9c>)
 8000eda:	f000 fb37 	bl	800154c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2047      	movs	r0, #71	; 0x47
 8000ee4:	f000 f9f1 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ee8:	2047      	movs	r0, #71	; 0x47
 8000eea:	f000 fa0a 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020800 	.word	0x40020800

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f8cb 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <USART6_IRQHandler+0x18>)
 8000f5a:	f002 fb15 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  HAL_UART_Receive_IT(&huart6, &c, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4903      	ldr	r1, [pc, #12]	; (8000f70 <USART6_IRQHandler+0x1c>)
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <USART6_IRQHandler+0x18>)
 8000f64:	f002 faeb 	bl	800353e <HAL_UART_Receive_IT>
  /* USER CODE END USART6_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000013c 	.word	0x2000013c
 8000f70:	200001d2 	.word	0x200001d2

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f003 f974 	bl	8004290 <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20020000 	.word	0x20020000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200001ec 	.word	0x200001ec
 8000fdc:	20000340 	.word	0x20000340

08000fe0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000ff0:	f7ff fff6 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 f93f 	bl	800429c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fa63 	bl	80004e8 <main>
  bx  lr
 8001022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001030:	08004c84 	.word	0x08004c84
  ldr r2, =_sbss
 8001034:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001038:	2000033c 	.word	0x2000033c

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f923 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fdd2 	bl	8000c1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f93b 	bl	800131e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f903 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x1c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x20>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_IncTick+0x20>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000008 	.word	0x20000008
 8001104:	200001f0 	.word	0x200001f0

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <HAL_GetTick+0x10>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	200001f0 	.word	0x200001f0

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	; (80011b4 <__NVIC_EnableIRQ+0x34>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff2d 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff42 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e014      	b.n	8001372 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fc85 	bl	8000c68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800137a:	b480      	push	{r7}
 800137c:	b089      	sub	sp, #36	; 0x24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_DAC_ConfigChannel+0x1c>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e042      	b.n	8001420 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_DAC_ConfigChannel+0x2c>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e03c      	b.n	8001420 <HAL_DAC_ConfigChannel+0xa6>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2202      	movs	r2, #2
 80013b0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	22c0      	movs	r2, #192	; 0xc0
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43da      	mvns	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800141e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3724      	adds	r7, #36	; 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fe66 	bl	8001108 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d008      	beq.n	800145c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e052      	b.n	8001502 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0216 	bic.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800147a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <HAL_DMA_Abort+0x62>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0208 	bic.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	e013      	b.n	80014d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fe2b 	bl	8001108 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d90c      	bls.n	80014d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e015      	b.n	8001502 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e4      	bne.n	80014ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	223f      	movs	r2, #63	; 0x3f
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d004      	beq.n	8001528 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e00c      	b.n	8001542 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2205      	movs	r2, #5
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e16f      	b.n	800183c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8161 	beq.w	8001836 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d005      	beq.n	800158c <HAL_GPIO_Init+0x40>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d130      	bne.n	80015ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c2:	2201      	movs	r2, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	f003 0201 	and.w	r2, r3, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d017      	beq.n	800162a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d123      	bne.n	800167e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0203 	and.w	r2, r3, #3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80bb 	beq.w	8001836 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4a63      	ldr	r2, [pc, #396]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	4b61      	ldr	r3, [pc, #388]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_GPIO_Init+0x310>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_GPIO_Init+0x314>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d031      	beq.n	800176c <HAL_GPIO_Init+0x220>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a56      	ldr	r2, [pc, #344]	; (8001864 <HAL_GPIO_Init+0x318>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d02b      	beq.n	8001768 <HAL_GPIO_Init+0x21c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a55      	ldr	r2, [pc, #340]	; (8001868 <HAL_GPIO_Init+0x31c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d025      	beq.n	8001764 <HAL_GPIO_Init+0x218>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_GPIO_Init+0x320>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d01f      	beq.n	8001760 <HAL_GPIO_Init+0x214>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a53      	ldr	r2, [pc, #332]	; (8001870 <HAL_GPIO_Init+0x324>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d019      	beq.n	800175c <HAL_GPIO_Init+0x210>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_GPIO_Init+0x328>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x20c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a51      	ldr	r2, [pc, #324]	; (8001878 <HAL_GPIO_Init+0x32c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x208>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a50      	ldr	r2, [pc, #320]	; (800187c <HAL_GPIO_Init+0x330>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x204>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4f      	ldr	r2, [pc, #316]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x200>
 8001748:	2308      	movs	r3, #8
 800174a:	e010      	b.n	800176e <HAL_GPIO_Init+0x222>
 800174c:	2309      	movs	r3, #9
 800174e:	e00e      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001750:	2307      	movs	r3, #7
 8001752:	e00c      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001754:	2306      	movs	r3, #6
 8001756:	e00a      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001758:	2305      	movs	r3, #5
 800175a:	e008      	b.n	800176e <HAL_GPIO_Init+0x222>
 800175c:	2304      	movs	r3, #4
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001760:	2303      	movs	r3, #3
 8001762:	e004      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x222>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x222>
 800176c:	2300      	movs	r3, #0
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	f002 0203 	and.w	r2, r2, #3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4093      	lsls	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001780:	4936      	ldr	r1, [pc, #216]	; (800185c <HAL_GPIO_Init+0x310>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_GPIO_Init+0x338>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b2:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_GPIO_Init+0x338>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_GPIO_Init+0x338>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017dc:	4a29      	ldr	r2, [pc, #164]	; (8001884 <HAL_GPIO_Init+0x338>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_GPIO_Init+0x338>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_GPIO_Init+0x338>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x338>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_GPIO_Init+0x338>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae88 	bne.w	800155c <HAL_GPIO_Init+0x10>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40023800 	.word	0x40023800
 800185c:	40013800 	.word	0x40013800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40020800 	.word	0x40020800
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40021400 	.word	0x40021400
 8001878:	40021800 	.word	0x40021800
 800187c:	40021c00 	.word	0x40021c00
 8001880:	40022000 	.word	0x40022000
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e23b      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d050      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	4b9e      	ldr	r3, [pc, #632]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b9b      	ldr	r3, [pc, #620]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b98      	ldr	r3, [pc, #608]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d036      	beq.n	8001976 <HAL_RCC_OscConfig+0xbe>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d132      	bne.n	8001976 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e216      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4b8e      	ldr	r3, [pc, #568]	; (8001b54 <HAL_RCC_OscConfig+0x29c>)
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fbef 	bl	8001108 <HAL_GetTick>
 800192a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192e:	f7ff fbeb 	bl	8001108 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e200      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001940:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x76>
 800194c:	e014      	b.n	8001978 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff fbdb 	bl	8001108 <HAL_GetTick>
 8001952:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001956:	f7ff fbd7 	bl	8001108 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ec      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x9e>
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d077      	beq.n	8001a74 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001990:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001998:	2b08      	cmp	r3, #8
 800199a:	d126      	bne.n	80019ea <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199c:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d120      	bne.n	80019ea <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a8:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e1c0      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	21f8      	movs	r1, #248	; 0xf8
 80019ce:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	69b9      	ldr	r1, [r7, #24]
 80019d2:	fa91 f1a1 	rbit	r1, r1
 80019d6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	fab1 f181 	clz	r1, r1
 80019de:	b2c9      	uxtb	r1, r1
 80019e0:	408b      	lsls	r3, r1
 80019e2:	495b      	ldr	r1, [pc, #364]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e8:	e044      	b.n	8001a74 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d02a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x2a0>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fb86 	bl	8001108 <HAL_GetTick>
 80019fc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff fb82 	bl	8001108 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e197      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	21f8      	movs	r1, #248	; 0xf8
 8001a2c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	6939      	ldr	r1, [r7, #16]
 8001a30:	fa91 f1a1 	rbit	r1, r1
 8001a34:	60f9      	str	r1, [r7, #12]
  return result;
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	fab1 f181 	clz	r1, r1
 8001a3c:	b2c9      	uxtb	r1, r1
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	4943      	ldr	r1, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e015      	b.n	8001a74 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x2a0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb5b 	bl	8001108 <HAL_GetTick>
 8001a52:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb57 	bl	8001108 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e16c      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d030      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d016      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_RCC_OscConfig+0x2a4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb3b 	bl	8001108 <HAL_GetTick>
 8001a92:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fb37 	bl	8001108 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e14c      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1de>
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_RCC_OscConfig+0x2a4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff fb24 	bl	8001108 <HAL_GetTick>
 8001ac0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fb20 	bl	8001108 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e135      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d110      	bne.n	8001b24 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_OscConfig+0x298>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_RCC_OscConfig+0x2a8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x2a8>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x2a8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d122      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_RCC_OscConfig+0x2a8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_RCC_OscConfig+0x2a8>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fade 	bl	8001108 <HAL_GetTick>
 8001b4c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	e012      	b.n	8001b76 <HAL_RCC_OscConfig+0x2be>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40023802 	.word	0x40023802
 8001b58:	42470000 	.word	0x42470000
 8001b5c:	42470e80 	.word	0x42470e80
 8001b60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7ff fad0 	bl	8001108 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0e5      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x494>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x498>)
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fab8 	bl	8001108 <HAL_GetTick>
 8001b98:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fab4 	bl	8001108 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0c7      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2e4>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff faa2 	bl	8001108 <HAL_GetTick>
 8001bc4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fa9e 	bl	8001108 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b1      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf2:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 809c 	beq.w	8001d40 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d061      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d146      	bne.n	8001caa <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCC_OscConfig+0x4a0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa71 	bl	8001108 <HAL_GetTick>
 8001c26:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fa6d 	bl	8001108 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	; 0x64
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e082      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_OscConfig+0x4a4>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	69d1      	ldr	r1, [r2, #28]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6a12      	ldr	r2, [r2, #32]
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c5e:	0192      	lsls	r2, r2, #6
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c66:	0612      	lsls	r2, r2, #24
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c6e:	0852      	lsrs	r2, r2, #1
 8001c70:	3a01      	subs	r2, #1
 8001c72:	0412      	lsls	r2, r2, #16
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x4a0>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa41 	bl	8001108 <HAL_GetTick>
 8001c86:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff fa3d 	bl	8001108 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e052      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
 8001ca8:	e04a      	b.n	8001d40 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x4a0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fa2a 	bl	8001108 <HAL_GetTick>
 8001cb4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fa26 	bl	8001108 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e03b      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x400>
 8001cd6:	e033      	b.n	8001d40 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e02e      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x49c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d121      	bne.n	8001d3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d12:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	40023870 	.word	0x40023870
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470060 	.word	0x42470060
 8001d5c:	f0bc8000 	.word	0xf0bc8000

08001d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d2      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b6b      	ldr	r3, [pc, #428]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d90c      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0be      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db4:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4950      	ldr	r1, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d040      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d115      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e085      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e079      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e071      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4939      	ldr	r1, [pc, #228]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff f95e 	bl	8001108 <HAL_GetTick>
 8001e4c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff f95a 	bl	8001108 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e059      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e03c      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4913      	ldr	r1, [pc, #76]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001ede:	f000 f82b 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eec:	22f0      	movs	r2, #240	; 0xf0
 8001eee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	fa92 f2a2 	rbit	r2, r2
 8001ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	40d3      	lsrs	r3, r2
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1cc>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1d0>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1d4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f8b6 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08004c28 	.word	0x08004c28
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b090      	sub	sp, #64	; 0x40
 8001f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	f200 80a2 	bhi.w	80020a6 <HAL_RCC_GetSysClockFreq+0x16e>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6a:	e09c      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f70:	e09c      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f76:	e099      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f78:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d027      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	2200      	movs	r2, #0
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	627a      	str	r2, [r7, #36]	; 0x24
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa4:	fb03 f201 	mul.w	r2, r3, r1
 8001fa8:	2300      	movs	r3, #0
 8001faa:	fb00 f303 	mul.w	r3, r0, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a43      	ldr	r2, [pc, #268]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb2:	fba0 2102 	umull	r2, r1, r0, r2
 8001fb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001fb8:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fbc:	4413      	add	r3, r2
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	61fa      	str	r2, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fd0:	f7fe f90a 	bl	80001e8 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fdc:	e055      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	617a      	str	r2, [r7, #20]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ff0:	f04f 0b00 	mov.w	fp, #0
 8001ff4:	4652      	mov	r2, sl
 8001ff6:	465b      	mov	r3, fp
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	0159      	lsls	r1, r3, #5
 8002002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002006:	0150      	lsls	r0, r2, #5
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ebb2 080a 	subs.w	r8, r2, sl
 8002010:	eb63 090b 	sbc.w	r9, r3, fp
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002020:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002024:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002028:	ebb2 0408 	subs.w	r4, r2, r8
 800202c:	eb63 0509 	sbc.w	r5, r3, r9
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	00eb      	lsls	r3, r5, #3
 800203a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203e:	00e2      	lsls	r2, r4, #3
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	eb14 030a 	adds.w	r3, r4, sl
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	eb45 030b 	adc.w	r3, r5, fp
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205c:	4629      	mov	r1, r5
 800205e:	028b      	lsls	r3, r1, #10
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	4604      	mov	r4, r0
 8002066:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800206a:	4601      	mov	r1, r0
 800206c:	028a      	lsls	r2, r1, #10
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	2200      	movs	r2, #0
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	60fa      	str	r2, [r7, #12]
 800207a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207e:	f7fe f8b3 	bl	80001e8 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4613      	mov	r3, r2
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	3301      	adds	r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800209a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020a4:	e002      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	017d7840 	.word	0x017d7840

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80020de:	f7ff fff1 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80020ec:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80020f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	fa92 f2a2 	rbit	r2, r2
 80020f8:	603a      	str	r2, [r7, #0]
  return result;
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	40d3      	lsrs	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	08004c38 	.word	0x08004c38

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002122:	f7ff ffcf 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 8002126:	4601      	mov	r1, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002130:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002134:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	fa92 f2a2 	rbit	r2, r2
 800213c:	603a      	str	r2, [r7, #0]
  return result;
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	40d3      	lsrs	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_RCC_GetPCLK2Freq+0x40>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	08004c38 	.word	0x08004c38

08002160 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8002180:	2b08      	cmp	r3, #8
 8002182:	d14c      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002184:	4b6d      	ldr	r3, [pc, #436]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800218a:	f7fe ffbd 	bl	8001108 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002192:	f7fe ffb9 	bl	8001108 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0c7      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80021b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	613a      	str	r2, [r7, #16]
  return result;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	fa03 f202 	lsl.w	r2, r3, r2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80021d6:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	69f9      	ldr	r1, [r7, #28]
 80021da:	fa91 f1a1 	rbit	r1, r1
 80021de:	61b9      	str	r1, [r7, #24]
  return result;
 80021e0:	69b9      	ldr	r1, [r7, #24]
 80021e2:	fab1 f181 	clz	r1, r1
 80021e6:	b2c9      	uxtb	r1, r1
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4955      	ldr	r1, [pc, #340]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021f2:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe ff86 	bl	8001108 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002200:	f7fe ff82 	bl	8001108 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e090      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002212:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8083 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a42      	ldr	r2, [pc, #264]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002254:	f7fe ff58 	bl	8001108 <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7fe ff54 	bl	8001108 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e062      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02f      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d028      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a0:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d114      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff22 	bl	8001108 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe ff1e 	bl	8001108 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e02a      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022f6:	d10d      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	e005      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800231a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	42470068 	.word	0x42470068
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000
 8002348:	42470e40 	.word	0x42470e40

0800234c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e073      	b.n	800244a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7f5b      	ldrb	r3, [r3, #29]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fcbc 	bl	8000cf0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d055      	beq.n	8002438 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	22ca      	movs	r2, #202	; 0xca
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2253      	movs	r2, #83	; 0x53
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f87d 	bl	800249c <RTC_EnterInitMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d12c      	bne.n	8002406 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023be:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f884 	bl	800250a <RTC_ExitInitMode>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d110      	bne.n	800242e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
 8002436:	e001      	b.n	800243c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f643 7257 	movw	r2, #16215	; 0x3f57
 8002466:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002468:	f7fe fe4e 	bl	8001108 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800246e:	e009      	b.n	8002484 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002470:	f7fe fe4a 	bl	8001108 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247e:	d901      	bls.n	8002484 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e007      	b.n	8002494 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ee      	beq.n	8002470 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d122      	bne.n	8002500 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fe1d 	bl	8001108 <HAL_GetTick>
 80024ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024d0:	e00c      	b.n	80024ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024d2:	f7fe fe19 	bl	8001108 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e0:	d904      	bls.n	80024ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2204      	movs	r2, #4
 80024e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <RTC_EnterInitMode+0x64>
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d1e8      	bne.n	80024d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff93 	bl	8002452 <HAL_RTC_WaitForSynchro>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2204      	movs	r2, #4
 8002536:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e041      	b.n	80025dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fbf5 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f000 fb29 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e041      	b.n	800267a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fb86 	bl	8000d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 fada 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x24>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e022      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d109      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x3e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e015      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d109      	bne.n	80026dc <HAL_TIM_PWM_Start+0x58>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e008      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07c      	b.n	80027f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0x82>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002704:	e013      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d104      	bne.n	8002716 <HAL_TIM_PWM_Start+0x92>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002714:	e00b      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Start+0xa2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002724:	e003      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fd30 	bl	800319c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <HAL_TIM_PWM_Start+0x174>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_PWM_Start+0xcc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <HAL_TIM_PWM_Start+0x178>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_TIM_PWM_Start+0xd0>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_TIM_PWM_Start+0xd2>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_TIM_PWM_Start+0x174>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d01d      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_TIM_PWM_Start+0x17c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_TIM_PWM_Start+0x180>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_TIM_PWM_Start+0x184>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_TIM_PWM_Start+0x178>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_PWM_Start+0x188>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_PWM_Start+0x136>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_TIM_PWM_Start+0x18c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d111      	bne.n	80027de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d010      	beq.n	80027ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e007      	b.n	80027ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40010400 	.word	0x40010400
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40014000 	.word	0x40014000
 8002810:	40001800 	.word	0x40001800

08002814 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e041      	b.n	80028ac <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f839 	bl	80028b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 f9c1 	bl	8002bdc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0ae      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0c      	cmp	r3, #12
 80028f2:	f200 809f 	bhi.w	8002a34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002931 	.word	0x08002931
 8002900:	08002a35 	.word	0x08002a35
 8002904:	08002a35 	.word	0x08002a35
 8002908:	08002a35 	.word	0x08002a35
 800290c:	08002971 	.word	0x08002971
 8002910:	08002a35 	.word	0x08002a35
 8002914:	08002a35 	.word	0x08002a35
 8002918:	08002a35 	.word	0x08002a35
 800291c:	080029b3 	.word	0x080029b3
 8002920:	08002a35 	.word	0x08002a35
 8002924:	08002a35 	.word	0x08002a35
 8002928:	08002a35 	.word	0x08002a35
 800292c:	080029f3 	.word	0x080029f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f9ee 	bl	8002d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0208 	orr.w	r2, r2, #8
 800294a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6999      	ldr	r1, [r3, #24]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	619a      	str	r2, [r3, #24]
      break;
 800296e:	e064      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fa3e 	bl	8002df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6999      	ldr	r1, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	021a      	lsls	r2, r3, #8
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
      break;
 80029b0:	e043      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa91 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0208 	orr.w	r2, r2, #8
 80029cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0204 	bic.w	r2, r2, #4
 80029dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69d9      	ldr	r1, [r3, #28]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	61da      	str	r2, [r3, #28]
      break;
 80029f0:	e023      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fae5 	bl	8002fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	61da      	str	r2, [r3, #28]
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	75fb      	strb	r3, [r7, #23]
      break;
 8002a38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0b4      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x186>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d03e      	beq.n	8002b20 <HAL_TIM_ConfigClockSource+0xd4>
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa6:	f200 8087 	bhi.w	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	f000 8086 	beq.w	8002bbe <HAL_TIM_ConfigClockSource+0x172>
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d87f      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b70      	cmp	r3, #112	; 0x70
 8002aba:	d01a      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0xa6>
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d87b      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b60      	cmp	r3, #96	; 0x60
 8002ac2:	d050      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d877      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b50      	cmp	r3, #80	; 0x50
 8002aca:	d03c      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0xfa>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d873      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d058      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d86f      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b30      	cmp	r3, #48	; 0x30
 8002ada:	d064      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d86b      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d060      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d867      	bhi.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d05a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8002af0:	e062      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b02:	f000 fb2c 	bl	800315e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
      break;
 8002b1e:	e04f      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b30:	f000 fb15 	bl	800315e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b42:	609a      	str	r2, [r3, #8]
      break;
 8002b44:	e03c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b52:	461a      	mov	r2, r3
 8002b54:	f000 fa8c 	bl	8003070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2150      	movs	r1, #80	; 0x50
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fae3 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002b64:	e02c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 faaa 	bl	80030cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2160      	movs	r1, #96	; 0x60
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fad3 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002b84:	e01c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 fa6c 	bl	8003070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2140      	movs	r1, #64	; 0x40
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fac3 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e00c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 faba 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002bb6:	e003      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <TIM_Base_SetConfig+0x110>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3c      	ldr	r2, [pc, #240]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <TIM_Base_SetConfig+0x110>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d027      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d023      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d017      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <TIM_Base_SetConfig+0x128>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <TIM_Base_SetConfig+0x12c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <TIM_Base_SetConfig+0x130>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <TIM_Base_SetConfig+0x134>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <TIM_Base_SetConfig+0x138>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <TIM_Base_SetConfig+0x110>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0xf8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	40001800 	.word	0x40001800
 8002d10:	40001c00 	.word	0x40001c00
 8002d14:	40002000 	.word	0x40002000

08002d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 0201 	bic.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <TIM_OC1_SetConfig+0xd8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC1_SetConfig+0x64>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <TIM_OC1_SetConfig+0xdc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10c      	bne.n	8002d96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f023 0308 	bic.w	r3, r3, #8
 8002d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <TIM_OC1_SetConfig+0xd8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_OC1_SetConfig+0x8e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <TIM_OC1_SetConfig+0xdc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40010400 	.word	0x40010400

08002df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f023 0210 	bic.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f023 0320 	bic.w	r3, r3, #32
 8002e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <TIM_OC2_SetConfig+0xe0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_OC2_SetConfig+0x68>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a20      	ldr	r2, [pc, #128]	; (8002edc <TIM_OC2_SetConfig+0xe4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10d      	bne.n	8002e7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <TIM_OC2_SetConfig+0xe0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_OC2_SetConfig+0x94>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <TIM_OC2_SetConfig+0xe4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d113      	bne.n	8002eb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <TIM_OC3_SetConfig+0xe0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_OC3_SetConfig+0x66>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <TIM_OC3_SetConfig+0xe4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10d      	bne.n	8002f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <TIM_OC3_SetConfig+0xe0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_OC3_SetConfig+0x92>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <TIM_OC3_SetConfig+0xe4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d113      	bne.n	8002f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <TIM_OC4_SetConfig+0xa0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_OC4_SetConfig+0x68>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <TIM_OC4_SetConfig+0xa4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d109      	bne.n	8003044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	019b      	lsls	r3, r3, #6
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40010000 	.word	0x40010000
 800306c:	40010400 	.word	0x40010400

08003070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 030a 	bic.w	r3, r3, #10
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f023 0210 	bic.w	r2, r3, #16
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	031b      	lsls	r3, r3, #12
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 0307 	orr.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	021a      	lsls	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	431a      	orrs	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4313      	orrs	r3, r2
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e05a      	b.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a20      	ldr	r2, [pc, #128]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d01d      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10c      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40010400 	.word	0x40010400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40001800 	.word	0x40001800

080032d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e03d      	b.n	8003370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
	...

0800337c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04d      	b.n	800342a <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d111      	bne.n	80033be <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fbd2 	bl	8003b4c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_UART_Init+0xb8>)
 80033b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fe34 	bl	8004044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	08000e65 	.word	0x08000e65

08003438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	d16d      	bne.n	8003534 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_UART_Transmit+0x2c>
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e066      	b.n	8003536 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003476:	f7fd fe47 	bl	8001108 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003490:	d108      	bne.n	80034a4 <HAL_UART_Transmit+0x6c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e003      	b.n	80034ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034ac:	e02a      	b.n	8003504 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fb7d 	bl	8003bb8 <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3302      	adds	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e007      	b.n	80034f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cf      	bne.n	80034ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb4d 	bl	8003bb8 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	4613      	mov	r3, r2
 800354a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	d112      	bne.n	800357e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_UART_Receive_IT+0x26>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e00b      	b.n	8003580 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	461a      	mov	r2, r3
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb8d 	bl	8003c94 <UART_Start_Receive_IT>
 800357a:	4603      	mov	r3, r0
 800357c:	e000      	b.n	8003580 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0ba      	sub	sp, #232	; 0xe8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fc6c 	bl	8003ec4 <UART_Receive_IT>
      return;
 80035ec:	e260      	b.n	8003ab0 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80e1 	beq.w	80037ba <HAL_UART_IRQHandler+0x232>
 80035f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80d4 	beq.w	80037ba <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
 8003642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0208 	orr.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 81f7 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fbf7 	bl	8003ec4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_UART_IRQHandler+0x17a>
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d051      	beq.n	80037a6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 faff 	bl	8003d06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d142      	bne.n	800379c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800372c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800374e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1d9      	bne.n	8003716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d013      	beq.n	8003792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_UART_IRQHandler+0x3e8>)
 8003770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fec7 	bl	800150a <HAL_DMA_Abort_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e011      	b.n	80037b6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379a:	e00c      	b.n	80037b6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e007      	b.n	80037b6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037b4:	e177      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e175      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 8151 	bne.w	8003a66 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 814a 	beq.w	8003a66 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8143 	beq.w	8003a66 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	f040 80b7 	bne.w	8003974 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8147 	beq.w	8003aaa <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003824:	429a      	cmp	r2, r3
 8003826:	f080 8140 	bcs.w	8003aaa <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003830:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	f000 8088 	beq.w	8003950 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800386c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003878:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1d9      	bne.n	8003840 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800389c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e1      	bne.n	800388c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e3      	bne.n	80038c8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	f023 0310 	bic.w	r3, r3, #16
 8003924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003932:	65ba      	str	r2, [r7, #88]	; 0x58
 8003934:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e3      	bne.n	800390e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fd6d 	bl	800142a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003962:	b292      	uxth	r2, r2
 8003964:	1a8a      	subs	r2, r1, r2
 8003966:	b292      	uxth	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800396e:	e09c      	b.n	8003aaa <HAL_UART_IRQHandler+0x522>
 8003970:	08003dcb 	.word	0x08003dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397c:	b29b      	uxth	r3, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 808f 	beq.w	8003aae <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808a 	beq.w	8003aae <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039be:	647a      	str	r2, [r7, #68]	; 0x44
 80039c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	623b      	str	r3, [r7, #32]
   return(result);
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f6:	633a      	str	r2, [r7, #48]	; 0x30
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e3      	bne.n	80039d2 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a3c:	61fa      	str	r2, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e3      	bne.n	8003a18 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003a5e:	4611      	mov	r1, r2
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a64:	e023      	b.n	8003aae <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x4fe>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9b8 	bl	8003df4 <UART_Transmit_IT>
    return;
 8003a84:	e014      	b.n	8003ab0 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x528>
 8003a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9f7 	bl	8003e92 <UART_EndTransmit_IT>
    return;
 8003aa4:	e004      	b.n	8003ab0 <HAL_UART_IRQHandler+0x528>
    return;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_UART_IRQHandler+0x528>
      return;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_IRQHandler+0x528>
      return;
 8003aae:	bf00      	nop
  }
}
 8003ab0:	37e8      	adds	r7, #232	; 0xe8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <UART_InitCallbacksToDefault+0x48>)
 8003b58:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <UART_InitCallbacksToDefault+0x4c>)
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <UART_InitCallbacksToDefault+0x50>)
 8003b64:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <UART_InitCallbacksToDefault+0x54>)
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <UART_InitCallbacksToDefault+0x58>)
 8003b70:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <UART_InitCallbacksToDefault+0x5c>)
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <UART_InitCallbacksToDefault+0x60>)
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <UART_InitCallbacksToDefault+0x64>)
 8003b82:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <UART_InitCallbacksToDefault+0x68>)
 8003b88:	66da      	str	r2, [r3, #108]	; 0x6c

}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	08003acb 	.word	0x08003acb
 8003b98:	08003ab9 	.word	0x08003ab9
 8003b9c:	08003add 	.word	0x08003add
 8003ba0:	08000b61 	.word	0x08000b61
 8003ba4:	08003aef 	.word	0x08003aef
 8003ba8:	08003b01 	.word	0x08003b01
 8003bac:	08003b13 	.word	0x08003b13
 8003bb0:	08003b25 	.word	0x08003b25
 8003bb4:	08003b37 	.word	0x08003b37

08003bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b090      	sub	sp, #64	; 0x40
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	e050      	b.n	8003c6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d04c      	beq.n	8003c6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd8:	f7fd fa96 	bl	8001108 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d241      	bcs.n	8003c6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c08:	637a      	str	r2, [r7, #52]	; 0x34
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c3c:	623a      	str	r2, [r7, #32]
 8003c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	6a3a      	ldr	r2, [r7, #32]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e00f      	b.n	8003c8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d09f      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3740      	adds	r7, #64	; 0x40
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2222      	movs	r2, #34	; 0x22
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0220 	orr.w	r2, r2, #32
 8003cf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b095      	sub	sp, #84	; 0x54
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2e:	643a      	str	r2, [r7, #64]	; 0x40
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3314      	adds	r3, #20
 8003d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d119      	bne.n	8003db2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 0310 	bic.w	r3, r3, #16
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9e:	61ba      	str	r2, [r7, #24]
 8003da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dc0:	bf00      	nop
 8003dc2:	3754      	adds	r7, #84	; 0x54
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b21      	cmp	r3, #33	; 0x21
 8003e06:	d13e      	bne.n	8003e86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d114      	bne.n	8003e3c <UART_Transmit_IT+0x48>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d110      	bne.n	8003e3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	621a      	str	r2, [r3, #32]
 8003e3a:	e008      	b.n	8003e4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	1c59      	adds	r1, r3, #1
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6211      	str	r1, [r2, #32]
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b22      	cmp	r3, #34	; 0x22
 8003ed6:	f040 80b0 	bne.w	800403a <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d117      	bne.n	8003f14 <UART_Receive_IT+0x50>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d113      	bne.n	8003f14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
 8003f12:	e026      	b.n	8003f62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	d007      	beq.n	8003f38 <UART_Receive_IT+0x74>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <UART_Receive_IT+0x82>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e008      	b.n	8003f58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d15f      	bne.n	8004036 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0220 	bic.w	r2, r2, #32
 8003f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d136      	bne.n	800402a <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	623a      	str	r2, [r7, #32]
 8003fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	69f9      	ldr	r1, [r7, #28]
 8003fe8:	6a3a      	ldr	r2, [r7, #32]
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d10a      	bne.n	800401a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004022:	4611      	mov	r1, r2
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
 8004028:	e003      	b.n	8004032 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e002      	b.n	800403c <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3730      	adds	r7, #48	; 0x30
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4313      	orrs	r3, r2
 8004078:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004084:	f023 030c 	bic.w	r3, r3, #12
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	430b      	orrs	r3, r1
 8004090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699a      	ldr	r2, [r3, #24]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <UART_SetConfig+0x1c8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <UART_SetConfig+0x78>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a56      	ldr	r2, [pc, #344]	; (8004210 <UART_SetConfig+0x1cc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe f82e 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	e002      	b.n	80040ca <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe f808 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 80040c8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d14c      	bne.n	800416e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	4a4a      	ldr	r2, [pc, #296]	; (8004214 <UART_SetConfig+0x1d0>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	0119      	lsls	r1, r3, #4
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009a      	lsls	r2, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fbb2 f2f3 	udiv	r2, r2, r3
 800410a:	4b42      	ldr	r3, [pc, #264]	; (8004214 <UART_SetConfig+0x1d0>)
 800410c:	fba3 0302 	umull	r0, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2064      	movs	r0, #100	; 0x64
 8004114:	fb00 f303 	mul.w	r3, r0, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a3d      	ldr	r2, [pc, #244]	; (8004214 <UART_SetConfig+0x1d0>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800412c:	4419      	add	r1, r3
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009a      	lsls	r2, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fbb2 f2f3 	udiv	r2, r2, r3
 8004144:	4b33      	ldr	r3, [pc, #204]	; (8004214 <UART_SetConfig+0x1d0>)
 8004146:	fba3 0302 	umull	r0, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2064      	movs	r0, #100	; 0x64
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	3332      	adds	r3, #50	; 0x32
 8004158:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <UART_SetConfig+0x1d0>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 0207 	and.w	r2, r3, #7
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	440a      	add	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800416c:	e04a      	b.n	8004204 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009a      	lsls	r2, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <UART_SetConfig+0x1d0>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	0119      	lsls	r1, r3, #4
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <UART_SetConfig+0x1d0>)
 80041a6:	fba3 0302 	umull	r0, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2064      	movs	r0, #100	; 0x64
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	3332      	adds	r3, #50	; 0x32
 80041b8:	4a16      	ldr	r2, [pc, #88]	; (8004214 <UART_SetConfig+0x1d0>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c4:	4419      	add	r1, r3
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <UART_SetConfig+0x1d0>)
 80041de:	fba3 0302 	umull	r0, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	fb00 f303 	mul.w	r3, r0, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	3332      	adds	r3, #50	; 0x32
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <UART_SetConfig+0x1d0>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	440a      	add	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40011000 	.word	0x40011000
 8004210:	40011400 	.word	0x40011400
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <sniprintf>:
 8004218:	b40c      	push	{r2, r3}
 800421a:	b530      	push	{r4, r5, lr}
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <sniprintf+0x64>)
 800421e:	1e0c      	subs	r4, r1, #0
 8004220:	681d      	ldr	r5, [r3, #0]
 8004222:	b09d      	sub	sp, #116	; 0x74
 8004224:	da08      	bge.n	8004238 <sniprintf+0x20>
 8004226:	238b      	movs	r3, #139	; 0x8b
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	b01d      	add	sp, #116	; 0x74
 8004230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004234:	b002      	add	sp, #8
 8004236:	4770      	bx	lr
 8004238:	f44f 7302 	mov.w	r3, #520	; 0x208
 800423c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004240:	bf0c      	ite	eq
 8004242:	4623      	moveq	r3, r4
 8004244:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004248:	9304      	str	r3, [sp, #16]
 800424a:	9307      	str	r3, [sp, #28]
 800424c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004250:	9002      	str	r0, [sp, #8]
 8004252:	9006      	str	r0, [sp, #24]
 8004254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004258:	4628      	mov	r0, r5
 800425a:	ab21      	add	r3, sp, #132	; 0x84
 800425c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800425e:	a902      	add	r1, sp, #8
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f000 f997 	bl	8004594 <_svfiprintf_r>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	bfbc      	itt	lt
 800426a:	238b      	movlt	r3, #139	; 0x8b
 800426c:	602b      	strlt	r3, [r5, #0]
 800426e:	2c00      	cmp	r4, #0
 8004270:	d0dd      	beq.n	800422e <sniprintf+0x16>
 8004272:	2200      	movs	r2, #0
 8004274:	9b02      	ldr	r3, [sp, #8]
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e7d9      	b.n	800422e <sniprintf+0x16>
 800427a:	bf00      	nop
 800427c:	20000058 	.word	0x20000058

08004280 <memset>:
 8004280:	4603      	mov	r3, r0
 8004282:	4402      	add	r2, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <__errno>:
 8004290:	4b01      	ldr	r3, [pc, #4]	; (8004298 <__errno+0x8>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000058 	.word	0x20000058

0800429c <__libc_init_array>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	2600      	movs	r6, #0
 80042a0:	4d0c      	ldr	r5, [pc, #48]	; (80042d4 <__libc_init_array+0x38>)
 80042a2:	4c0d      	ldr	r4, [pc, #52]	; (80042d8 <__libc_init_array+0x3c>)
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	42a6      	cmp	r6, r4
 80042aa:	d109      	bne.n	80042c0 <__libc_init_array+0x24>
 80042ac:	f000 fc82 	bl	8004bb4 <_init>
 80042b0:	2600      	movs	r6, #0
 80042b2:	4d0a      	ldr	r5, [pc, #40]	; (80042dc <__libc_init_array+0x40>)
 80042b4:	4c0a      	ldr	r4, [pc, #40]	; (80042e0 <__libc_init_array+0x44>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	42a6      	cmp	r6, r4
 80042bc:	d105      	bne.n	80042ca <__libc_init_array+0x2e>
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c4:	4798      	blx	r3
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7ee      	b.n	80042a8 <__libc_init_array+0xc>
 80042ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ce:	4798      	blx	r3
 80042d0:	3601      	adds	r6, #1
 80042d2:	e7f2      	b.n	80042ba <__libc_init_array+0x1e>
 80042d4:	08004c7c 	.word	0x08004c7c
 80042d8:	08004c7c 	.word	0x08004c7c
 80042dc:	08004c7c 	.word	0x08004c7c
 80042e0:	08004c80 	.word	0x08004c80

080042e4 <__retarget_lock_acquire_recursive>:
 80042e4:	4770      	bx	lr

080042e6 <__retarget_lock_release_recursive>:
 80042e6:	4770      	bx	lr

080042e8 <strcpy>:
 80042e8:	4603      	mov	r3, r0
 80042ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ee:	f803 2b01 	strb.w	r2, [r3], #1
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d1f9      	bne.n	80042ea <strcpy+0x2>
 80042f6:	4770      	bx	lr

080042f8 <_free_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d040      	beq.n	8004382 <_free_r+0x8a>
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f0c      	subs	r4, r1, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	18e4      	addlt	r4, r4, r3
 800430c:	f000 f8dc 	bl	80044c8 <__malloc_lock>
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <_free_r+0x8c>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	b933      	cbnz	r3, 8004324 <_free_r+0x2c>
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6014      	str	r4, [r2, #0]
 800431a:	4628      	mov	r0, r5
 800431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004320:	f000 b8d8 	b.w	80044d4 <__malloc_unlock>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d908      	bls.n	800433a <_free_r+0x42>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	1821      	adds	r1, r4, r0
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	e7ed      	b.n	8004316 <_free_r+0x1e>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x4c>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x42>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1850      	adds	r0, r2, r1
 8004348:	42a0      	cmp	r0, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x6c>
 800434c:	6820      	ldr	r0, [r4, #0]
 800434e:	4401      	add	r1, r0
 8004350:	1850      	adds	r0, r2, r1
 8004352:	4283      	cmp	r3, r0
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1e0      	bne.n	800431a <_free_r+0x22>
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4408      	add	r0, r1
 800435e:	6010      	str	r0, [r2, #0]
 8004360:	6053      	str	r3, [r2, #4]
 8004362:	e7da      	b.n	800431a <_free_r+0x22>
 8004364:	d902      	bls.n	800436c <_free_r+0x74>
 8004366:	230c      	movs	r3, #12
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	e7d6      	b.n	800431a <_free_r+0x22>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6063      	str	r3, [r4, #4]
 800437e:	6054      	str	r4, [r2, #4]
 8004380:	e7cb      	b.n	800431a <_free_r+0x22>
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	20000334 	.word	0x20000334

08004388 <sbrk_aligned>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0e      	ldr	r6, [pc, #56]	; (80043c4 <sbrk_aligned+0x3c>)
 800438c:	460c      	mov	r4, r1
 800438e:	6831      	ldr	r1, [r6, #0]
 8004390:	4605      	mov	r5, r0
 8004392:	b911      	cbnz	r1, 800439a <sbrk_aligned+0x12>
 8004394:	f000 fbaa 	bl	8004aec <_sbrk_r>
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fba5 	bl	8004aec <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d00a      	beq.n	80043bc <sbrk_aligned+0x34>
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	f024 0403 	bic.w	r4, r4, #3
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d007      	beq.n	80043c0 <sbrk_aligned+0x38>
 80043b0:	1a21      	subs	r1, r4, r0
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 fb9a 	bl	8004aec <_sbrk_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d101      	bne.n	80043c0 <sbrk_aligned+0x38>
 80043bc:	f04f 34ff 	mov.w	r4, #4294967295
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	20000338 	.word	0x20000338

080043c8 <_malloc_r>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	1ccd      	adds	r5, r1, #3
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	2d00      	cmp	r5, #0
 80043dc:	4607      	mov	r7, r0
 80043de:	db01      	blt.n	80043e4 <_malloc_r+0x1c>
 80043e0:	42a9      	cmp	r1, r5
 80043e2:	d905      	bls.n	80043f0 <_malloc_r+0x28>
 80043e4:	230c      	movs	r3, #12
 80043e6:	2600      	movs	r6, #0
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	4630      	mov	r0, r6
 80043ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044c4 <_malloc_r+0xfc>
 80043f4:	f000 f868 	bl	80044c8 <__malloc_lock>
 80043f8:	f8d8 3000 	ldr.w	r3, [r8]
 80043fc:	461c      	mov	r4, r3
 80043fe:	bb5c      	cbnz	r4, 8004458 <_malloc_r+0x90>
 8004400:	4629      	mov	r1, r5
 8004402:	4638      	mov	r0, r7
 8004404:	f7ff ffc0 	bl	8004388 <sbrk_aligned>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	4604      	mov	r4, r0
 800440c:	d155      	bne.n	80044ba <_malloc_r+0xf2>
 800440e:	f8d8 4000 	ldr.w	r4, [r8]
 8004412:	4626      	mov	r6, r4
 8004414:	2e00      	cmp	r6, #0
 8004416:	d145      	bne.n	80044a4 <_malloc_r+0xdc>
 8004418:	2c00      	cmp	r4, #0
 800441a:	d048      	beq.n	80044ae <_malloc_r+0xe6>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	4631      	mov	r1, r6
 8004420:	4638      	mov	r0, r7
 8004422:	eb04 0903 	add.w	r9, r4, r3
 8004426:	f000 fb61 	bl	8004aec <_sbrk_r>
 800442a:	4581      	cmp	r9, r0
 800442c:	d13f      	bne.n	80044ae <_malloc_r+0xe6>
 800442e:	6821      	ldr	r1, [r4, #0]
 8004430:	4638      	mov	r0, r7
 8004432:	1a6d      	subs	r5, r5, r1
 8004434:	4629      	mov	r1, r5
 8004436:	f7ff ffa7 	bl	8004388 <sbrk_aligned>
 800443a:	3001      	adds	r0, #1
 800443c:	d037      	beq.n	80044ae <_malloc_r+0xe6>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	442b      	add	r3, r5
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	f8d8 3000 	ldr.w	r3, [r8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d038      	beq.n	80044be <_malloc_r+0xf6>
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	42a2      	cmp	r2, r4
 8004450:	d12b      	bne.n	80044aa <_malloc_r+0xe2>
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	e00f      	b.n	8004478 <_malloc_r+0xb0>
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	1b52      	subs	r2, r2, r5
 800445c:	d41f      	bmi.n	800449e <_malloc_r+0xd6>
 800445e:	2a0b      	cmp	r2, #11
 8004460:	d917      	bls.n	8004492 <_malloc_r+0xca>
 8004462:	1961      	adds	r1, r4, r5
 8004464:	42a3      	cmp	r3, r4
 8004466:	6025      	str	r5, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	6059      	strne	r1, [r3, #4]
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	bf08      	it	eq
 8004470:	f8c8 1000 	streq.w	r1, [r8]
 8004474:	5162      	str	r2, [r4, r5]
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	4638      	mov	r0, r7
 800447a:	f104 060b 	add.w	r6, r4, #11
 800447e:	f000 f829 	bl	80044d4 <__malloc_unlock>
 8004482:	f026 0607 	bic.w	r6, r6, #7
 8004486:	1d23      	adds	r3, r4, #4
 8004488:	1af2      	subs	r2, r6, r3
 800448a:	d0ae      	beq.n	80043ea <_malloc_r+0x22>
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	50a3      	str	r3, [r4, r2]
 8004490:	e7ab      	b.n	80043ea <_malloc_r+0x22>
 8004492:	42a3      	cmp	r3, r4
 8004494:	6862      	ldr	r2, [r4, #4]
 8004496:	d1dd      	bne.n	8004454 <_malloc_r+0x8c>
 8004498:	f8c8 2000 	str.w	r2, [r8]
 800449c:	e7ec      	b.n	8004478 <_malloc_r+0xb0>
 800449e:	4623      	mov	r3, r4
 80044a0:	6864      	ldr	r4, [r4, #4]
 80044a2:	e7ac      	b.n	80043fe <_malloc_r+0x36>
 80044a4:	4634      	mov	r4, r6
 80044a6:	6876      	ldr	r6, [r6, #4]
 80044a8:	e7b4      	b.n	8004414 <_malloc_r+0x4c>
 80044aa:	4613      	mov	r3, r2
 80044ac:	e7cc      	b.n	8004448 <_malloc_r+0x80>
 80044ae:	230c      	movs	r3, #12
 80044b0:	4638      	mov	r0, r7
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	f000 f80e 	bl	80044d4 <__malloc_unlock>
 80044b8:	e797      	b.n	80043ea <_malloc_r+0x22>
 80044ba:	6025      	str	r5, [r4, #0]
 80044bc:	e7dc      	b.n	8004478 <_malloc_r+0xb0>
 80044be:	605b      	str	r3, [r3, #4]
 80044c0:	deff      	udf	#255	; 0xff
 80044c2:	bf00      	nop
 80044c4:	20000334 	.word	0x20000334

080044c8 <__malloc_lock>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__malloc_lock+0x8>)
 80044ca:	f7ff bf0b 	b.w	80042e4 <__retarget_lock_acquire_recursive>
 80044ce:	bf00      	nop
 80044d0:	20000330 	.word	0x20000330

080044d4 <__malloc_unlock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__malloc_unlock+0x8>)
 80044d6:	f7ff bf06 	b.w	80042e6 <__retarget_lock_release_recursive>
 80044da:	bf00      	nop
 80044dc:	20000330 	.word	0x20000330

080044e0 <__ssputs_r>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	461f      	mov	r7, r3
 80044e6:	688e      	ldr	r6, [r1, #8]
 80044e8:	4682      	mov	sl, r0
 80044ea:	42be      	cmp	r6, r7
 80044ec:	460c      	mov	r4, r1
 80044ee:	4690      	mov	r8, r2
 80044f0:	680b      	ldr	r3, [r1, #0]
 80044f2:	d82c      	bhi.n	800454e <__ssputs_r+0x6e>
 80044f4:	898a      	ldrh	r2, [r1, #12]
 80044f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044fa:	d026      	beq.n	800454a <__ssputs_r+0x6a>
 80044fc:	6965      	ldr	r5, [r4, #20]
 80044fe:	6909      	ldr	r1, [r1, #16]
 8004500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004504:	eba3 0901 	sub.w	r9, r3, r1
 8004508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800450c:	1c7b      	adds	r3, r7, #1
 800450e:	444b      	add	r3, r9
 8004510:	106d      	asrs	r5, r5, #1
 8004512:	429d      	cmp	r5, r3
 8004514:	bf38      	it	cc
 8004516:	461d      	movcc	r5, r3
 8004518:	0553      	lsls	r3, r2, #21
 800451a:	d527      	bpl.n	800456c <__ssputs_r+0x8c>
 800451c:	4629      	mov	r1, r5
 800451e:	f7ff ff53 	bl	80043c8 <_malloc_r>
 8004522:	4606      	mov	r6, r0
 8004524:	b360      	cbz	r0, 8004580 <__ssputs_r+0xa0>
 8004526:	464a      	mov	r2, r9
 8004528:	6921      	ldr	r1, [r4, #16]
 800452a:	f000 fafd 	bl	8004b28 <memcpy>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	6126      	str	r6, [r4, #16]
 800453c:	444e      	add	r6, r9
 800453e:	6026      	str	r6, [r4, #0]
 8004540:	463e      	mov	r6, r7
 8004542:	6165      	str	r5, [r4, #20]
 8004544:	eba5 0509 	sub.w	r5, r5, r9
 8004548:	60a5      	str	r5, [r4, #8]
 800454a:	42be      	cmp	r6, r7
 800454c:	d900      	bls.n	8004550 <__ssputs_r+0x70>
 800454e:	463e      	mov	r6, r7
 8004550:	4632      	mov	r2, r6
 8004552:	4641      	mov	r1, r8
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f000 faaf 	bl	8004ab8 <memmove>
 800455a:	2000      	movs	r0, #0
 800455c:	68a3      	ldr	r3, [r4, #8]
 800455e:	1b9b      	subs	r3, r3, r6
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	4433      	add	r3, r6
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	462a      	mov	r2, r5
 800456e:	f000 fae9 	bl	8004b44 <_realloc_r>
 8004572:	4606      	mov	r6, r0
 8004574:	2800      	cmp	r0, #0
 8004576:	d1e0      	bne.n	800453a <__ssputs_r+0x5a>
 8004578:	4650      	mov	r0, sl
 800457a:	6921      	ldr	r1, [r4, #16]
 800457c:	f7ff febc 	bl	80042f8 <_free_r>
 8004580:	230c      	movs	r3, #12
 8004582:	f8ca 3000 	str.w	r3, [sl]
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	e7e9      	b.n	8004568 <__ssputs_r+0x88>

08004594 <_svfiprintf_r>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	4698      	mov	r8, r3
 800459a:	898b      	ldrh	r3, [r1, #12]
 800459c:	4607      	mov	r7, r0
 800459e:	061b      	lsls	r3, r3, #24
 80045a0:	460d      	mov	r5, r1
 80045a2:	4614      	mov	r4, r2
 80045a4:	b09d      	sub	sp, #116	; 0x74
 80045a6:	d50e      	bpl.n	80045c6 <_svfiprintf_r+0x32>
 80045a8:	690b      	ldr	r3, [r1, #16]
 80045aa:	b963      	cbnz	r3, 80045c6 <_svfiprintf_r+0x32>
 80045ac:	2140      	movs	r1, #64	; 0x40
 80045ae:	f7ff ff0b 	bl	80043c8 <_malloc_r>
 80045b2:	6028      	str	r0, [r5, #0]
 80045b4:	6128      	str	r0, [r5, #16]
 80045b6:	b920      	cbnz	r0, 80045c2 <_svfiprintf_r+0x2e>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e0d0      	b.n	8004764 <_svfiprintf_r+0x1d0>
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	616b      	str	r3, [r5, #20]
 80045c6:	2300      	movs	r3, #0
 80045c8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ca:	2320      	movs	r3, #32
 80045cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d0:	2330      	movs	r3, #48	; 0x30
 80045d2:	f04f 0901 	mov.w	r9, #1
 80045d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800477c <_svfiprintf_r+0x1e8>
 80045de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e2:	4623      	mov	r3, r4
 80045e4:	469a      	mov	sl, r3
 80045e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ea:	b10a      	cbz	r2, 80045f0 <_svfiprintf_r+0x5c>
 80045ec:	2a25      	cmp	r2, #37	; 0x25
 80045ee:	d1f9      	bne.n	80045e4 <_svfiprintf_r+0x50>
 80045f0:	ebba 0b04 	subs.w	fp, sl, r4
 80045f4:	d00b      	beq.n	800460e <_svfiprintf_r+0x7a>
 80045f6:	465b      	mov	r3, fp
 80045f8:	4622      	mov	r2, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff ff6f 	bl	80044e0 <__ssputs_r>
 8004602:	3001      	adds	r0, #1
 8004604:	f000 80a9 	beq.w	800475a <_svfiprintf_r+0x1c6>
 8004608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800460a:	445a      	add	r2, fp
 800460c:	9209      	str	r2, [sp, #36]	; 0x24
 800460e:	f89a 3000 	ldrb.w	r3, [sl]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80a1 	beq.w	800475a <_svfiprintf_r+0x1c6>
 8004618:	2300      	movs	r3, #0
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004622:	f10a 0a01 	add.w	sl, sl, #1
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	9307      	str	r3, [sp, #28]
 800462a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800462e:	931a      	str	r3, [sp, #104]	; 0x68
 8004630:	4654      	mov	r4, sl
 8004632:	2205      	movs	r2, #5
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	4850      	ldr	r0, [pc, #320]	; (800477c <_svfiprintf_r+0x1e8>)
 800463a:	f000 fa67 	bl	8004b0c <memchr>
 800463e:	9a04      	ldr	r2, [sp, #16]
 8004640:	b9d8      	cbnz	r0, 800467a <_svfiprintf_r+0xe6>
 8004642:	06d0      	lsls	r0, r2, #27
 8004644:	bf44      	itt	mi
 8004646:	2320      	movmi	r3, #32
 8004648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800464c:	0711      	lsls	r1, r2, #28
 800464e:	bf44      	itt	mi
 8004650:	232b      	movmi	r3, #43	; 0x2b
 8004652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004656:	f89a 3000 	ldrb.w	r3, [sl]
 800465a:	2b2a      	cmp	r3, #42	; 0x2a
 800465c:	d015      	beq.n	800468a <_svfiprintf_r+0xf6>
 800465e:	4654      	mov	r4, sl
 8004660:	2000      	movs	r0, #0
 8004662:	f04f 0c0a 	mov.w	ip, #10
 8004666:	9a07      	ldr	r2, [sp, #28]
 8004668:	4621      	mov	r1, r4
 800466a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800466e:	3b30      	subs	r3, #48	; 0x30
 8004670:	2b09      	cmp	r3, #9
 8004672:	d94d      	bls.n	8004710 <_svfiprintf_r+0x17c>
 8004674:	b1b0      	cbz	r0, 80046a4 <_svfiprintf_r+0x110>
 8004676:	9207      	str	r2, [sp, #28]
 8004678:	e014      	b.n	80046a4 <_svfiprintf_r+0x110>
 800467a:	eba0 0308 	sub.w	r3, r0, r8
 800467e:	fa09 f303 	lsl.w	r3, r9, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	46a2      	mov	sl, r4
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	e7d2      	b.n	8004630 <_svfiprintf_r+0x9c>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	1d19      	adds	r1, r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	9103      	str	r1, [sp, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfbb      	ittet	lt
 8004696:	425b      	neglt	r3, r3
 8004698:	f042 0202 	orrlt.w	r2, r2, #2
 800469c:	9307      	strge	r3, [sp, #28]
 800469e:	9307      	strlt	r3, [sp, #28]
 80046a0:	bfb8      	it	lt
 80046a2:	9204      	strlt	r2, [sp, #16]
 80046a4:	7823      	ldrb	r3, [r4, #0]
 80046a6:	2b2e      	cmp	r3, #46	; 0x2e
 80046a8:	d10c      	bne.n	80046c4 <_svfiprintf_r+0x130>
 80046aa:	7863      	ldrb	r3, [r4, #1]
 80046ac:	2b2a      	cmp	r3, #42	; 0x2a
 80046ae:	d134      	bne.n	800471a <_svfiprintf_r+0x186>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	3402      	adds	r4, #2
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	9203      	str	r2, [sp, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bfb8      	it	lt
 80046be:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004780 <_svfiprintf_r+0x1ec>
 80046c8:	2203      	movs	r2, #3
 80046ca:	4650      	mov	r0, sl
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	f000 fa1d 	bl	8004b0c <memchr>
 80046d2:	b138      	cbz	r0, 80046e4 <_svfiprintf_r+0x150>
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	9b04      	ldr	r3, [sp, #16]
 80046d8:	eba0 000a 	sub.w	r0, r0, sl
 80046dc:	4082      	lsls	r2, r0
 80046de:	4313      	orrs	r3, r2
 80046e0:	3401      	adds	r4, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e8:	2206      	movs	r2, #6
 80046ea:	4826      	ldr	r0, [pc, #152]	; (8004784 <_svfiprintf_r+0x1f0>)
 80046ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f0:	f000 fa0c 	bl	8004b0c <memchr>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d038      	beq.n	800476a <_svfiprintf_r+0x1d6>
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <_svfiprintf_r+0x1f4>)
 80046fa:	bb1b      	cbnz	r3, 8004744 <_svfiprintf_r+0x1b0>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	3308      	adds	r3, #8
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470a:	4433      	add	r3, r6
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	e768      	b.n	80045e2 <_svfiprintf_r+0x4e>
 8004710:	460c      	mov	r4, r1
 8004712:	2001      	movs	r0, #1
 8004714:	fb0c 3202 	mla	r2, ip, r2, r3
 8004718:	e7a6      	b.n	8004668 <_svfiprintf_r+0xd4>
 800471a:	2300      	movs	r3, #0
 800471c:	f04f 0c0a 	mov.w	ip, #10
 8004720:	4619      	mov	r1, r3
 8004722:	3401      	adds	r4, #1
 8004724:	9305      	str	r3, [sp, #20]
 8004726:	4620      	mov	r0, r4
 8004728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472c:	3a30      	subs	r2, #48	; 0x30
 800472e:	2a09      	cmp	r2, #9
 8004730:	d903      	bls.n	800473a <_svfiprintf_r+0x1a6>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c6      	beq.n	80046c4 <_svfiprintf_r+0x130>
 8004736:	9105      	str	r1, [sp, #20]
 8004738:	e7c4      	b.n	80046c4 <_svfiprintf_r+0x130>
 800473a:	4604      	mov	r4, r0
 800473c:	2301      	movs	r3, #1
 800473e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004742:	e7f0      	b.n	8004726 <_svfiprintf_r+0x192>
 8004744:	ab03      	add	r3, sp, #12
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	462a      	mov	r2, r5
 800474a:	4638      	mov	r0, r7
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <_svfiprintf_r+0x1f8>)
 800474e:	a904      	add	r1, sp, #16
 8004750:	f3af 8000 	nop.w
 8004754:	1c42      	adds	r2, r0, #1
 8004756:	4606      	mov	r6, r0
 8004758:	d1d6      	bne.n	8004708 <_svfiprintf_r+0x174>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	065b      	lsls	r3, r3, #25
 800475e:	f53f af2d 	bmi.w	80045bc <_svfiprintf_r+0x28>
 8004762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004764:	b01d      	add	sp, #116	; 0x74
 8004766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476a:	ab03      	add	r3, sp, #12
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	462a      	mov	r2, r5
 8004770:	4638      	mov	r0, r7
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <_svfiprintf_r+0x1f8>)
 8004774:	a904      	add	r1, sp, #16
 8004776:	f000 f87d 	bl	8004874 <_printf_i>
 800477a:	e7eb      	b.n	8004754 <_svfiprintf_r+0x1c0>
 800477c:	08004c40 	.word	0x08004c40
 8004780:	08004c46 	.word	0x08004c46
 8004784:	08004c4a 	.word	0x08004c4a
 8004788:	00000000 	.word	0x00000000
 800478c:	080044e1 	.word	0x080044e1

08004790 <_printf_common>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	4699      	mov	r9, r3
 8004798:	688a      	ldr	r2, [r1, #8]
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	4607      	mov	r7, r0
 800479e:	4293      	cmp	r3, r2
 80047a0:	bfb8      	it	lt
 80047a2:	4613      	movlt	r3, r2
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047aa:	460c      	mov	r4, r1
 80047ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b0:	b10a      	cbz	r2, 80047b6 <_printf_common+0x26>
 80047b2:	3301      	adds	r3, #1
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	0699      	lsls	r1, r3, #26
 80047ba:	bf42      	ittt	mi
 80047bc:	6833      	ldrmi	r3, [r6, #0]
 80047be:	3302      	addmi	r3, #2
 80047c0:	6033      	strmi	r3, [r6, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	f015 0506 	ands.w	r5, r5, #6
 80047c8:	d106      	bne.n	80047d8 <_printf_common+0x48>
 80047ca:	f104 0a19 	add.w	sl, r4, #25
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	6832      	ldr	r2, [r6, #0]
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dc2b      	bgt.n	8004830 <_printf_common+0xa0>
 80047d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047dc:	1e13      	subs	r3, r2, #0
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	bf18      	it	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	0692      	lsls	r2, r2, #26
 80047e6:	d430      	bmi.n	800484a <_printf_common+0xba>
 80047e8:	4649      	mov	r1, r9
 80047ea:	4638      	mov	r0, r7
 80047ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f0:	47c0      	blx	r8
 80047f2:	3001      	adds	r0, #1
 80047f4:	d023      	beq.n	800483e <_printf_common+0xae>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf14      	ite	ne
 8004802:	2500      	movne	r5, #0
 8004804:	6833      	ldreq	r3, [r6, #0]
 8004806:	f04f 0600 	mov.w	r6, #0
 800480a:	bf08      	it	eq
 800480c:	68e5      	ldreq	r5, [r4, #12]
 800480e:	f104 041a 	add.w	r4, r4, #26
 8004812:	bf08      	it	eq
 8004814:	1aed      	subeq	r5, r5, r3
 8004816:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800481a:	bf08      	it	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	4293      	cmp	r3, r2
 8004822:	bfc4      	itt	gt
 8004824:	1a9b      	subgt	r3, r3, r2
 8004826:	18ed      	addgt	r5, r5, r3
 8004828:	42b5      	cmp	r5, r6
 800482a:	d11a      	bne.n	8004862 <_printf_common+0xd2>
 800482c:	2000      	movs	r0, #0
 800482e:	e008      	b.n	8004842 <_printf_common+0xb2>
 8004830:	2301      	movs	r3, #1
 8004832:	4652      	mov	r2, sl
 8004834:	4649      	mov	r1, r9
 8004836:	4638      	mov	r0, r7
 8004838:	47c0      	blx	r8
 800483a:	3001      	adds	r0, #1
 800483c:	d103      	bne.n	8004846 <_printf_common+0xb6>
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	3501      	adds	r5, #1
 8004848:	e7c1      	b.n	80047ce <_printf_common+0x3e>
 800484a:	2030      	movs	r0, #48	; 0x30
 800484c:	18e1      	adds	r1, r4, r3
 800484e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004858:	4422      	add	r2, r4
 800485a:	3302      	adds	r3, #2
 800485c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004860:	e7c2      	b.n	80047e8 <_printf_common+0x58>
 8004862:	2301      	movs	r3, #1
 8004864:	4622      	mov	r2, r4
 8004866:	4649      	mov	r1, r9
 8004868:	4638      	mov	r0, r7
 800486a:	47c0      	blx	r8
 800486c:	3001      	adds	r0, #1
 800486e:	d0e6      	beq.n	800483e <_printf_common+0xae>
 8004870:	3601      	adds	r6, #1
 8004872:	e7d9      	b.n	8004828 <_printf_common+0x98>

08004874 <_printf_i>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	7e0f      	ldrb	r7, [r1, #24]
 800487a:	4691      	mov	r9, r2
 800487c:	2f78      	cmp	r7, #120	; 0x78
 800487e:	4680      	mov	r8, r0
 8004880:	460c      	mov	r4, r1
 8004882:	469a      	mov	sl, r3
 8004884:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800488a:	d807      	bhi.n	800489c <_printf_i+0x28>
 800488c:	2f62      	cmp	r7, #98	; 0x62
 800488e:	d80a      	bhi.n	80048a6 <_printf_i+0x32>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f000 80d5 	beq.w	8004a40 <_printf_i+0x1cc>
 8004896:	2f58      	cmp	r7, #88	; 0x58
 8004898:	f000 80c1 	beq.w	8004a1e <_printf_i+0x1aa>
 800489c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a4:	e03a      	b.n	800491c <_printf_i+0xa8>
 80048a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048aa:	2b15      	cmp	r3, #21
 80048ac:	d8f6      	bhi.n	800489c <_printf_i+0x28>
 80048ae:	a101      	add	r1, pc, #4	; (adr r1, 80048b4 <_printf_i+0x40>)
 80048b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	08004921 	.word	0x08004921
 80048bc:	0800489d 	.word	0x0800489d
 80048c0:	0800489d 	.word	0x0800489d
 80048c4:	0800489d 	.word	0x0800489d
 80048c8:	0800489d 	.word	0x0800489d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800489d 	.word	0x0800489d
 80048d4:	0800489d 	.word	0x0800489d
 80048d8:	0800489d 	.word	0x0800489d
 80048dc:	0800489d 	.word	0x0800489d
 80048e0:	08004a27 	.word	0x08004a27
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	080049e1 	.word	0x080049e1
 80048ec:	0800489d 	.word	0x0800489d
 80048f0:	0800489d 	.word	0x0800489d
 80048f4:	08004a49 	.word	0x08004a49
 80048f8:	0800489d 	.word	0x0800489d
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800489d 	.word	0x0800489d
 8004904:	0800489d 	.word	0x0800489d
 8004908:	080049e9 	.word	0x080049e9
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	602a      	str	r2, [r5, #0]
 8004914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800491c:	2301      	movs	r3, #1
 800491e:	e0a0      	b.n	8004a62 <_printf_i+0x1ee>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	0607      	lsls	r7, r0, #24
 8004926:	f103 0104 	add.w	r1, r3, #4
 800492a:	6029      	str	r1, [r5, #0]
 800492c:	d501      	bpl.n	8004932 <_printf_i+0xbe>
 800492e:	681e      	ldr	r6, [r3, #0]
 8004930:	e003      	b.n	800493a <_printf_i+0xc6>
 8004932:	0646      	lsls	r6, r0, #25
 8004934:	d5fb      	bpl.n	800492e <_printf_i+0xba>
 8004936:	f9b3 6000 	ldrsh.w	r6, [r3]
 800493a:	2e00      	cmp	r6, #0
 800493c:	da03      	bge.n	8004946 <_printf_i+0xd2>
 800493e:	232d      	movs	r3, #45	; 0x2d
 8004940:	4276      	negs	r6, r6
 8004942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004946:	230a      	movs	r3, #10
 8004948:	4859      	ldr	r0, [pc, #356]	; (8004ab0 <_printf_i+0x23c>)
 800494a:	e012      	b.n	8004972 <_printf_i+0xfe>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	1d19      	adds	r1, r3, #4
 8004952:	6029      	str	r1, [r5, #0]
 8004954:	0605      	lsls	r5, r0, #24
 8004956:	d501      	bpl.n	800495c <_printf_i+0xe8>
 8004958:	681e      	ldr	r6, [r3, #0]
 800495a:	e002      	b.n	8004962 <_printf_i+0xee>
 800495c:	0641      	lsls	r1, r0, #25
 800495e:	d5fb      	bpl.n	8004958 <_printf_i+0xe4>
 8004960:	881e      	ldrh	r6, [r3, #0]
 8004962:	2f6f      	cmp	r7, #111	; 0x6f
 8004964:	bf0c      	ite	eq
 8004966:	2308      	moveq	r3, #8
 8004968:	230a      	movne	r3, #10
 800496a:	4851      	ldr	r0, [pc, #324]	; (8004ab0 <_printf_i+0x23c>)
 800496c:	2100      	movs	r1, #0
 800496e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004972:	6865      	ldr	r5, [r4, #4]
 8004974:	2d00      	cmp	r5, #0
 8004976:	bfa8      	it	ge
 8004978:	6821      	ldrge	r1, [r4, #0]
 800497a:	60a5      	str	r5, [r4, #8]
 800497c:	bfa4      	itt	ge
 800497e:	f021 0104 	bicge.w	r1, r1, #4
 8004982:	6021      	strge	r1, [r4, #0]
 8004984:	b90e      	cbnz	r6, 800498a <_printf_i+0x116>
 8004986:	2d00      	cmp	r5, #0
 8004988:	d04b      	beq.n	8004a22 <_printf_i+0x1ae>
 800498a:	4615      	mov	r5, r2
 800498c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004990:	fb03 6711 	mls	r7, r3, r1, r6
 8004994:	5dc7      	ldrb	r7, [r0, r7]
 8004996:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800499a:	4637      	mov	r7, r6
 800499c:	42bb      	cmp	r3, r7
 800499e:	460e      	mov	r6, r1
 80049a0:	d9f4      	bls.n	800498c <_printf_i+0x118>
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d10b      	bne.n	80049be <_printf_i+0x14a>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	07de      	lsls	r6, r3, #31
 80049aa:	d508      	bpl.n	80049be <_printf_i+0x14a>
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	6861      	ldr	r1, [r4, #4]
 80049b0:	4299      	cmp	r1, r3
 80049b2:	bfde      	ittt	le
 80049b4:	2330      	movle	r3, #48	; 0x30
 80049b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049be:	1b52      	subs	r2, r2, r5
 80049c0:	6122      	str	r2, [r4, #16]
 80049c2:	464b      	mov	r3, r9
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f8cd a000 	str.w	sl, [sp]
 80049cc:	aa03      	add	r2, sp, #12
 80049ce:	f7ff fedf 	bl	8004790 <_printf_common>
 80049d2:	3001      	adds	r0, #1
 80049d4:	d14a      	bne.n	8004a6c <_printf_i+0x1f8>
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	b004      	add	sp, #16
 80049dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	f043 0320 	orr.w	r3, r3, #32
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	2778      	movs	r7, #120	; 0x78
 80049ea:	4832      	ldr	r0, [pc, #200]	; (8004ab4 <_printf_i+0x240>)
 80049ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	6829      	ldr	r1, [r5, #0]
 80049f4:	061f      	lsls	r7, r3, #24
 80049f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80049fa:	d402      	bmi.n	8004a02 <_printf_i+0x18e>
 80049fc:	065f      	lsls	r7, r3, #25
 80049fe:	bf48      	it	mi
 8004a00:	b2b6      	uxthmi	r6, r6
 8004a02:	07df      	lsls	r7, r3, #31
 8004a04:	bf48      	it	mi
 8004a06:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0a:	6029      	str	r1, [r5, #0]
 8004a0c:	bf48      	it	mi
 8004a0e:	6023      	strmi	r3, [r4, #0]
 8004a10:	b91e      	cbnz	r6, 8004a1a <_printf_i+0x1a6>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f023 0320 	bic.w	r3, r3, #32
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	e7a6      	b.n	800496c <_printf_i+0xf8>
 8004a1e:	4824      	ldr	r0, [pc, #144]	; (8004ab0 <_printf_i+0x23c>)
 8004a20:	e7e4      	b.n	80049ec <_printf_i+0x178>
 8004a22:	4615      	mov	r5, r2
 8004a24:	e7bd      	b.n	80049a2 <_printf_i+0x12e>
 8004a26:	682b      	ldr	r3, [r5, #0]
 8004a28:	6826      	ldr	r6, [r4, #0]
 8004a2a:	1d18      	adds	r0, r3, #4
 8004a2c:	6961      	ldr	r1, [r4, #20]
 8004a2e:	6028      	str	r0, [r5, #0]
 8004a30:	0635      	lsls	r5, r6, #24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	d501      	bpl.n	8004a3a <_printf_i+0x1c6>
 8004a36:	6019      	str	r1, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <_printf_i+0x1cc>
 8004a3a:	0670      	lsls	r0, r6, #25
 8004a3c:	d5fb      	bpl.n	8004a36 <_printf_i+0x1c2>
 8004a3e:	8019      	strh	r1, [r3, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	4615      	mov	r5, r2
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	e7bc      	b.n	80049c2 <_printf_i+0x14e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	602a      	str	r2, [r5, #0]
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 f859 	bl	8004b0c <memchr>
 8004a5a:	b108      	cbz	r0, 8004a60 <_printf_i+0x1ec>
 8004a5c:	1b40      	subs	r0, r0, r5
 8004a5e:	6060      	str	r0, [r4, #4]
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	2300      	movs	r3, #0
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6a:	e7aa      	b.n	80049c2 <_printf_i+0x14e>
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4640      	mov	r0, r8
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	47d0      	blx	sl
 8004a76:	3001      	adds	r0, #1
 8004a78:	d0ad      	beq.n	80049d6 <_printf_i+0x162>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	079b      	lsls	r3, r3, #30
 8004a7e:	d413      	bmi.n	8004aa8 <_printf_i+0x234>
 8004a80:	68e0      	ldr	r0, [r4, #12]
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	4298      	cmp	r0, r3
 8004a86:	bfb8      	it	lt
 8004a88:	4618      	movlt	r0, r3
 8004a8a:	e7a6      	b.n	80049da <_printf_i+0x166>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4632      	mov	r2, r6
 8004a90:	4649      	mov	r1, r9
 8004a92:	4640      	mov	r0, r8
 8004a94:	47d0      	blx	sl
 8004a96:	3001      	adds	r0, #1
 8004a98:	d09d      	beq.n	80049d6 <_printf_i+0x162>
 8004a9a:	3501      	adds	r5, #1
 8004a9c:	68e3      	ldr	r3, [r4, #12]
 8004a9e:	9903      	ldr	r1, [sp, #12]
 8004aa0:	1a5b      	subs	r3, r3, r1
 8004aa2:	42ab      	cmp	r3, r5
 8004aa4:	dcf2      	bgt.n	8004a8c <_printf_i+0x218>
 8004aa6:	e7eb      	b.n	8004a80 <_printf_i+0x20c>
 8004aa8:	2500      	movs	r5, #0
 8004aaa:	f104 0619 	add.w	r6, r4, #25
 8004aae:	e7f5      	b.n	8004a9c <_printf_i+0x228>
 8004ab0:	08004c51 	.word	0x08004c51
 8004ab4:	08004c62 	.word	0x08004c62

08004ab8 <memmove>:
 8004ab8:	4288      	cmp	r0, r1
 8004aba:	b510      	push	{r4, lr}
 8004abc:	eb01 0402 	add.w	r4, r1, r2
 8004ac0:	d902      	bls.n	8004ac8 <memmove+0x10>
 8004ac2:	4284      	cmp	r4, r0
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	d807      	bhi.n	8004ad8 <memmove+0x20>
 8004ac8:	1e43      	subs	r3, r0, #1
 8004aca:	42a1      	cmp	r1, r4
 8004acc:	d008      	beq.n	8004ae0 <memmove+0x28>
 8004ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ad6:	e7f8      	b.n	8004aca <memmove+0x12>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4402      	add	r2, r0
 8004adc:	428a      	cmp	r2, r1
 8004ade:	d100      	bne.n	8004ae2 <memmove+0x2a>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aea:	e7f7      	b.n	8004adc <memmove+0x24>

08004aec <_sbrk_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	; (8004b08 <_sbrk_r+0x1c>)
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	f7fc fa3c 	bl	8000f74 <_sbrk>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_sbrk_r+0x1a>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_sbrk_r+0x1a>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	2000032c 	.word	0x2000032c

08004b0c <memchr>:
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	b2c9      	uxtb	r1, r1
 8004b12:	4402      	add	r2, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	d101      	bne.n	8004b1e <memchr+0x12>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e003      	b.n	8004b26 <memchr+0x1a>
 8004b1e:	7804      	ldrb	r4, [r0, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	428c      	cmp	r4, r1
 8004b24:	d1f6      	bne.n	8004b14 <memchr+0x8>
 8004b26:	bd10      	pop	{r4, pc}

08004b28 <memcpy>:
 8004b28:	440a      	add	r2, r1
 8004b2a:	4291      	cmp	r1, r2
 8004b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b30:	d100      	bne.n	8004b34 <memcpy+0xc>
 8004b32:	4770      	bx	lr
 8004b34:	b510      	push	{r4, lr}
 8004b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b40:	d1f9      	bne.n	8004b36 <memcpy+0xe>
 8004b42:	bd10      	pop	{r4, pc}

08004b44 <_realloc_r>:
 8004b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	460e      	mov	r6, r1
 8004b4e:	b921      	cbnz	r1, 8004b5a <_realloc_r+0x16>
 8004b50:	4611      	mov	r1, r2
 8004b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	f7ff bc37 	b.w	80043c8 <_malloc_r>
 8004b5a:	b92a      	cbnz	r2, 8004b68 <_realloc_r+0x24>
 8004b5c:	f7ff fbcc 	bl	80042f8 <_free_r>
 8004b60:	4625      	mov	r5, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b68:	f000 f81b 	bl	8004ba2 <_malloc_usable_size_r>
 8004b6c:	4284      	cmp	r4, r0
 8004b6e:	4607      	mov	r7, r0
 8004b70:	d802      	bhi.n	8004b78 <_realloc_r+0x34>
 8004b72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b76:	d812      	bhi.n	8004b9e <_realloc_r+0x5a>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f7ff fc24 	bl	80043c8 <_malloc_r>
 8004b80:	4605      	mov	r5, r0
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d0ed      	beq.n	8004b62 <_realloc_r+0x1e>
 8004b86:	42bc      	cmp	r4, r7
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	bf28      	it	cs
 8004b8e:	463a      	movcs	r2, r7
 8004b90:	f7ff ffca 	bl	8004b28 <memcpy>
 8004b94:	4631      	mov	r1, r6
 8004b96:	4640      	mov	r0, r8
 8004b98:	f7ff fbae 	bl	80042f8 <_free_r>
 8004b9c:	e7e1      	b.n	8004b62 <_realloc_r+0x1e>
 8004b9e:	4635      	mov	r5, r6
 8004ba0:	e7df      	b.n	8004b62 <_realloc_r+0x1e>

08004ba2 <_malloc_usable_size_r>:
 8004ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba6:	1f18      	subs	r0, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfbc      	itt	lt
 8004bac:	580b      	ldrlt	r3, [r1, r0]
 8004bae:	18c0      	addlt	r0, r0, r3
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_init>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

08004bc0 <_fini>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr
