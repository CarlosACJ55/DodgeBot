
actuation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004634  08004634  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  2000000c  08004648  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  08004648  00020fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3b0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a4  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  000317d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b67  00000000  00000000  00032660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206f3  00000000  00000000  000331c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011db9  00000000  00000000  000538ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c82e9  00000000  00000000  00065673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e08  00000000  00000000  0012d95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00131764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08004544 	.word	0x08004544

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08004544 	.word	0x08004544

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fef6 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f84c 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa44 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 fa22 	bl	800091c <MX_DMA_Init>
  MX_USART6_UART_Init();
 80004d8:	f000 f9f4 	bl	80008c4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_RTC_Init>
  MX_TIM1_Init();
 80004e0:	f000 f8fc 	bl	80006dc <MX_TIM1_Init>
  MX_TIM12_Init();
 80004e4:	f000 f984 	bl	80007f0 <MX_TIM12_Init>
  MX_DAC_Init();
 80004e8:	f000 f89e 	bl	8000628 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80004ec:	210c      	movs	r1, #12
 80004ee:	4817      	ldr	r0, [pc, #92]	; (800054c <main+0x88>)
 80004f0:	f002 fce0 	bl	8002eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	4816      	ldr	r0, [pc, #88]	; (8000550 <main+0x8c>)
 80004f8:	f002 fcdc 	bl	8002eb4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart6, (uint8_t *)msgQ.messages, sizeof(RX_BUF_LEN));
 80004fc:	2204      	movs	r2, #4
 80004fe:	4915      	ldr	r1, [pc, #84]	; (8000554 <main+0x90>)
 8000500:	4815      	ldr	r0, [pc, #84]	; (8000558 <main+0x94>)
 8000502:	f003 fc25 	bl	8003d50 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim1.Instance->CNT = 0;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <main+0x88>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  htim12.Instance->CNT = 0;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x8c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (gameState) {
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x98>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d80f      	bhi.n	800053e <main+0x7a>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <main+0x60>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000549 	.word	0x08000549
 8000528:	08000535 	.word	0x08000535
 800052c:	08000549 	.word	0x08000549
 8000530:	08000549 	.word	0x08000549
    case IN_GAME:
      break;
      case IDLE:
        send((uint8_t *)"X,1,200,0,100\n", 13);
 8000534:	210d      	movs	r1, #13
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x9c>)
 8000538:	f000 fad0 	bl	8000adc <send>
      break;
 800053c:	e005      	b.n	800054a <main+0x86>
      /* code */
      break;
    case DISCONNECTED:
      break;
    default:
      send((uint8_t *)"Unsynchronized.", 1);
 800053e:	2101      	movs	r1, #1
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0xa0>)
 8000542:	f000 facb 	bl	8000adc <send>
 8000546:	e7e6      	b.n	8000516 <main+0x52>
      break;
 8000548:	bf00      	nop
    switch (gameState) {
 800054a:	e7e4      	b.n	8000516 <main+0x52>
 800054c:	2000005c 	.word	0x2000005c
 8000550:	200000a4 	.word	0x200000a4
 8000554:	20000194 	.word	0x20000194
 8000558:	200000ec 	.word	0x200000ec
 800055c:	20000fab 	.word	0x20000fab
 8000560:	0800455c 	.word	0x0800455c
 8000564:	0800456c 	.word	0x0800456c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 ffa6 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800059a:	230a      	movs	r3, #10
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2310      	movs	r3, #16
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2300      	movs	r3, #0
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 80005b2:	230d      	movs	r3, #13
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 80005b6:	23c3      	movs	r3, #195	; 0xc3
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fd8e 	bl	80020e8 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005d2:	f000 fc69 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2103      	movs	r1, #3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ffcb 	bl	8002590 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000600:	f000 fc52 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000604:	2304      	movs	r3, #4
 8000606:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f9bd 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800061c:	f000 fc44 	bl	8000ea8 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	; 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_DAC_Init+0x60>)
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_DAC_Init+0x64>)
 800063a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_DAC_Init+0x60>)
 800063e:	f000 ffb6 	bl	80015ae <HAL_DAC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000648:	f000 fc2e 	bl	8000ea8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_DAC_Init+0x60>)
 800065c:	f000 ffc9 	bl	80015f2 <HAL_DAC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000666:	f000 fc1f 	bl	8000ea8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	2210      	movs	r2, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_DAC_Init+0x60>)
 8000672:	f000 ffbe 	bl	80015f2 <HAL_DAC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 fc14 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40007400 	.word	0x40007400

08000690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_RTC_Init+0x44>)
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <MX_RTC_Init+0x48>)
 8000698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_RTC_Init+0x44>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a2:	227f      	movs	r2, #127	; 0x7f
 80006a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_RTC_Init+0x44>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_RTC_Init+0x44>)
 80006c0:	f002 fa5c 	bl	8002b7c <HAL_RTC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006ca:	f000 fbed 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000003c 	.word	0x2000003c
 80006d8:	40002800 	.word	0x40002800

080006dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b092      	sub	sp, #72	; 0x48
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2220      	movs	r2, #32
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fede 	bl	80044c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_TIM1_Init+0x10c>)
 800070e:	4a37      	ldr	r2, [pc, #220]	; (80007ec <MX_TIM1_Init+0x110>)
 8000710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_TIM1_Init+0x10c>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000720:	2204      	movs	r2, #4
 8000722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_TIM1_Init+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000738:	f002 fb6c 	bl	8002e14 <HAL_TIM_PWM_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 fbb1 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000746:	2108      	movs	r1, #8
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <MX_TIM1_Init+0x10c>)
 800074a:	f002 fc7b 	bl	8003044 <HAL_TIM_OnePulse_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 fba8 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000760:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000764:	4619      	mov	r1, r3
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000768:	f003 f954 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000772:	f000 fb99 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000776:	2370      	movs	r3, #112	; 0x70
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	220c      	movs	r2, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_TIM1_Init+0x10c>)
 8000798:	f002 fcae 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007a2:	f000 fb81 	bl	8000ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM1_Init+0x10c>)
 80007ca:	f003 f99d 	bl	8003b08 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007d4:	f000 fb68 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM1_Init+0x10c>)
 80007da:	f000 fc2d 	bl	8001038 <HAL_TIM_MspPostInit>

}
 80007de:	bf00      	nop
 80007e0:	3748      	adds	r7, #72	; 0x48
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000005c 	.word	0x2000005c
 80007ec:	40010000 	.word	0x40010000

080007f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000818:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <MX_TIM12_Init+0xd0>)
 800081a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_TIM12_Init+0xcc>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4;
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_TIM12_Init+0xcc>)
 800082a:	2204      	movs	r2, #4
 800082c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800083a:	4820      	ldr	r0, [pc, #128]	; (80008bc <MX_TIM12_Init+0xcc>)
 800083c:	f002 fa9b 	bl	8002d76 <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000846:	f000 fb2f 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4619      	mov	r1, r3
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000858:	f002 fd10 	bl	800327c <HAL_TIM_ConfigClockSource>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000862:	f000 fb21 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000866:	4815      	ldr	r0, [pc, #84]	; (80008bc <MX_TIM12_Init+0xcc>)
 8000868:	f002 fad4 	bl	8002e14 <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8000872:	f000 fb19 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK)
 8000876:	2108      	movs	r1, #8
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <MX_TIM12_Init+0xcc>)
 800087a:	f002 fbe3 	bl	8003044 <HAL_TIM_OnePulse_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM12_Init+0x98>
  {
    Error_Handler();
 8000884:	f000 fb10 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000888:	2370      	movs	r3, #112	; 0x70
 800088a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM12_Init+0xcc>)
 80008a0:	f002 fc2a 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 80008aa:	f000 fafd 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM12_Init+0xcc>)
 80008b0:	f000 fbc2 	bl	8001038 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	40001800 	.word	0x40001800

080008c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_USART6_UART_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008dc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART6_UART_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART6_UART_Init+0x50>)
 8000900:	f003 f953 	bl	8003baa <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 facd 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000ec 	.word	0x200000ec
 8000918:	40011400 	.word	0x40011400

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_DMA_Init+0x3c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <MX_DMA_Init+0x3c>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_DMA_Init+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2039      	movs	r0, #57	; 0x39
 8000944:	f000 fdfd 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000948:	2039      	movs	r0, #57	; 0x39
 800094a:	f000 fe16 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a53      	ldr	r2, [pc, #332]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a37      	ldr	r2, [pc, #220]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a30      	ldr	r2, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0x16c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a20:	482a      	ldr	r0, [pc, #168]	; (8000acc <MX_GPIO_Init+0x170>)
 8000a22:	f001 fb49 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <MX_GPIO_Init+0x174>)
 8000a2e:	f001 fb43 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x178>)
 8000a3a:	f001 fb3d 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	4825      	ldr	r0, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0x17c>)
 8000a44:	f001 fb38 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <MX_GPIO_Init+0x170>)
 8000a62:	f001 f98b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <MX_GPIO_Init+0x174>)
 8000a80:	f001 f97c 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_GPIO_Init+0x178>)
 8000a9e:	f001 f96d 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_GPIO_Init+0x17c>)
 8000aba:	f001 f95f 	bl	8001d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	; 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020c00 	.word	0x40020c00
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40021000 	.word	0x40021000

08000adc <send>:

/* USER CODE BEGIN 4 */

void send(const uint8_t *msg, const uint8_t len) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit(&huart6, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <send+0x24>)
 8000af4:	f003 f8a9 	bl	8003c4a <HAL_UART_Transmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000ec 	.word	0x200000ec

08000b04 <switchStates>:

void switchStates(uint8_t next) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  switch (next) {
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	3b45      	subs	r3, #69	; 0x45
 8000b12:	2b0e      	cmp	r3, #14
 8000b14:	d834      	bhi.n	8000b80 <switchStates+0x7c>
 8000b16:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <switchStates+0x18>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b61 	.word	0x08000b61
 8000b20:	08000b81 	.word	0x08000b81
 8000b24:	08000b81 	.word	0x08000b81
 8000b28:	08000b81 	.word	0x08000b81
 8000b2c:	08000b59 	.word	0x08000b59
 8000b30:	08000b81 	.word	0x08000b81
 8000b34:	08000b81 	.word	0x08000b81
 8000b38:	08000b81 	.word	0x08000b81
 8000b3c:	08000b81 	.word	0x08000b81
 8000b40:	08000b81 	.word	0x08000b81
 8000b44:	08000b81 	.word	0x08000b81
 8000b48:	08000b81 	.word	0x08000b81
 8000b4c:	08000b81 	.word	0x08000b81
 8000b50:	08000b7f 	.word	0x08000b7f
 8000b54:	08000b67 	.word	0x08000b67
  case 'I':
    gameState = IDLE;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <switchStates+0x84>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
    break;
 8000b5e:	e00f      	b.n	8000b80 <switchStates+0x7c>
  case 'E':
    gameState = DISCONNECTED;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <switchStates+0x84>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
  case 'S':
    if (gameState == IDLE) {
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <switchStates+0x84>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d103      	bne.n	8000b76 <switchStates+0x72>
      gameState = IN_GAME;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <switchStates+0x84>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	701a      	strb	r2, [r3, #0]
      break;
 8000b74:	e004      	b.n	8000b80 <switchStates+0x7c>
    }
    send((uint8_t *)"!E", 2);
 8000b76:	2102      	movs	r1, #2
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <switchStates+0x88>)
 8000b7a:	f7ff ffaf 	bl	8000adc <send>
  case 'R':
    //reset_motors();
	  break;
 8000b7e:	bf00      	nop
  }
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000fab 	.word	0x20000fab
 8000b8c:	0800457c 	.word	0x0800457c

08000b90 <strToInt>:

uint8_t strToInt(uint8_t *l, uint8_t *r) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint8_t res = 0, pow = 1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73bb      	strb	r3, [r7, #14]
  do {
    l--;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
    res += pow * (*r - '0');
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b30      	subs	r3, #48	; 0x30
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	7bba      	ldrb	r2, [r7, #14]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4413      	add	r3, r2
 8000bbc:	73fb      	strb	r3, [r7, #15]
    pow *= 10;
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	73bb      	strb	r3, [r7, #14]
  } while (l != r);
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d1e7      	bne.n	8000ba2 <strToInt+0x12>
  return res;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
	...

08000be0 <enqueueMove>:

void enqueueMove(uint8_t *start, uint8_t len) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
  Move *cur = &movQ.moves[movQ.end++];
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <enqueueMove+0x134>)
 8000bee:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	b2d1      	uxtb	r1, r2
 8000bf6:	4a47      	ldr	r2, [pc, #284]	; (8000d14 <enqueueMove+0x134>)
 8000bf8:	f882 1191 	strb.w	r1, [r2, #401]	; 0x191
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <enqueueMove+0x134>)
 8000c00:	4413      	add	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
  movQ.end %= MAX_Q_LEN;
 8000c04:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <enqueueMove+0x134>)
 8000c06:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <enqueueMove+0x138>)
 8000c0c:	fba2 1203 	umull	r1, r2, r2, r3
 8000c10:	0952      	lsrs	r2, r2, #5
 8000c12:	2164      	movs	r1, #100	; 0x64
 8000c14:	fb01 f202 	mul.w	r2, r1, r2
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <enqueueMove+0x134>)
 8000c1e:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  if (movQ.count++ == MAX_Q_LEN)
 8000c22:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <enqueueMove+0x134>)
 8000c24:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	b2d1      	uxtb	r1, r2
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <enqueueMove+0x134>)
 8000c2e:	f882 1192 	strb.w	r1, [r2, #402]	; 0x192
 8000c32:	2b64      	cmp	r3, #100	; 0x64
 8000c34:	d103      	bne.n	8000c3e <enqueueMove+0x5e>
    send((uint8_t *)"Move queue overflow.", 1);
 8000c36:	2101      	movs	r1, #1
 8000c38:	4838      	ldr	r0, [pc, #224]	; (8000d1c <enqueueMove+0x13c>)
 8000c3a:	f7ff ff4f 	bl	8000adc <send>
  uint8_t p1 = 1, p2;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  cur->xDir = start[p1++] - '0';
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	73fa      	strb	r2, [r7, #15]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3b30      	subs	r3, #48	; 0x30
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	701a      	strb	r2, [r3, #0]
  for (p2 = p1 + 1; start[p2] != ','; p2++)
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	75fb      	strb	r3, [r7, #23]
 8000c5e:	e00a      	b.n	8000c76 <enqueueMove+0x96>
    if (p2 == len)
 8000c60:	7dfa      	ldrb	r2, [r7, #23]
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d103      	bne.n	8000c70 <enqueueMove+0x90>
      send((uint8_t *)"Invalid move format", 1);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	482d      	ldr	r0, [pc, #180]	; (8000d20 <enqueueMove+0x140>)
 8000c6c:	f7ff ff36 	bl	8000adc <send>
  for (p2 = p1 + 1; start[p2] != ','; p2++)
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	3301      	adds	r3, #1
 8000c74:	75fb      	strb	r3, [r7, #23]
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b2c      	cmp	r3, #44	; 0x2c
 8000c80:	d1ee      	bne.n	8000c60 <enqueueMove+0x80>
  cur->xPul = strToInt(start + p1, start + p2);
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	18d0      	adds	r0, r2, r3
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f7ff ff7e 	bl	8000b90 <strToInt>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	709a      	strb	r2, [r3, #2]
  p1 = p2 + 1;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
  cur->yDir = start[p1++] - '0';
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	73fa      	strb	r2, [r7, #15]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3b30      	subs	r3, #48	; 0x30
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	705a      	strb	r2, [r3, #1]
  for (p2 = p1 + 1; start[p2] != '\0'; p2++)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
 8000cbe:	e00a      	b.n	8000cd6 <enqueueMove+0xf6>
    if (p2 == len)
 8000cc0:	7dfa      	ldrb	r2, [r7, #23]
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d103      	bne.n	8000cd0 <enqueueMove+0xf0>
      send((uint8_t *)"Invalid move format", 1);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4815      	ldr	r0, [pc, #84]	; (8000d20 <enqueueMove+0x140>)
 8000ccc:	f7ff ff06 	bl	8000adc <send>
  for (p2 = p1 + 1; start[p2] != '\0'; p2++)
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ee      	bne.n	8000cc0 <enqueueMove+0xe0>
  if (p2 != len)
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d003      	beq.n	8000cf2 <enqueueMove+0x112>
    send((uint8_t *)"Invalid move format", 1);
 8000cea:	2101      	movs	r1, #1
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <enqueueMove+0x140>)
 8000cee:	f7ff fef5 	bl	8000adc <send>
  cur->yPul = strToInt(start + p1, start + p2);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	18d0      	adds	r0, r2, r3
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff ff46 	bl	8000b90 <strToInt>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	70da      	strb	r2, [r3, #3]
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000e18 	.word	0x20000e18
 8000d18:	51eb851f 	.word	0x51eb851f
 8000d1c:	08004580 	.word	0x08004580
 8000d20:	08004598 	.word	0x08004598

08000d24 <interpret>:

void interpret(Message *msg) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  switch (msg->data[0]) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b21      	cmp	r3, #33	; 0x21
 8000d32:	d002      	beq.n	8000d3a <interpret+0x16>
 8000d34:	2b58      	cmp	r3, #88	; 0x58
 8000d36:	d00e      	beq.n	8000d56 <interpret+0x32>
 8000d38:	e01c      	b.n	8000d74 <interpret+0x50>
  case '!':
    switchStates(msg->data[2]);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	789b      	ldrb	r3, [r3, #2]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fee0 	bl	8000b04 <switchStates>
    send(msg->data, msg->len);
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	8bdb      	ldrh	r3, [r3, #30]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f7ff fec4 	bl	8000adc <send>
    break;
 8000d54:	e013      	b.n	8000d7e <interpret+0x5a>
  case 'X':
    msg->data[msg->len] = '\0';
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	8bdb      	ldrh	r3, [r3, #30]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	5499      	strb	r1, [r3, r2]
    enqueueMove(msg->data, msg->len);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	8bdb      	ldrh	r3, [r3, #30]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f7ff ff37 	bl	8000be0 <enqueueMove>
    break;
 8000d72:	e004      	b.n	8000d7e <interpret+0x5a>
  default:
    send((uint8_t *)"Invalid message code received.", 1);
 8000d74:	2101      	movs	r1, #1
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <interpret+0x64>)
 8000d78:	f7ff feb0 	bl	8000adc <send>
    break;
 8000d7c:	bf00      	nop
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	080045ac 	.word	0x080045ac

08000d8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if (msgQ.count++ == MAX_Q_LEN)
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000d96:	f893 3c81 	ldrb.w	r3, [r3, #3201]	; 0xc81
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	b2d1      	uxtb	r1, r2
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000da0:	f882 1c81 	strb.w	r1, [r2, #3201]	; 0xc81
 8000da4:	2b64      	cmp	r3, #100	; 0x64
 8000da6:	d103      	bne.n	8000db0 <HAL_UART_RxCpltCallback+0x24>
    send((uint8_t *)"Message queue overflow.", 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	483b      	ldr	r0, [pc, #236]	; (8000e98 <HAL_UART_RxCpltCallback+0x10c>)
 8000dac:	f7ff fe96 	bl	8000adc <send>
  Message *cur = &msgQ.messages[msgQ.end++];
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000db2:	f893 3c80 	ldrb.w	r3, [r3, #3200]	; 0xc80
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	b2d1      	uxtb	r1, r2
 8000dba:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000dbc:	f882 1c80 	strb.w	r1, [r2, #3200]	; 0xc80
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
  msgQ.end %= MAX_Q_LEN;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000dca:	f893 3c80 	ldrb.w	r3, [r3, #3200]	; 0xc80
 8000dce:	4a33      	ldr	r2, [pc, #204]	; (8000e9c <HAL_UART_RxCpltCallback+0x110>)
 8000dd0:	fba2 1203 	umull	r1, r2, r2, r3
 8000dd4:	0952      	lsrs	r2, r2, #5
 8000dd6:	2164      	movs	r1, #100	; 0x64
 8000dd8:	fb01 f202 	mul.w	r2, r1, r2
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000de2:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80
  HAL_UART_Receive_DMA(huart, (uint8_t *)&msgQ.messages[msgQ.end], 1);
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000de8:	f893 3c80 	ldrb.w	r3, [r3, #3200]	; 0xc80
 8000dec:	015b      	lsls	r3, r3, #5
 8000dee:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000df0:	4413      	add	r3, r2
 8000df2:	2201      	movs	r2, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 ffaa 	bl	8003d50 <HAL_UART_Receive_DMA>
  for (cur->len = 0; cur->data[cur->len++] != '\0';)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	83da      	strh	r2, [r3, #30]
 8000e02:	e007      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x88>
    if (cur->len == RX_BUF_LEN)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	8bdb      	ldrh	r3, [r3, #30]
 8000e08:	2b1e      	cmp	r3, #30
 8000e0a:	d103      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0x88>
      send((uint8_t *)"Rx buffer overflow.", 1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4824      	ldr	r0, [pc, #144]	; (8000ea0 <HAL_UART_RxCpltCallback+0x114>)
 8000e10:	f7ff fe64 	bl	8000adc <send>
  for (cur->len = 0; cur->data[cur->len++] != '\0';)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8bdb      	ldrh	r3, [r3, #30]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	b291      	uxth	r1, r2
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	83d1      	strh	r1, [r2, #30]
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1ec      	bne.n	8000e04 <HAL_UART_RxCpltCallback+0x78>
  if (cur->len %= 2)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	8bdb      	ldrh	r3, [r3, #30]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	83da      	strh	r2, [r3, #30]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	8bdb      	ldrh	r3, [r3, #30]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_UART_RxCpltCallback+0xbc>
    send((uint8_t *)"Transmission error.", 1);
 8000e40:	2101      	movs	r1, #1
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <HAL_UART_RxCpltCallback+0x118>)
 8000e44:	f7ff fe4a 	bl	8000adc <send>
  cur->len /= 2;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	8bdb      	ldrh	r3, [r3, #30]
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	83da      	strh	r2, [r3, #30]
  if (strncmp((char *)cur->data, (char *)cur->data + cur->len, cur->len))
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	8bd2      	ldrh	r2, [r2, #30]
 8000e5c:	1899      	adds	r1, r3, r2
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8bdb      	ldrh	r3, [r3, #30]
 8000e62:	461a      	mov	r2, r3
 8000e64:	f003 fb38 	bl	80044d8 <strncmp>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_UART_RxCpltCallback+0xea>
    send((uint8_t *)"Transmission error.", 1);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <HAL_UART_RxCpltCallback+0x118>)
 8000e72:	f7ff fe33 	bl	8000adc <send>
  interpret(cur);
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ff54 	bl	8000d24 <interpret>
  msgQ.count--;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000e7e:	f893 3c81 	ldrb.w	r3, [r3, #3201]	; 0xc81
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_UART_RxCpltCallback+0x108>)
 8000e88:	f883 2c81 	strb.w	r2, [r3, #3201]	; 0xc81
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000194 	.word	0x20000194
 8000e98:	080045cc 	.word	0x080045cc
 8000e9c:	51eb851f 	.word	0x51eb851f
 8000ea0:	080045e4 	.word	0x080045e4
 8000ea4:	080045f8 	.word	0x080045f8

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
   */
  __disable_irq();
  //  while (1) {
  //  }
  /* USER CODE END Error_Handler_Debug */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_MspInit+0x48>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_MspInit+0x48>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_MspInit+0x48>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_MspInit+0x48>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_MspInit+0x48>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_MspInit+0x48>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_DAC_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d127      	bne.n	8000f76 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_DAC_MspInit+0x80>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f5e:	2330      	movs	r3, #48	; 0x30
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_DAC_MspInit+0x84>)
 8000f72:	f000 ff03 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40007400 	.word	0x40007400
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_RTC_MspInit+0x24>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_RTC_MspInit+0x28>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40002800 	.word	0x40002800
 8000fb4:	42470e3c 	.word	0x42470e3c

08000fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x38>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10d      	bne.n	8000fe6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10d      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40001800 	.word	0x40001800
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_TIM_MspPostInit+0xb4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d11f      	bne.n	800109a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <HAL_TIM_MspPostInit+0xbc>)
 8001094:	f000 fe72 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001098:	e023      	b.n	80010e2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <HAL_TIM_MspPostInit+0xc0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d11e      	bne.n	80010e2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_TIM_MspPostInit+0xb8>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010d2:	2309      	movs	r3, #9
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_TIM_MspPostInit+0xc4>)
 80010de:	f000 fe4d 	bl	8001d7c <HAL_GPIO_Init>
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40001800 	.word	0x40001800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <HAL_UART_MspInit+0xe0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d15a      	bne.n	80011d8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 800112c:	f043 0320 	orr.w	r3, r3, #32
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_UART_MspInit+0xe4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	; 0xc0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800116a:	2308      	movs	r3, #8
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <HAL_UART_MspInit+0xe8>)
 8001176:	f000 fe01 	bl	8001d7c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_UART_MspInit+0xec>)
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_UART_MspInit+0xf0>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001182:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001186:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_UART_MspInit+0xec>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_UART_MspInit+0xec>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011be:	f000 fa71 	bl	80016a4 <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80011c8:	f7ff fe6e 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40011400 	.word	0x40011400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	20000134 	.word	0x20000134
 80011f0:	40026428 	.word	0x40026428

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f88f 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA2_Stream1_IRQHandler+0x10>)
 800124a:	f000 fb31 	bl	80018b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000134 	.word	0x20000134

08001258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001268:	f7ff fff6 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f003 f933 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff f915 	bl	80004c4 <main>
  bx  lr
 800129a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800129c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a8:	0800463c 	.word	0x0800463c
  ldr r2, =_sbss
 80012ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b0:	20000fb0 	.word	0x20000fb0

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_Init+0x40>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_Init+0x40>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x40>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f923 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fde4 	bl	8000eb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f93b 	bl	8001596 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f903 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000008 	.word	0x20000008
 800137c:	20000fac 	.word	0x20000fac

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000fac 	.word	0x20000fac

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <__NVIC_EnableIRQ+0x34>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff90 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff2d 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff42 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff35 	bl	80013f8 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e014      	b.n	80015ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fc97 	bl	8000f04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b089      	sub	sp, #36	; 0x24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_DAC_ConfigChannel+0x1c>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e042      	b.n	8001698 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	795b      	ldrb	r3, [r3, #5]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_DAC_ConfigChannel+0x2c>
 800161a:	2302      	movs	r3, #2
 800161c:	e03c      	b.n	8001698 <HAL_DAC_ConfigChannel+0xa6>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2202      	movs	r2, #2
 8001628:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	f640 72fe 	movw	r2, #4094	; 0xffe
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	22c0      	movs	r2, #192	; 0xc0
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43da      	mvns	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001696:	7ffb      	ldrb	r3, [r7, #31]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff fe66 	bl	8001380 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e099      	b.n	80017f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e00f      	b.n	8001702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fe4d 	bl	8001380 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d908      	bls.n	8001702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e078      	b.n	80017f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_DMA_Init+0x158>)
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b04      	cmp	r3, #4
 8001794:	d117      	bne.n	80017c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa6d 	bl	8001c88 <DMA_CheckFifoParam>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c2:	2301      	movs	r3, #1
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa26 	bl	8001c20 <DMA_CalcBaseAndBitshift>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f010803f 	.word	0xf010803f

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Start_IT+0x26>
 8001822:	2302      	movs	r3, #2
 8001824:	e040      	b.n	80018a8 <HAL_DMA_Start_IT+0xa8>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12f      	bne.n	800189a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9b8 	bl	8001bc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	223f      	movs	r2, #63	; 0x3f
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0216 	orr.w	r2, r2, #22
 800186e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e005      	b.n	80018a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018bc:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <HAL_DMA_IRQHandler+0x248>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a8e      	ldr	r2, [pc, #568]	; (8001afc <HAL_DMA_IRQHandler+0x24c>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0a9b      	lsrs	r3, r3, #10
 80018c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	2208      	movs	r2, #8
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01a      	beq.n	800191c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0204 	bic.w	r2, r2, #4
 8001902:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2208      	movs	r2, #8
 800190a:	409a      	lsls	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2201      	movs	r2, #1
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2201      	movs	r2, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2204      	movs	r2, #4
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d012      	beq.n	8001988 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00b      	beq.n	8001988 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2204      	movs	r2, #4
 8001976:	409a      	lsls	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	2210      	movs	r2, #16
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d043      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03c      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2210      	movs	r2, #16
 80019ac:	409a      	lsls	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d018      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d024      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
 80019de:	e01f      	b.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
 80019f0:	e016      	b.n	8001a20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0208 	bic.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2220      	movs	r2, #32
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 808f 	beq.w	8001b50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8087 	beq.w	8001b50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2220      	movs	r2, #32
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d136      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0216 	bic.w	r2, r2, #22
 8001a68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x1da>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0208 	bic.w	r2, r2, #8
 8001a98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	223f      	movs	r2, #63	; 0x3f
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d07e      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
        }
        return;
 8001ac6:	e079      	b.n	8001bbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01d      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d031      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e02c      	b.n	8001b50 <HAL_DMA_IRQHandler+0x2a0>
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000
 8001afc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e01e      	b.n	8001b50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10f      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0210 	bic.w	r2, r2, #16
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d032      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2205      	movs	r2, #5
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d307      	bcc.n	8001b98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f2      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x2cc>
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
 8001bba:	e000      	b.n	8001bbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bbc:	bf00      	nop
    }
  }
}
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d108      	bne.n	8001c04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c02:	e007      	b.n	8001c14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3b10      	subs	r3, #16
 8001c30:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <DMA_CalcBaseAndBitshift+0x60>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <DMA_CalcBaseAndBitshift+0x64>)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d909      	bls.n	8001c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	1d1a      	adds	r2, r3, #4
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c60:	e007      	b.n	8001c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c6a:	f023 0303 	bic.w	r3, r3, #3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	aaaaaaab 	.word	0xaaaaaaab
 8001c84:	08004624 	.word	0x08004624

08001c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11f      	bne.n	8001ce2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d856      	bhi.n	8001d56 <DMA_CheckFifoParam+0xce>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <DMA_CheckFifoParam+0x28>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cd3 	.word	0x08001cd3
 8001cb8:	08001cc1 	.word	0x08001cc1
 8001cbc:	08001d57 	.word	0x08001d57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d046      	beq.n	8001d5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd0:	e043      	b.n	8001d5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cda:	d140      	bne.n	8001d5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce0:	e03d      	b.n	8001d5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cea:	d121      	bne.n	8001d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d837      	bhi.n	8001d62 <DMA_CheckFifoParam+0xda>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <DMA_CheckFifoParam+0x70>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d0f 	.word	0x08001d0f
 8001d00:	08001d09 	.word	0x08001d09
 8001d04:	08001d21 	.word	0x08001d21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0c:	e030      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d025      	beq.n	8001d66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1e:	e022      	b.n	8001d66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d28:	d11f      	bne.n	8001d6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d2e:	e01c      	b.n	8001d6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d903      	bls.n	8001d3e <DMA_CheckFifoParam+0xb6>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d003      	beq.n	8001d44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d3c:	e018      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
      break;
 8001d42:	e015      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      break;
 8001d54:	e00b      	b.n	8001d6e <DMA_CheckFifoParam+0xe6>
      break;
 8001d56:	bf00      	nop
 8001d58:	e00a      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
 8001d5c:	e008      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e006      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e004      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;
 8001d66:	bf00      	nop
 8001d68:	e002      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d6a:	bf00      	nop
 8001d6c:	e000      	b.n	8001d70 <DMA_CheckFifoParam+0xe8>
      break;
 8001d6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e16f      	b.n	800206c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8161 	beq.w	8002066 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80bb 	beq.w	8002066 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4a63      	ldr	r2, [pc, #396]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6453      	str	r3, [r2, #68]	; 0x44
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a5f      	ldr	r2, [pc, #380]	; (800208c <HAL_GPIO_Init+0x310>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_GPIO_Init+0x314>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_GPIO_Init+0x220>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_GPIO_Init+0x318>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d02b      	beq.n	8001f98 <HAL_GPIO_Init+0x21c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_GPIO_Init+0x31c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d025      	beq.n	8001f94 <HAL_GPIO_Init+0x218>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_GPIO_Init+0x320>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01f      	beq.n	8001f90 <HAL_GPIO_Init+0x214>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x210>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x20c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x208>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a50      	ldr	r2, [pc, #320]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x200>
 8001f78:	2308      	movs	r3, #8
 8001f7a:	e010      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	e00e      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f80:	2307      	movs	r3, #7
 8001f82:	e00c      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f84:	2306      	movs	r3, #6
 8001f86:	e00a      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb0:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_GPIO_Init+0x310>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_GPIO_Init+0x338>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_GPIO_Init+0x338>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae88 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40013c00 	.word	0x40013c00

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e23b      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d050      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4b9e      	ldr	r3, [pc, #632]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b9b      	ldr	r3, [pc, #620]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b98      	ldr	r3, [pc, #608]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b94      	ldr	r3, [pc, #592]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d036      	beq.n	80021a6 <HAL_RCC_OscConfig+0xbe>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d132      	bne.n	80021a6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e216      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4b8e      	ldr	r3, [pc, #568]	; (8002384 <HAL_RCC_OscConfig+0x29c>)
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d013      	beq.n	800217e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f913 	bl	8001380 <HAL_GetTick>
 800215a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215e:	f7ff f90f 	bl	8001380 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e200      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002170:	4b83      	ldr	r3, [pc, #524]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x76>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff f8ff 	bl	8001380 <HAL_GetTick>
 8002182:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002186:	f7ff f8fb 	bl	8001380 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1ec      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002198:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x9e>
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d077      	beq.n	80022a4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b4:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c0:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d126      	bne.n	800221a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d120      	bne.n	800221a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e1c0      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	21f8      	movs	r1, #248	; 0xf8
 80021fe:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	fa91 f1a1 	rbit	r1, r1
 8002206:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	fab1 f181 	clz	r1, r1
 800220e:	b2c9      	uxtb	r1, r1
 8002210:	408b      	lsls	r3, r1
 8002212:	495b      	ldr	r1, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002218:	e044      	b.n	80022a4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02a      	beq.n	8002278 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002222:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_OscConfig+0x2a0>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff f8aa 	bl	8001380 <HAL_GetTick>
 800222c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f8a6 	bl	8001380 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e197      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	21f8      	movs	r1, #248	; 0xf8
 800225c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	fa91 f1a1 	rbit	r1, r1
 8002264:	60f9      	str	r1, [r7, #12]
  return result;
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	fab1 f181 	clz	r1, r1
 800226c:	b2c9      	uxtb	r1, r1
 800226e:	408b      	lsls	r3, r1
 8002270:	4943      	ldr	r1, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
 8002276:	e015      	b.n	80022a4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x2a0>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff f87f 	bl	8001380 <HAL_GetTick>
 8002282:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f87b 	bl	8001380 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e16c      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d030      	beq.n	8002312 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_RCC_OscConfig+0x2a4>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff f85f 	bl	8001380 <HAL_GetTick>
 80022c2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff f85b 	bl	8001380 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e14c      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x2a4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff f848 	bl	8001380 <HAL_GetTick>
 80022f0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f844 	bl	8001380 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e135      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8087 	beq.w	800242e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d110      	bne.n	8002354 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCC_OscConfig+0x298>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_RCC_OscConfig+0x2a8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_RCC_OscConfig+0x2a8>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x2a8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d122      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_OscConfig+0x2a8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_RCC_OscConfig+0x2a8>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002378:	f7ff f802 	bl	8001380 <HAL_GetTick>
 800237c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	e012      	b.n	80023a6 <HAL_RCC_OscConfig+0x2be>
 8002380:	40023800 	.word	0x40023800
 8002384:	40023802 	.word	0x40023802
 8002388:	42470000 	.word	0x42470000
 800238c:	42470e80 	.word	0x42470e80
 8002390:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7fe fff4 	bl	8001380 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0e5      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b75      	ldr	r3, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x494>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x498>)
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe ffdc 	bl	8001380 <HAL_GetTick>
 80023c8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe ffd8 	bl	8001380 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0c7      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ee      	beq.n	80023cc <HAL_RCC_OscConfig+0x2e4>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe ffc6 	bl	8001380 <HAL_GetTick>
 80023f4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe ffc2 	bl	8001380 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0b1      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 809c 	beq.w	8002570 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002438:	4b52      	ldr	r3, [pc, #328]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <HAL_RCC_OscConfig+0x4a0>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe ff95 	bl	8001380 <HAL_GetTick>
 8002456:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe ff91 	bl	8001380 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e082      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246c:	4b45      	ldr	r3, [pc, #276]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x4a4>)
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	69d1      	ldr	r1, [r2, #28]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6a12      	ldr	r2, [r2, #32]
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248e:	0192      	lsls	r2, r2, #6
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002496:	0612      	lsls	r2, r2, #24
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800249e:	0852      	lsrs	r2, r2, #1
 80024a0:	3a01      	subs	r2, #1
 80024a2:	0412      	lsls	r2, r2, #16
 80024a4:	430a      	orrs	r2, r1
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x4a0>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe ff65 	bl	8001380 <HAL_GetTick>
 80024b6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe ff61 	bl	8001380 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e052      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x3d2>
 80024d8:	e04a      	b.n	8002570 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x4a0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe ff4e 	bl	8001380 <HAL_GetTick>
 80024e4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe ff4a 	bl	8001380 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03b      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x400>
 8002506:	e033      	b.n	8002570 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02e      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x49c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d121      	bne.n	800256c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11a      	bne.n	800256c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002542:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000
 8002580:	40023870 	.word	0x40023870
 8002584:	40023800 	.word	0x40023800
 8002588:	42470060 	.word	0x42470060
 800258c:	f0bc8000 	.word	0xf0bc8000

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d2      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d90c      	bls.n	80025cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0be      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80025fc:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a55      	ldr	r2, [pc, #340]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4950      	ldr	r1, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d040      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e085      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e079      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e071      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7fe fe82 	bl	8001380 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fe7e 	bl	8001380 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e059      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d20c      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e03c      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	491b      	ldr	r1, [pc, #108]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800270e:	f000 f82b 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002712:	4601      	mov	r1, r0
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	22f0      	movs	r2, #240	; 0xf0
 800271e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	60fa      	str	r2, [r7, #12]
  return result;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	40d3      	lsrs	r3, r2
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	fa21 f303 	lsr.w	r3, r1, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1d0>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fdda 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	0800460c 	.word	0x0800460c
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b090      	sub	sp, #64	; 0x40
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	2300      	movs	r3, #0
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80a2 	bhi.w	80028d6 <HAL_RCC_GetSysClockFreq+0x16e>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e09c      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027a0:	e09c      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027a6:	e099      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d027      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	627a      	str	r2, [r7, #36]	; 0x24
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d0:	2100      	movs	r1, #0
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d4:	fb03 f201 	mul.w	r2, r3, r1
 80027d8:	2300      	movs	r3, #0
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	4413      	add	r3, r2
 80027e0:	4a43      	ldr	r2, [pc, #268]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e2:	fba0 2102 	umull	r2, r1, r0, r2
 80027e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	4413      	add	r3, r2
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	2200      	movs	r2, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	61fa      	str	r2, [r7, #28]
 80027f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002800:	f7fd fce0 	bl	80001c4 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280c:	e055      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	617a      	str	r2, [r7, #20]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002820:	f04f 0b00 	mov.w	fp, #0
 8002824:	4652      	mov	r2, sl
 8002826:	465b      	mov	r3, fp
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	0159      	lsls	r1, r3, #5
 8002832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002836:	0150      	lsls	r0, r2, #5
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ebb2 080a 	subs.w	r8, r2, sl
 8002840:	eb63 090b 	sbc.w	r9, r3, fp
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002850:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002854:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002858:	ebb2 0408 	subs.w	r4, r2, r8
 800285c:	eb63 0509 	sbc.w	r5, r3, r9
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	eb14 030a 	adds.w	r3, r4, sl
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	eb45 030b 	adc.w	r3, r5, fp
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288c:	4629      	mov	r1, r5
 800288e:	028b      	lsls	r3, r1, #10
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	4604      	mov	r4, r0
 8002896:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800289a:	4601      	mov	r1, r0
 800289c:	028a      	lsls	r2, r1, #10
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2200      	movs	r2, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	60fa      	str	r2, [r7, #12]
 80028aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ae:	f7fd fc89 	bl	80001c4 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4613      	mov	r3, r2
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	3301      	adds	r3, #1
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d4:	e002      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3740      	adds	r7, #64	; 0x40
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	00f42400 	.word	0x00f42400
 80028f0:	017d7840 	.word	0x017d7840

080028f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000000 	.word	0x20000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800290e:	f7ff fff1 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002912:	4601      	mov	r1, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800291c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002920:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	603a      	str	r2, [r7, #0]
  return result;
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	40d3      	lsrs	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	0800461c 	.word	0x0800461c

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002952:	f7ff ffcf 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002956:	4601      	mov	r1, r0
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002960:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002964:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	fa92 f2a2 	rbit	r2, r2
 800296c:	603a      	str	r2, [r7, #0]
  return result;
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	40d3      	lsrs	r3, r2
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_RCC_GetPCLK2Freq+0x40>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	0800461c 	.word	0x0800461c

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d14c      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029b4:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fce1 	bl	8001380 <HAL_GetTick>
 80029be:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029c2:	f7fe fcdd 	bl	8001380 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0c7      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029d4:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80029e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	613a      	str	r2, [r7, #16]
  return result;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	fa03 f202 	lsl.w	r2, r3, r2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002a06:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	69f9      	ldr	r1, [r7, #28]
 8002a0a:	fa91 f1a1 	rbit	r1, r1
 8002a0e:	61b9      	str	r1, [r7, #24]
  return result;
 8002a10:	69b9      	ldr	r1, [r7, #24]
 8002a12:	fab1 f181 	clz	r1, r1
 8002a16:	b2c9      	uxtb	r1, r1
 8002a18:	408b      	lsls	r3, r1
 8002a1a:	4955      	ldr	r1, [pc, #340]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a22:	4b52      	ldr	r3, [pc, #328]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fcaa 	bl	8001380 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a30:	f7fe fca6 	bl	8001380 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e090      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8083 	beq.w	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6c:	4b40      	ldr	r3, [pc, #256]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fc7c 	bl	8001380 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fc78 	bl	8001380 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e062      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a9e:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02f      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d028      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad0:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ade:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d114      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fc46 	bl	8001380 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe fc42 	bl	8001380 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e02a      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0ee      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	4904      	ldr	r1, [pc, #16]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	42470068 	.word	0x42470068
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	42470e40 	.word	0x42470e40

08002b7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e073      	b.n	8002c7a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7f5b      	ldrb	r3, [r3, #29]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe f9f2 	bl	8000f8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d055      	beq.n	8002c68 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	22ca      	movs	r2, #202	; 0xca
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2253      	movs	r2, #83	; 0x53
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f87d 	bl	8002ccc <RTC_EnterInitMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d12c      	bne.n	8002c36 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68d2      	ldr	r2, [r2, #12]
 8002c16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	041a      	lsls	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f884 	bl	8002d3a <RTC_ExitInitMode>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d110      	bne.n	8002c5e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
 8002c66:	e001      	b.n	8002c6c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f643 7257 	movw	r2, #16215	; 0x3f57
 8002c96:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c98:	f7fe fb72 	bl	8001380 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ca0:	f7fe fb6e 	bl	8001380 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cae:	d901      	bls.n	8002cb4 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e007      	b.n	8002cc4 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d122      	bne.n	8002d30 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cf8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fb41 	bl	8001380 <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d00:	e00c      	b.n	8002d1c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d02:	f7fe fb3d 	bl	8001380 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d10:	d904      	bls.n	8002d1c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <RTC_EnterInitMode+0x64>
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d1e8      	bne.n	8002d02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d54:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff93 	bl	8002c82 <HAL_RTC_WaitForSynchro>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e041      	b.n	8002e0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fe f92b 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f000 fb29 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe f8bc 	bl	8000fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fada 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x24>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e022      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x3e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e015      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start+0x58>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07c      	b.n	8003020 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x82>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	e013      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_PWM_Start+0x92>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	e00b      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f54:	e003      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fd30 	bl	80039cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2d      	ldr	r2, [pc, #180]	; (8003028 <HAL_TIM_PWM_Start+0x174>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIM_PWM_Start+0xcc>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_TIM_PWM_Start+0x178>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_PWM_Start+0xd0>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_TIM_PWM_Start+0xd2>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_TIM_PWM_Start+0x174>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d01d      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_TIM_PWM_Start+0x17c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d018      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_TIM_PWM_Start+0x180>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_TIM_PWM_Start+0x184>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_TIM_PWM_Start+0x178>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_TIM_PWM_Start+0x188>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_TIM_PWM_Start+0x136>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIM_PWM_Start+0x18c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b06      	cmp	r3, #6
 8002ffa:	d010      	beq.n	800301e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	e007      	b.n	800301e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40010000 	.word	0x40010000
 800302c:	40010400 	.word	0x40010400
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40014000 	.word	0x40014000
 8003040:	40001800 	.word	0x40001800

08003044 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e041      	b.n	80030dc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f839 	bl	80030e4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f000 f9c1 	bl	800340c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ae      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	f200 809f 	bhi.w	8003264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003161 	.word	0x08003161
 8003130:	08003265 	.word	0x08003265
 8003134:	08003265 	.word	0x08003265
 8003138:	08003265 	.word	0x08003265
 800313c:	080031a1 	.word	0x080031a1
 8003140:	08003265 	.word	0x08003265
 8003144:	08003265 	.word	0x08003265
 8003148:	08003265 	.word	0x08003265
 800314c:	080031e3 	.word	0x080031e3
 8003150:	08003265 	.word	0x08003265
 8003154:	08003265 	.word	0x08003265
 8003158:	08003265 	.word	0x08003265
 800315c:	08003223 	.word	0x08003223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f9ee 	bl	8003548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0208 	orr.w	r2, r2, #8
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
      break;
 800319e:	e064      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fa3e 	bl	8003628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
      break;
 80031e0:	e043      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa91 	bl	8003710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0204 	bic.w	r2, r2, #4
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
      break;
 8003220:	e023      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fae5 	bl	80037f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	021a      	lsls	r2, r3, #8
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	61da      	str	r2, [r3, #28]
      break;
 8003262:	e002      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIM_ConfigClockSource+0x1c>
 8003294:	2302      	movs	r3, #2
 8003296:	e0b4      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x186>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d0:	d03e      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xd4>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	f200 8087 	bhi.w	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	f000 8086 	beq.w	80033ee <HAL_TIM_ConfigClockSource+0x172>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d87f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d01a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xa6>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d87b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d050      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x11a>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d877      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d03c      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xfa>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d873      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d058      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d86f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d064      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d86b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d060      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d867      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05c      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d05a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003320:	e062      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003332:	f000 fb2c 	bl	800398e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	609a      	str	r2, [r3, #8]
      break;
 800334e:	e04f      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	f000 fb15 	bl	800398e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003372:	609a      	str	r2, [r3, #8]
      break;
 8003374:	e03c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	461a      	mov	r2, r3
 8003384:	f000 fa8c 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	; 0x50
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fae3 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003394:	e02c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a2:	461a      	mov	r2, r3
 80033a4:	f000 faaa 	bl	80038fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fad3 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 80033b4:	e01c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 fa6c 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fac3 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 faba 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3f      	ldr	r2, [pc, #252]	; (800351c <TIM_Base_SetConfig+0x110>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00f      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3c      	ldr	r2, [pc, #240]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3a      	ldr	r2, [pc, #232]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a39      	ldr	r2, [pc, #228]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2e      	ldr	r2, [pc, #184]	; (800351c <TIM_Base_SetConfig+0x110>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d027      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d023      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <TIM_Base_SetConfig+0x118>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a28      	ldr	r2, [pc, #160]	; (800352c <TIM_Base_SetConfig+0x120>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <TIM_Base_SetConfig+0x128>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <TIM_Base_SetConfig+0x130>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a23      	ldr	r2, [pc, #140]	; (8003540 <TIM_Base_SetConfig+0x134>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a22      	ldr	r2, [pc, #136]	; (8003544 <TIM_Base_SetConfig+0x138>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <TIM_Base_SetConfig+0x110>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40010400 	.word	0x40010400
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	40001800 	.word	0x40001800
 8003540:	40001c00 	.word	0x40001c00
 8003544:	40002000 	.word	0x40002000

08003548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f023 0201 	bic.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0302 	bic.w	r3, r3, #2
 8003590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a20      	ldr	r2, [pc, #128]	; (8003620 <TIM_OC1_SetConfig+0xd8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC1_SetConfig+0x64>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <TIM_OC1_SetConfig+0xdc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10c      	bne.n	80035c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0308 	bic.w	r3, r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <TIM_OC1_SetConfig+0xd8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_OC1_SetConfig+0x8e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <TIM_OC1_SetConfig+0xdc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d111      	bne.n	80035fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40010400 	.word	0x40010400

08003628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0210 	bic.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <TIM_OC2_SetConfig+0xe0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_OC2_SetConfig+0x68>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a20      	ldr	r2, [pc, #128]	; (800370c <TIM_OC2_SetConfig+0xe4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10d      	bne.n	80036ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <TIM_OC2_SetConfig+0xe0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_OC2_SetConfig+0x94>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <TIM_OC2_SetConfig+0xe4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d113      	bne.n	80036e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	40010000 	.word	0x40010000
 800370c:	40010400 	.word	0x40010400

08003710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <TIM_OC3_SetConfig+0xe0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_OC3_SetConfig+0x66>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <TIM_OC3_SetConfig+0xe4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10d      	bne.n	8003792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <TIM_OC3_SetConfig+0xe0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_OC3_SetConfig+0x92>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <TIM_OC3_SetConfig+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d113      	bne.n	80037ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	031b      	lsls	r3, r3, #12
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a11      	ldr	r2, [pc, #68]	; (8003898 <TIM_OC4_SetConfig+0xa0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_OC4_SetConfig+0x68>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <TIM_OC4_SetConfig+0xa4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d109      	bne.n	8003874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40010000 	.word	0x40010000
 800389c:	40010400 	.word	0x40010400

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 030a 	bic.w	r3, r3, #10
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0210 	bic.w	r2, r3, #16
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e05a      	b.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a20      	ldr	r2, [pc, #128]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d01d      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40010400 	.word	0x40010400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40001800 	.word	0x40001800

08003b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e03d      	b.n	8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e042      	b.n	8003c42 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd fa95 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	; 0x24
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fb80 	bl	80042f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d16d      	bne.n	8003d46 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_UART_Transmit+0x2c>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e066      	b.n	8003d48 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c88:	f7fd fb7a 	bl	8001380 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d108      	bne.n	8003cb6 <HAL_UART_Transmit+0x6c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e003      	b.n	8003cbe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cbe:	e02a      	b.n	8003d16 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f980 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e036      	b.n	8003d48 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e007      	b.n	8003d08 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cf      	bne.n	8003cc0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f950 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e006      	b.n	8003d48 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d112      	bne.n	8003d90 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_UART_Receive_DMA+0x26>
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00b      	b.n	8003d92 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f990 	bl	80040ac <UART_Start_Receive_DMA>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b09c      	sub	sp, #112	; 0x70
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d172      	bne.n	8003ed6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	2200      	movs	r2, #0
 8003df4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e16:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e18:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	667b      	str	r3, [r7, #100]	; 0x64
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	663b      	str	r3, [r7, #96]	; 0x60
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d119      	bne.n	8003ed6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0310 	bic.w	r3, r3, #16
 8003eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ec2:	61fa      	str	r2, [r7, #28]
 8003ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003eec:	f7ff ff67 	bl	8003dbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ef0:	e002      	b.n	8003ef8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ef4:	f7fc ff4a 	bl	8000d8c <HAL_UART_RxCpltCallback>
}
 8003ef8:	bf00      	nop
 8003efa:	3770      	adds	r7, #112	; 0x70
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d108      	bne.n	8003f2e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff ff49 	bl	8003dbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f2c:	e002      	b.n	8003f34 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff ff33 	bl	8003d9a <HAL_UART_RxHalfCpltCallback>
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	; 0x21
 8003f6e:	d108      	bne.n	8003f82 <UART_DMAError+0x46>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f000 f92f 	bl	80041e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d108      	bne.n	8003fb6 <UART_DMAError+0x7a>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003fb0:	68b8      	ldr	r0, [r7, #8]
 8003fb2:	f000 f93c 	bl	800422e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f043 0210 	orr.w	r2, r3, #16
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f7ff fef2 	bl	8003dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b090      	sub	sp, #64	; 0x40
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	e050      	b.n	8004084 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d04c      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff0:	f7fd f9c6 	bl	8001380 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d241      	bcs.n	8004084 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004020:	637a      	str	r2, [r7, #52]	; 0x34
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	613b      	str	r3, [r7, #16]
   return(result);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004054:	623a      	str	r2, [r7, #32]
 8004056:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69f9      	ldr	r1, [r7, #28]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	61bb      	str	r3, [r7, #24]
   return(result);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e00f      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	429a      	cmp	r2, r3
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d09f      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3740      	adds	r7, #64	; 0x40
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b098      	sub	sp, #96	; 0x60
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2222      	movs	r2, #34	; 0x22
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	4a3e      	ldr	r2, [pc, #248]	; (80041d4 <UART_Start_Receive_DMA+0x128>)
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	4a3d      	ldr	r2, [pc, #244]	; (80041d8 <UART_Start_Receive_DMA+0x12c>)
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <UART_Start_Receive_DMA+0x130>)
 80040ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	2200      	movs	r2, #0
 80040f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	f7fd fb78 	bl	8001800 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d019      	beq.n	8004162 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800413e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	65bb      	str	r3, [r7, #88]	; 0x58
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800414e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800415c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e5      	bne.n	800412e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	657b      	str	r3, [r7, #84]	; 0x54
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004182:	63ba      	str	r2, [r7, #56]	; 0x38
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e5      	bne.n	8004162 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	617b      	str	r3, [r7, #20]
   return(result);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ac:	653b      	str	r3, [r7, #80]	; 0x50
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041b6:	627a      	str	r2, [r7, #36]	; 0x24
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3760      	adds	r7, #96	; 0x60
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08003dd5 	.word	0x08003dd5
 80041d8:	08003f01 	.word	0x08003f01
 80041dc:	08003f3d 	.word	0x08003f3d

080041e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	61ba      	str	r2, [r7, #24]
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6979      	ldr	r1, [r7, #20]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	613b      	str	r3, [r7, #16]
   return(result);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004224:	bf00      	nop
 8004226:	3724      	adds	r7, #36	; 0x24
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422e:	b480      	push	{r7}
 8004230:	b095      	sub	sp, #84	; 0x54
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004256:	643a      	str	r2, [r7, #64]	; 0x40
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800425c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	61fb      	str	r3, [r7, #28]
   return(result);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800428a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d119      	bne.n	80042da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c6:	61ba      	str	r2, [r7, #24]
 80042c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042e8:	bf00      	nop
 80042ea:	3754      	adds	r7, #84	; 0x54
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4313      	orrs	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004334:	f023 030c 	bic.w	r3, r3, #12
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	430b      	orrs	r3, r1
 8004340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a57      	ldr	r2, [pc, #348]	; (80044bc <UART_SetConfig+0x1c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <UART_SetConfig+0x78>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a56      	ldr	r2, [pc, #344]	; (80044c0 <UART_SetConfig+0x1cc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fe faee 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	e002      	b.n	800437a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe fac8 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8004378:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d14c      	bne.n	800441e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	4a4a      	ldr	r2, [pc, #296]	; (80044c4 <UART_SetConfig+0x1d0>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	0119      	lsls	r1, r3, #4
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ba:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <UART_SetConfig+0x1d0>)
 80043bc:	fba3 0302 	umull	r0, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	2064      	movs	r0, #100	; 0x64
 80043c4:	fb00 f303 	mul.w	r3, r0, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	3332      	adds	r3, #50	; 0x32
 80043ce:	4a3d      	ldr	r2, [pc, #244]	; (80044c4 <UART_SetConfig+0x1d0>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043dc:	4419      	add	r1, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <UART_SetConfig+0x1d0>)
 80043f6:	fba3 0302 	umull	r0, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2064      	movs	r0, #100	; 0x64
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a2e      	ldr	r2, [pc, #184]	; (80044c4 <UART_SetConfig+0x1d0>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 0207 	and.w	r2, r3, #7
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	440a      	add	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800441c:	e04a      	b.n	80044b4 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <UART_SetConfig+0x1d0>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	0119      	lsls	r1, r3, #4
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f2f3 	udiv	r2, r2, r3
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <UART_SetConfig+0x1d0>)
 8004456:	fba3 0302 	umull	r0, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2064      	movs	r0, #100	; 0x64
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <UART_SetConfig+0x1d0>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004474:	4419      	add	r1, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009a      	lsls	r2, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fbb2 f2f3 	udiv	r2, r2, r3
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <UART_SetConfig+0x1d0>)
 800448e:	fba3 0302 	umull	r0, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2064      	movs	r0, #100	; 0x64
 8004496:	fb00 f303 	mul.w	r3, r0, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <UART_SetConfig+0x1d0>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	440a      	add	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <memset>:
 80044c8:	4603      	mov	r3, r0
 80044ca:	4402      	add	r2, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <strncmp>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	b16a      	cbz	r2, 80044f8 <strncmp+0x20>
 80044dc:	3901      	subs	r1, #1
 80044de:	1884      	adds	r4, r0, r2
 80044e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d103      	bne.n	80044f4 <strncmp+0x1c>
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d001      	beq.n	80044f4 <strncmp+0x1c>
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d1f5      	bne.n	80044e0 <strncmp+0x8>
 80044f4:	1ad0      	subs	r0, r2, r3
 80044f6:	bd10      	pop	{r4, pc}
 80044f8:	4610      	mov	r0, r2
 80044fa:	e7fc      	b.n	80044f6 <strncmp+0x1e>

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	2600      	movs	r6, #0
 8004500:	4d0c      	ldr	r5, [pc, #48]	; (8004534 <__libc_init_array+0x38>)
 8004502:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	f000 f81a 	bl	8004544 <_init>
 8004510:	2600      	movs	r6, #0
 8004512:	4d0a      	ldr	r5, [pc, #40]	; (800453c <__libc_init_array+0x40>)
 8004514:	4c0a      	ldr	r4, [pc, #40]	; (8004540 <__libc_init_array+0x44>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004634 	.word	0x08004634
 8004538:	08004634 	.word	0x08004634
 800453c:	08004634 	.word	0x08004634
 8004540:	08004638 	.word	0x08004638

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
