
actuation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b4  080040b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080040c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080040c8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f527  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002393  00000000  00000000  0002f59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3c  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208d2  00000000  00000000  000332cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ca6  00000000  00000000  00053b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88d8  00000000  00000000  00065844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d2c  00000000  00000000  0012e11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00131e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800407c 	.word	0x0800407c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	0800407c 	.word	0x0800407c

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	468e      	mov	lr, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14c      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d967      	bls.n	80002ee <__udivmoddi4+0xe6>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b153      	cbz	r3, 800023a <__udivmoddi4+0x32>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000230:	fa20 f202 	lsr.w	r2, r0, r2
 8000234:	ea42 0e0e 	orr.w	lr, r2, lr
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fbbe f1f7 	udiv	r1, lr, r7
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fb07 ee11 	mls	lr, r7, r1, lr
 800024a:	fb01 f005 	mul.w	r0, r1, r5
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x66>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000260:	f080 8119 	bcs.w	8000496 <__udivmoddi4+0x28e>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8116 	bls.w	8000496 <__udivmoddi4+0x28e>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	fbb2 f0f7 	udiv	r0, r2, r7
 8000274:	fb07 2210 	mls	r2, r7, r0, r2
 8000278:	fb00 f505 	mul.w	r5, r0, r5
 800027c:	b2a4      	uxth	r4, r4
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8104 	bcs.w	800049a <__udivmoddi4+0x292>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8101 	bls.w	800049a <__udivmoddi4+0x292>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	1b64      	subs	r4, r4, r5
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xc0>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ea 	beq.w	8000490 <__udivmoddi4+0x288>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d148      	bne.n	8000362 <__udivmoddi4+0x15a>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xd2>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4696      	mov	lr, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e8:	e9c6 4e00 	strd	r4, lr, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa6>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xea>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 808e 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fc:	1a88      	subs	r0, r1, r2
 80002fe:	2101      	movs	r1, #1
 8000300:	0c17      	lsrs	r7, r2, #16
 8000302:	fa1f fe82 	uxth.w	lr, r2
 8000306:	fbb0 f5f7 	udiv	r5, r0, r7
 800030a:	fb07 0015 	mls	r0, r7, r5, r0
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000314:	fb0e f005 	mul.w	r0, lr, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x126>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f105 38ff 	add.w	r8, r5, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x124>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 80cc 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032c:	4645      	mov	r5, r8
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	45a6      	cmp	lr, r4
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x150>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f100 32ff 	add.w	r2, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14e>
 8000350:	45a6      	cmp	lr, r4
 8000352:	f200 80b4 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000356:	4610      	mov	r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000360:	e7a0      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000362:	f1c1 0720 	rsb	r7, r1, #32
 8000366:	408b      	lsls	r3, r1
 8000368:	fa22 fc07 	lsr.w	ip, r2, r7
 800036c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000370:	fa25 fa07 	lsr.w	sl, r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	fbba f8f9 	udiv	r8, sl, r9
 800037c:	408d      	lsls	r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	fb09 aa18 	mls	sl, r9, r8, sl
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	432b      	orrs	r3, r5
 800038c:	fa00 f501 	lsl.w	r5, r0, r1
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	0c1c      	lsrs	r4, r3, #16
 8000396:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800039a:	42a0      	cmp	r0, r4
 800039c:	fa02 f201 	lsl.w	r2, r2, r1
 80003a0:	d90b      	bls.n	80003ba <__udivmoddi4+0x1b2>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f108 3aff 	add.w	sl, r8, #4294967295
 80003aa:	f080 8086 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ae:	42a0      	cmp	r0, r4
 80003b0:	f240 8083 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b4:	f1a8 0802 	sub.w	r8, r8, #2
 80003b8:	4464      	add	r4, ip
 80003ba:	1a24      	subs	r4, r4, r0
 80003bc:	b298      	uxth	r0, r3
 80003be:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c2:	fb09 4413 	mls	r4, r9, r3, r4
 80003c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80003ca:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x1dc>
 80003d2:	eb1c 0404 	adds.w	r4, ip, r4
 80003d6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003da:	d26a      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d968      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003e0:	3b02      	subs	r3, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e8:	fba0 9302 	umull	r9, r3, r0, r2
 80003ec:	eba4 040e 	sub.w	r4, r4, lr
 80003f0:	429c      	cmp	r4, r3
 80003f2:	46c8      	mov	r8, r9
 80003f4:	469e      	mov	lr, r3
 80003f6:	d354      	bcc.n	80004a2 <__udivmoddi4+0x29a>
 80003f8:	d051      	beq.n	800049e <__udivmoddi4+0x296>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d067      	beq.n	80004ce <__udivmoddi4+0x2c6>
 80003fe:	ebb5 0308 	subs.w	r3, r5, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	40cb      	lsrs	r3, r1
 8000408:	fa04 f707 	lsl.w	r7, r4, r7
 800040c:	431f      	orrs	r7, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	2100      	movs	r1, #0
 8000416:	e74a      	b.n	80002ae <__udivmoddi4+0xa6>
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	f1c3 0020 	rsb	r0, r3, #32
 8000420:	40c1      	lsrs	r1, r0
 8000422:	409d      	lsls	r5, r3
 8000424:	fa24 f000 	lsr.w	r0, r4, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	4328      	orrs	r0, r5
 800042e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000432:	fb07 1115 	mls	r1, r7, r5, r1
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	0c02      	lsrs	r2, r0, #16
 800043c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000440:	fb05 f10e 	mul.w	r1, r5, lr
 8000444:	4291      	cmp	r1, r2
 8000446:	fa04 f403 	lsl.w	r4, r4, r3
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x256>
 800044c:	eb1c 0202 	adds.w	r2, ip, r2
 8000450:	f105 38ff 	add.w	r8, r5, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	4291      	cmp	r1, r2
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3d02      	subs	r5, #2
 800045c:	4462      	add	r2, ip
 800045e:	1a52      	subs	r2, r2, r1
 8000460:	fbb2 f1f7 	udiv	r1, r2, r7
 8000464:	fb07 2211 	mls	r2, r7, r1, r2
 8000468:	b280      	uxth	r0, r0
 800046a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800046e:	fb01 f20e 	mul.w	r2, r1, lr
 8000472:	4282      	cmp	r2, r0
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x280>
 8000476:	eb1c 0000 	adds.w	r0, ip, r0
 800047a:	f101 38ff 	add.w	r8, r1, #4294967295
 800047e:	d216      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 8000480:	4282      	cmp	r2, r0
 8000482:	d914      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000484:	3902      	subs	r1, #2
 8000486:	4460      	add	r0, ip
 8000488:	1a80      	subs	r0, r0, r2
 800048a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048e:	e73a      	b.n	8000306 <__udivmoddi4+0xfe>
 8000490:	4631      	mov	r1, r6
 8000492:	4630      	mov	r0, r6
 8000494:	e70b      	b.n	80002ae <__udivmoddi4+0xa6>
 8000496:	4671      	mov	r1, lr
 8000498:	e6e9      	b.n	800026e <__udivmoddi4+0x66>
 800049a:	4610      	mov	r0, r2
 800049c:	e6fe      	b.n	800029c <__udivmoddi4+0x94>
 800049e:	454d      	cmp	r5, r9
 80004a0:	d2ab      	bcs.n	80003fa <__udivmoddi4+0x1f2>
 80004a2:	ebb9 0802 	subs.w	r8, r9, r2
 80004a6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a5      	b.n	80003fa <__udivmoddi4+0x1f2>
 80004ae:	4641      	mov	r1, r8
 80004b0:	e7ea      	b.n	8000488 <__udivmoddi4+0x280>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1dc>
 80004b6:	4645      	mov	r5, r8
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	46d0      	mov	r8, sl
 80004bc:	e77d      	b.n	80003ba <__udivmoddi4+0x1b2>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e749      	b.n	8000358 <__udivmoddi4+0x150>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e731      	b.n	800032e <__udivmoddi4+0x126>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xdc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e6ed      	b.n	80002ae <__udivmoddi4+0xa6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd28 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f83e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fa14 	bl	8000910 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e8:	f000 f8ce 	bl	8000688 <MX_RTC_Init>
  MX_TIM1_Init();
 80004ec:	f000 f8f2 	bl	80006d4 <MX_TIM1_Init>
  MX_TIM12_Init();
 80004f0:	f000 f97a 	bl	80007e8 <MX_TIM12_Init>
  MX_DAC_Init();
 80004f4:	f000 f894 	bl	8000620 <MX_DAC_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f9e0 	bl	80008bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x70>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68da      	ldr	r2, [r3, #12]
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x70>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f042 0220 	orr.w	r2, r2, #32
 800050a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800050c:	210c      	movs	r1, #12
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <main+0x74>)
 8000510:	f002 f830 	bl	8002574 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x78>)
 8000518:	f002 f82c 	bl	8002574 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim1.Instance->CNT = 0;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <main+0x74>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  htim12.Instance->CNT = 0;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x78>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (msgReady) {
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x7c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0fb      	beq.n	800052c <main+0x54>
      HAL_UART_Transmit(&huart1, msg, msgLen, TIMEOUT);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <main+0x80>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	b29a      	uxth	r2, r3
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	4907      	ldr	r1, [pc, #28]	; (800055c <main+0x84>)
 800053e:	4802      	ldr	r0, [pc, #8]	; (8000548 <main+0x70>)
 8000540:	f002 fee3 	bl	800330a <HAL_UART_Transmit>
    if (msgReady) {
 8000544:	e7f2      	b.n	800052c <main+0x54>
 8000546:	bf00      	nop
 8000548:	200000ec 	.word	0x200000ec
 800054c:	2000005c 	.word	0x2000005c
 8000550:	200000a4 	.word	0x200000a4
 8000554:	20000170 	.word	0x20000170
 8000558:	2000016c 	.word	0x2000016c
 800055c:	20000158 	.word	0x20000158

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	; 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fd50 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000592:	230a      	movs	r3, #10
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2300      	movs	r3, #0
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 80005aa:	230d      	movs	r3, #13
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 80005ae:	23c3      	movs	r3, #195	; 0xc3
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f8f2 	bl	80017a8 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ca:	f000 facd 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fb2f 	bl	8001c50 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f8:	f000 fab6 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005fc:	2304      	movs	r3, #4
 80005fe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fd21 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000614:	f000 faa8 	bl	8000b68 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	; 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_DAC_Init+0x60>)
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <MX_DAC_Init+0x64>)
 8000632:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <MX_DAC_Init+0x60>)
 8000636:	f000 fdf6 	bl	8001226 <HAL_DAC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000640:	f000 fa92 	bl	8000b68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_DAC_Init+0x60>)
 8000654:	f000 fe09 	bl	800126a <HAL_DAC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800065e:	f000 fa83 	bl	8000b68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2210      	movs	r2, #16
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_DAC_Init+0x60>)
 800066a:	f000 fdfe 	bl	800126a <HAL_DAC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000674:	f000 fa78 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40007400 	.word	0x40007400

08000688 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_RTC_Init+0x44>)
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <MX_RTC_Init+0x48>)
 8000690:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_RTC_Init+0x44>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_RTC_Init+0x44>)
 800069a:	227f      	movs	r2, #127	; 0x7f
 800069c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_RTC_Init+0x44>)
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_RTC_Init+0x44>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_RTC_Init+0x44>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_RTC_Init+0x44>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_RTC_Init+0x44>)
 80006b8:	f001 fdc0 	bl	800223c <HAL_RTC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006c2:	f000 fa51 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000003c 	.word	0x2000003c
 80006d0:	40002800 	.word	0x40002800

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b092      	sub	sp, #72	; 0x48
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fc88 	bl	8004014 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000706:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <MX_TIM1_Init+0x110>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800070a:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <MX_TIM1_Init+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000718:	2204      	movs	r2, #4
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_TIM1_Init+0x10c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_TIM1_Init+0x10c>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800072e:	482c      	ldr	r0, [pc, #176]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000730:	f001 fed0 	bl	80024d4 <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800073a:	f000 fa15 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800073e:	2108      	movs	r1, #8
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000742:	f001 ffdf 	bl	8002704 <HAL_TIM_OnePulse_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800074c:	f000 fa0c 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800075c:	4619      	mov	r1, r3
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000760:	f002 fcb8 	bl	80030d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800076a:	f000 f9fd 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800076e:	2370      	movs	r3, #112	; 0x70
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	220c      	movs	r2, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_TIM1_Init+0x10c>)
 8000790:	f002 f812 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800079a:	f000 f9e5 	bl	8000b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM1_Init+0x10c>)
 80007c2:	f002 fd01 	bl	80031c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007cc:	f000 f9cc 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM1_Init+0x10c>)
 80007d2:	f000 fa91 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 80007d6:	bf00      	nop
 80007d8:	3748      	adds	r7, #72	; 0x48
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000005c 	.word	0x2000005c
 80007e4:	40010000 	.word	0x40010000

080007e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000810:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <MX_TIM12_Init+0xd0>)
 8000812:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_TIM12_Init+0xcc>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4;
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000822:	2204      	movs	r2, #4
 8000824:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_TIM12_Init+0xcc>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000834:	f001 fdff 	bl	8002436 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800083e:	f000 f993 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4819      	ldr	r0, [pc, #100]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000850:	f002 f874 	bl	800293c <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800085a:	f000 f985 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800085e:	4815      	ldr	r0, [pc, #84]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000860:	f001 fe38 	bl	80024d4 <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 800086a:	f000 f97d 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK)
 800086e:	2108      	movs	r1, #8
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000872:	f001 ff47 	bl	8002704 <HAL_TIM_OnePulse_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM12_Init+0x98>
  {
    Error_Handler();
 800087c:	f000 f974 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000880:	2370      	movs	r3, #112	; 0x70
 8000882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM12_Init+0xcc>)
 8000898:	f001 ff8e 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 80008a2:	f000 f961 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM12_Init+0xcc>)
 80008a8:	f000 fa26 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000a4 	.word	0x200000a4
 80008b8:	40001800 	.word	0x40001800

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART1_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f002 fcb9 	bl	800326a <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f933 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000ec 	.word	0x200000ec
 800090c:	40011000 	.word	0x40011000

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a5b      	ldr	r2, [pc, #364]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x18c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_GPIO_Init+0x18c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x18c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a38      	ldr	r2, [pc, #224]	; (8000a9c <MX_GPIO_Init+0x18c>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <MX_GPIO_Init+0x18c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009d6:	f000 fecf 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	4830      	ldr	r0, [pc, #192]	; (8000aa4 <MX_GPIO_Init+0x194>)
 80009e2:	f000 fec9 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x198>)
 80009ee:	f000 fec3 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	482d      	ldr	r0, [pc, #180]	; (8000aac <MX_GPIO_Init+0x19c>)
 80009f8:	f000 febe 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000a16:	f000 fd11 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_GPIO_Init+0x194>)
 8000a34:	f000 fd02 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a38:	23c0      	movs	r3, #192	; 0xc0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000a54:	f000 fcf2 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a72:	f000 fce3 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_GPIO_Init+0x19c>)
 8000a8e:	f000 fcd5 	bl	800143c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <HAL_UART_RxCpltCallback>:
  htim->Instance->CNT = 0;
}

static void processMessage(const uint8_t *, uint16_t){}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  switch (c) {
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_UART_RxCpltCallback+0x98>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b23      	cmp	r3, #35	; 0x23
 8000ac4:	d002      	beq.n	8000acc <HAL_UART_RxCpltCallback+0x18>
 8000ac6:	2b3b      	cmp	r3, #59	; 0x3b
 8000ac8:	d015      	beq.n	8000af6 <HAL_UART_RxCpltCallback+0x42>
 8000aca:	e02f      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x78>
  case '#':
    buffer[msgLen = i] = msg[i] = '\0';
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <HAL_UART_RxCpltCallback+0xa0>)
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	54d1      	strb	r1, [r2, r3]
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_UART_RxCpltCallback+0xa4>)
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_UART_RxCpltCallback+0xa8>)
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	54d1      	strb	r1, [r2, r3]
    strcpy((char *)msg, (char *)buffer);
 8000ae6:	491d      	ldr	r1, [pc, #116]	; (8000b5c <HAL_UART_RxCpltCallback+0xa8>)
 8000ae8:	481a      	ldr	r0, [pc, #104]	; (8000b54 <HAL_UART_RxCpltCallback+0xa0>)
 8000aea:	f003 fabf 	bl	800406c <strcpy>
    i = 0;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
    break;
 8000af4:	e025      	b.n	8000b42 <HAL_UART_RxCpltCallback+0x8e>
  case ';':
    buffer[i] = '\0';
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <HAL_UART_RxCpltCallback+0xa8>)
 8000afc:	2100      	movs	r1, #0
 8000afe:	54d1      	strb	r1, [r2, r3]
    if (strcmp((char *)msg, (char *)buffer) || msgReady) gameState = DISCONNECTED;
 8000b00:	4916      	ldr	r1, [pc, #88]	; (8000b5c <HAL_UART_RxCpltCallback+0xa8>)
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <HAL_UART_RxCpltCallback+0xa0>)
 8000b04:	f7ff fb5e 	bl	80001c4 <strcmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d103      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x62>
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_RxCpltCallback+0xac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_UART_RxCpltCallback+0x6a>
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_UART_RxCpltCallback+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e002      	b.n	8000b24 <HAL_UART_RxCpltCallback+0x70>
    else msgReady = 1;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_UART_RxCpltCallback+0xac>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
    i = 0;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
    break;
 8000b2a:	e00a      	b.n	8000b42 <HAL_UART_RxCpltCallback+0x8e>
  default:
    buffer[i++] = c;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	4907      	ldr	r1, [pc, #28]	; (8000b50 <HAL_UART_RxCpltCallback+0x9c>)
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_UART_RxCpltCallback+0x98>)
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	b2d1      	uxtb	r1, r2
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_UART_RxCpltCallback+0xa8>)
 8000b3e:	54d1      	strb	r1, [r2, r3]
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000134 	.word	0x20000134
 8000b50:	20000168 	.word	0x20000168
 8000b54:	20000158 	.word	0x20000158
 8000b58:	2000016c 	.word	0x2000016c
 8000b5c:	20000138 	.word	0x20000138
 8000b60:	20000170 	.word	0x20000170
 8000b64:	20000174 	.word	0x20000174

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
   */
  __disable_irq();
  //  while (1) {
  //  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x48>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x48>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x48>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x48>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_MspInit+0x48>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_MspInit+0x48>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_DAC_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d127      	bne.n	8000c36 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_DAC_MspInit+0x80>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c1e:	2330      	movs	r3, #48	; 0x30
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_DAC_MspInit+0x84>)
 8000c32:	f000 fc03 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40007400 	.word	0x40007400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_RTC_MspInit+0x24>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d102      	bne.n	8000c64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_RTC_MspInit+0x28>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40002800 	.word	0x40002800
 8000c74:	42470e3c 	.word	0x42470e3c

08000c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x38>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10d      	bne.n	8000ca6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x38>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10d      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40001800 	.word	0x40001800
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_TIM_MspPostInit+0xb4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d11f      	bne.n	8000d5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4818      	ldr	r0, [pc, #96]	; (8000db4 <HAL_TIM_MspPostInit+0xbc>)
 8000d54:	f000 fb72 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000d58:	e023      	b.n	8000da2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_TIM_MspPostInit+0xc0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d11e      	bne.n	8000da2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_TIM_MspPostInit+0xb8>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d92:	2309      	movs	r3, #9
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <HAL_TIM_MspPostInit+0xc4>)
 8000d9e:	f000 fb4d 	bl	800143c <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40001800 	.word	0x40001800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fb01 	bl	800143c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2025      	movs	r0, #37	; 0x25
 8000e40:	f000 f9bb 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e44:	2025      	movs	r0, #37	; 0x25
 8000e46:	f000 f9d4 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f895 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <USART1_IRQHandler+0x18>)
 8000eb6:	f002 fad1 	bl	800345c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, &c, 1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4903      	ldr	r1, [pc, #12]	; (8000ecc <USART1_IRQHandler+0x1c>)
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USART1_IRQHandler+0x18>)
 8000ec0:	f002 faa6 	bl	8003410 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000ec 	.word	0x200000ec
 8000ecc:	20000134 	.word	0x20000134

08000ed0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000ee0:	f7ff fff6 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f003 f88b 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fae3 	bl	80004d8 <main>
  bx  lr
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f20:	080040bc 	.word	0x080040bc
  ldr r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f28:	2000017c 	.word	0x2000017c

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f923 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fe08 	bl	8000b78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f93b 	bl	800120e <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f903 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000178 	.word	0x20000178

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000178 	.word	0x20000178

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <__NVIC_EnableIRQ+0x34>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff90 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff2d 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff42 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff90 	bl	80010fc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5f 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff35 	bl	8001070 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa2 	bl	8001160 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e014      	b.n	8001262 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fcbb 	bl	8000bc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800126a:	b480      	push	{r7}
 800126c:	b089      	sub	sp, #36	; 0x24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HAL_DAC_ConfigChannel+0x1c>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e042      	b.n	8001310 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_DAC_ConfigChannel+0x2c>
 8001292:	2302      	movs	r3, #2
 8001294:	e03c      	b.n	8001310 <HAL_DAC_ConfigChannel+0xa6>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2202      	movs	r2, #2
 80012a0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	22c0      	movs	r2, #192	; 0xc0
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43da      	mvns	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800130e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3724      	adds	r7, #36	; 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff fe66 	bl	8000ff8 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d008      	beq.n	800134c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e052      	b.n	80013f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0216 	bic.w	r2, r2, #22
 800135a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <HAL_DMA_Abort+0x62>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0208 	bic.w	r2, r2, #8
 800138a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139c:	e013      	b.n	80013c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139e:	f7ff fe2b 	bl	8000ff8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d90c      	bls.n	80013c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e015      	b.n	80013f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e4      	bne.n	800139e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d004      	beq.n	8001418 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e00c      	b.n	8001432 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2205      	movs	r2, #5
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e16f      	b.n	800172c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8161 	beq.w	8001726 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80bb 	beq.w	8001726 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	4a63      	ldr	r2, [pc, #396]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	6453      	str	r3, [r2, #68]	; 0x44
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015cc:	4a5f      	ldr	r2, [pc, #380]	; (800174c <HAL_GPIO_Init+0x310>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a57      	ldr	r2, [pc, #348]	; (8001750 <HAL_GPIO_Init+0x314>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d031      	beq.n	800165c <HAL_GPIO_Init+0x220>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a56      	ldr	r2, [pc, #344]	; (8001754 <HAL_GPIO_Init+0x318>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d02b      	beq.n	8001658 <HAL_GPIO_Init+0x21c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a55      	ldr	r2, [pc, #340]	; (8001758 <HAL_GPIO_Init+0x31c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d025      	beq.n	8001654 <HAL_GPIO_Init+0x218>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_GPIO_Init+0x320>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d01f      	beq.n	8001650 <HAL_GPIO_Init+0x214>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a53      	ldr	r2, [pc, #332]	; (8001760 <HAL_GPIO_Init+0x324>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d019      	beq.n	800164c <HAL_GPIO_Init+0x210>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a52      	ldr	r2, [pc, #328]	; (8001764 <HAL_GPIO_Init+0x328>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d013      	beq.n	8001648 <HAL_GPIO_Init+0x20c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a51      	ldr	r2, [pc, #324]	; (8001768 <HAL_GPIO_Init+0x32c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d00d      	beq.n	8001644 <HAL_GPIO_Init+0x208>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_GPIO_Init+0x330>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d007      	beq.n	8001640 <HAL_GPIO_Init+0x204>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_GPIO_Init+0x200>
 8001638:	2308      	movs	r3, #8
 800163a:	e010      	b.n	800165e <HAL_GPIO_Init+0x222>
 800163c:	2309      	movs	r3, #9
 800163e:	e00e      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001640:	2307      	movs	r3, #7
 8001642:	e00c      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001644:	2306      	movs	r3, #6
 8001646:	e00a      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001648:	2305      	movs	r3, #5
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0x222>
 800164c:	2304      	movs	r3, #4
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001650:	2303      	movs	r3, #3
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x222>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x222>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	461a      	mov	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001670:	4936      	ldr	r1, [pc, #216]	; (800174c <HAL_GPIO_Init+0x310>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_GPIO_Init+0x338>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016cc:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_GPIO_Init+0x338>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_GPIO_Init+0x338>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	f47f ae88 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40021400 	.word	0x40021400
 8001768:	40021800 	.word	0x40021800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40022000 	.word	0x40022000
 8001774:	40013c00 	.word	0x40013c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e23b      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d050      	beq.n	8001868 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d00c      	beq.n	80017ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d2:	4b9b      	ldr	r3, [pc, #620]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d112      	bne.n	8001804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017de:	4b98      	ldr	r3, [pc, #608]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ea:	d10b      	bne.n	8001804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	4b94      	ldr	r3, [pc, #592]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d036      	beq.n	8001866 <HAL_RCC_OscConfig+0xbe>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d132      	bne.n	8001866 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e216      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <HAL_RCC_OscConfig+0x29c>)
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fbef 	bl	8000ff8 <HAL_GetTick>
 800181a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff fbeb 	bl	8000ff8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e200      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001830:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x76>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fbdb 	bl	8000ff8 <HAL_GetTick>
 8001842:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001846:	f7ff fbd7 	bl	8000ff8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1ec      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001858:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x9e>
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d077      	beq.n	8001964 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001874:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001880:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001888:	2b08      	cmp	r3, #8
 800188a:	d126      	bne.n	80018da <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188c:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d120      	bne.n	80018da <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	4b69      	ldr	r3, [pc, #420]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e1c0      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	21f8      	movs	r1, #248	; 0xf8
 80018be:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	69b9      	ldr	r1, [r7, #24]
 80018c2:	fa91 f1a1 	rbit	r1, r1
 80018c6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	fab1 f181 	clz	r1, r1
 80018ce:	b2c9      	uxtb	r1, r1
 80018d0:	408b      	lsls	r3, r1
 80018d2:	495b      	ldr	r1, [pc, #364]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d8:	e044      	b.n	8001964 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02a      	beq.n	8001938 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_OscConfig+0x2a0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb86 	bl	8000ff8 <HAL_GetTick>
 80018ec:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fb82 	bl	8000ff8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e197      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	21f8      	movs	r1, #248	; 0xf8
 800191c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	fa91 f1a1 	rbit	r1, r1
 8001924:	60f9      	str	r1, [r7, #12]
  return result;
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	fab1 f181 	clz	r1, r1
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	408b      	lsls	r3, r1
 8001930:	4943      	ldr	r1, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x2a0>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb5b 	bl	8000ff8 <HAL_GetTick>
 8001942:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fb57 	bl	8000ff8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e16c      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d030      	beq.n	80019d2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_OscConfig+0x2a4>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb3b 	bl	8000ff8 <HAL_GetTick>
 8001982:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fb37 	bl	8000ff8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e14c      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x1de>
 80019a4:	e015      	b.n	80019d2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_OscConfig+0x2a4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fb24 	bl	8000ff8 <HAL_GetTick>
 80019b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb20 	bl	8000ff8 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e135      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d110      	bne.n	8001a14 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_RCC_OscConfig+0x2a8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_RCC_OscConfig+0x2a8>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x2a8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d122      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x2a8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_RCC_OscConfig+0x2a8>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fade 	bl	8000ff8 <HAL_GetTick>
 8001a3c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	e012      	b.n	8001a66 <HAL_RCC_OscConfig+0x2be>
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40023802 	.word	0x40023802
 8001a48:	42470000 	.word	0x42470000
 8001a4c:	42470e80 	.word	0x42470e80
 8001a50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7ff fad0 	bl	8000ff8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0e5      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x494>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x498>)
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d015      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fab8 	bl	8000ff8 <HAL_GetTick>
 8001a88:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fab4 	bl	8000ff8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0c7      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ee      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2e4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff faa2 	bl	8000ff8 <HAL_GetTick>
 8001ab4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fa9e 	bl	8000ff8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0b1      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ee      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d105      	bne.n	8001aee <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 809c 	beq.w	8001c30 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af8:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d061      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d146      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCC_OscConfig+0x4a0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa71 	bl	8000ff8 <HAL_GetTick>
 8001b16:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fa6d 	bl	8000ff8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e082      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x4a4>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	69d1      	ldr	r1, [r2, #28]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6a12      	ldr	r2, [r2, #32]
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4e:	0192      	lsls	r2, r2, #6
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b56:	0612      	lsls	r2, r2, #24
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b5e:	0852      	lsrs	r2, r2, #1
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_RCC_OscConfig+0x4a0>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa41 	bl	8000ff8 <HAL_GetTick>
 8001b76:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fa3d 	bl	8000ff8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e052      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3d2>
 8001b98:	e04a      	b.n	8001c30 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x4a0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa2a 	bl	8000ff8 <HAL_GetTick>
 8001ba4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff fa26 	bl	8000ff8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e03b      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x400>
 8001bc6:	e033      	b.n	8001c30 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e02e      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x49c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d121      	bne.n	8001c2c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d11a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c02:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d111      	bne.n	8001c2c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	3b01      	subs	r3, #1
 8001c16:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	40023870 	.word	0x40023870
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470060 	.word	0x42470060
 8001c4c:	f0bc8000 	.word	0xf0bc8000

08001c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0d2      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d90c      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0be      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4950      	ldr	r1, [pc, #320]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e085      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e079      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e071      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4939      	ldr	r1, [pc, #228]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f95e 	bl	8000ff8 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f95a 	bl	8000ff8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e059      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e03c      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	491b      	ldr	r1, [pc, #108]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4913      	ldr	r1, [pc, #76]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001dce:	f000 f82b 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	22f0      	movs	r2, #240	; 0xf0
 8001dde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	60fa      	str	r2, [r7, #12]
  return result;
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	40d3      	lsrs	r3, r2
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x1cc>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1d0>)
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1d4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f8b6 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08004094 	.word	0x08004094
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e2c:	b090      	sub	sp, #64	; 0x40
 8001e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
 8001e34:	2300      	movs	r3, #0
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e38:	2300      	movs	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d00d      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x40>
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	f200 80a2 	bhi.w	8001f96 <HAL_RCC_GetSysClockFreq+0x16e>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x34>
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e5a:	e09c      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e60:	e09c      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e72:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d027      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	2200      	movs	r2, #0
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	627a      	str	r2, [r7, #36]	; 0x24
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e90:	2100      	movs	r1, #0
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e94:	fb03 f201 	mul.w	r2, r3, r1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	fb00 f303 	mul.w	r3, r0, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ea2:	fba0 2102 	umull	r2, r1, r0, r2
 8001ea6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001ea8:	62ba      	str	r2, [r7, #40]	; 0x28
 8001eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eac:	4413      	add	r3, r2
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	61fa      	str	r2, [r7, #28]
 8001eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ebc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ec0:	f7fe f98a 	bl	80001d8 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ecc:	e055      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	617a      	str	r2, [r7, #20]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ee0:	f04f 0b00 	mov.w	fp, #0
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	465b      	mov	r3, fp
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0159      	lsls	r1, r3, #5
 8001ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef6:	0150      	lsls	r0, r2, #5
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	ebb2 080a 	subs.w	r8, r2, sl
 8001f00:	eb63 090b 	sbc.w	r9, r3, fp
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f10:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f14:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f18:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1c:	eb63 0509 	sbc.w	r5, r3, r9
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	00eb      	lsls	r3, r5, #3
 8001f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2e:	00e2      	lsls	r2, r4, #3
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	eb14 030a 	adds.w	r3, r4, sl
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	eb45 030b 	adc.w	r3, r5, fp
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	028b      	lsls	r3, r1, #10
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	4604      	mov	r4, r0
 8001f56:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	028a      	lsls	r2, r1, #10
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	2200      	movs	r2, #0
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	60fa      	str	r2, [r7, #12]
 8001f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6e:	f7fe f933 	bl	80001d8 <__aeabi_uldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4613      	mov	r3, r2
 8001f78:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	3301      	adds	r3, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f94:	e002      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x184>)
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3740      	adds	r7, #64	; 0x40
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	017d7840 	.word	0x017d7840

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001fce:	f7ff fff1 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001fdc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001fe0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	603a      	str	r2, [r7, #0]
  return result;
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	40d3      	lsrs	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	080040a4 	.word	0x080040a4

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002012:	f7ff ffcf 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002020:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002024:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	603a      	str	r2, [r7, #0]
  return result;
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK2Freq+0x40>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	080040a4 	.word	0x080040a4

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8002070:	2b08      	cmp	r3, #8
 8002072:	d14c      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002074:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800207a:	f7fe ffbd 	bl	8000ff8 <HAL_GetTick>
 800207e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002082:	f7fe ffb9 	bl	8000ff8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0c7      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80020a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	fa92 f2a2 	rbit	r2, r2
 80020b0:	613a      	str	r2, [r7, #16]
  return result;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	fa03 f202 	lsl.w	r2, r3, r2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80020c6:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	69f9      	ldr	r1, [r7, #28]
 80020ca:	fa91 f1a1 	rbit	r1, r1
 80020ce:	61b9      	str	r1, [r7, #24]
  return result;
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	fab1 f181 	clz	r1, r1
 80020d6:	b2c9      	uxtb	r1, r1
 80020d8:	408b      	lsls	r3, r1
 80020da:	4955      	ldr	r1, [pc, #340]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e2:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020e8:	f7fe ff86 	bl	8000ff8 <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020f0:	f7fe ff82 	bl	8000ff8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e090      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002102:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8083 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4a42      	ldr	r2, [pc, #264]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	; 0x40
 800212c:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002138:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a3d      	ldr	r2, [pc, #244]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe ff58 	bl	8000ff8 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe ff54 	bl	8000ff8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e062      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d02f      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	6a3a      	ldr	r2, [r7, #32]
 8002184:	429a      	cmp	r2, r3
 8002186:	d028      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002190:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d114      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe ff22 	bl	8000ff8 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe ff1e 	bl	8000ff8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e02a      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021e6:	d10d      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
 8002202:	e005      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800220e:	6093      	str	r3, [r2, #8]
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002212:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221e:	4313      	orrs	r3, r2
 8002220:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	42470068 	.word	0x42470068
 8002230:	40023800 	.word	0x40023800
 8002234:	40007000 	.word	0x40007000
 8002238:	42470e40 	.word	0x42470e40

0800223c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7f5b      	ldrb	r3, [r3, #29]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fcf2 	bl	8000c4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b10      	cmp	r3, #16
 800227a:	d055      	beq.n	8002328 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	22ca      	movs	r2, #202	; 0xca
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2253      	movs	r2, #83	; 0x53
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f87d 	bl	800238c <RTC_EnterInitMode>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d12c      	bne.n	80022f6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80022aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	041a      	lsls	r2, r3, #16
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f884 	bl	80023fa <RTC_ExitInitMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
 8002326:	e001      	b.n	800232c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f643 7257 	movw	r2, #16215	; 0x3f57
 8002356:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002358:	f7fe fe4e 	bl	8000ff8 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800235e:	e009      	b.n	8002374 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002360:	f7fe fe4a 	bl	8000ff8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800236e:	d901      	bls.n	8002374 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e007      	b.n	8002384 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ee      	beq.n	8002360 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d122      	bne.n	80023f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ba:	f7fe fe1d 	bl	8000ff8 <HAL_GetTick>
 80023be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023c0:	e00c      	b.n	80023dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023c2:	f7fe fe19 	bl	8000ff8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d0:	d904      	bls.n	80023dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <RTC_EnterInitMode+0x64>
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d1e8      	bne.n	80023c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff93 	bl	8002342 <HAL_RTC_WaitForSynchro>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e041      	b.n	80024cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fc2b 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 fb29 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fbbc 	bl	8000c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 fada 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_TIM_PWM_Start+0x24>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e022      	b.n	80025de <HAL_TIM_PWM_Start+0x6a>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d109      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x3e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e015      	b.n	80025de <HAL_TIM_PWM_Start+0x6a>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d109      	bne.n	80025cc <HAL_TIM_PWM_Start+0x58>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e008      	b.n	80025de <HAL_TIM_PWM_Start+0x6a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07c      	b.n	80026e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x82>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f4:	e013      	b.n	800261e <HAL_TIM_PWM_Start+0xaa>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d104      	bne.n	8002606 <HAL_TIM_PWM_Start+0x92>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002604:	e00b      	b.n	800261e <HAL_TIM_PWM_Start+0xaa>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d104      	bne.n	8002616 <HAL_TIM_PWM_Start+0xa2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002614:	e003      	b.n	800261e <HAL_TIM_PWM_Start+0xaa>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2201      	movs	r2, #1
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fd30 	bl	800308c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_TIM_PWM_Start+0x174>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_PWM_Start+0xcc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <HAL_TIM_PWM_Start+0x178>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_TIM_PWM_Start+0xd0>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_TIM_PWM_Start+0xd2>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_TIM_PWM_Start+0x174>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d01d      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_TIM_PWM_Start+0x17c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d018      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <HAL_TIM_PWM_Start+0x180>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_TIM_PWM_Start+0x184>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_TIM_PWM_Start+0x178>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_TIM_PWM_Start+0x188>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_TIM_PWM_Start+0x136>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_TIM_PWM_Start+0x18c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d111      	bne.n	80026ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d010      	beq.n	80026de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026cc:	e007      	b.n	80026de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40010400 	.word	0x40010400
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00
 80026fc:	40014000 	.word	0x40014000
 8002700:	40001800 	.word	0x40001800

08002704 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e041      	b.n	800279c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f839 	bl	80027a4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 f9c1 	bl	8002acc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0ae      	b.n	8002934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	f200 809f 	bhi.w	8002924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002925 	.word	0x08002925
 80027f4:	08002925 	.word	0x08002925
 80027f8:	08002925 	.word	0x08002925
 80027fc:	08002861 	.word	0x08002861
 8002800:	08002925 	.word	0x08002925
 8002804:	08002925 	.word	0x08002925
 8002808:	08002925 	.word	0x08002925
 800280c:	080028a3 	.word	0x080028a3
 8002810:	08002925 	.word	0x08002925
 8002814:	08002925 	.word	0x08002925
 8002818:	08002925 	.word	0x08002925
 800281c:	080028e3 	.word	0x080028e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f9ee 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6999      	ldr	r1, [r3, #24]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	619a      	str	r2, [r3, #24]
      break;
 800285e:	e064      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fa3e 	bl	8002ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	619a      	str	r2, [r3, #24]
      break;
 80028a0:	e043      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fa91 	bl	8002dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0208 	orr.w	r2, r2, #8
 80028bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0204 	bic.w	r2, r2, #4
 80028cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	61da      	str	r2, [r3, #28]
      break;
 80028e0:	e023      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fae5 	bl	8002eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69d9      	ldr	r1, [r3, #28]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	021a      	lsls	r2, r3, #8
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	61da      	str	r2, [r3, #28]
      break;
 8002922:	e002      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	75fb      	strb	r3, [r7, #23]
      break;
 8002928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e0b4      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x186>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d03e      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0xd4>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	f200 8087 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	f000 8086 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x172>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d87f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d01a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xa6>
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d87b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d050      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x11a>
 80029b4:	2b60      	cmp	r3, #96	; 0x60
 80029b6:	d877      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d03c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xfa>
 80029bc:	2b50      	cmp	r3, #80	; 0x50
 80029be:	d873      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d058      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x13a>
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d86f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d064      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029cc:	2b30      	cmp	r3, #48	; 0x30
 80029ce:	d86b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d060      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d867      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d05a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029e0:	e062      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f2:	f000 fb2c 	bl	800304e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
      break;
 8002a0e:	e04f      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a20:	f000 fb15 	bl	800304e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e03c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 fa8c 	bl	8002f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2150      	movs	r1, #80	; 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fae3 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002a54:	e02c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 faaa 	bl	8002fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2160      	movs	r1, #96	; 0x60
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fad3 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002a74:	e01c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 fa6c 	bl	8002f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fac3 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 faba 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3f      	ldr	r2, [pc, #252]	; (8002bdc <TIM_Base_SetConfig+0x110>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d00f      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <TIM_Base_SetConfig+0x114>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3b      	ldr	r2, [pc, #236]	; (8002be4 <TIM_Base_SetConfig+0x118>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <TIM_Base_SetConfig+0x11c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <TIM_Base_SetConfig+0x120>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <TIM_Base_SetConfig+0x110>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d027      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <TIM_Base_SetConfig+0x114>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d023      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <TIM_Base_SetConfig+0x118>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <TIM_Base_SetConfig+0x11c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <TIM_Base_SetConfig+0x120>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <TIM_Base_SetConfig+0x124>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <TIM_Base_SetConfig+0x128>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <TIM_Base_SetConfig+0x12c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <TIM_Base_SetConfig+0x130>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <TIM_Base_SetConfig+0x134>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <TIM_Base_SetConfig+0x138>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <TIM_Base_SetConfig+0x110>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0xf8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <TIM_Base_SetConfig+0x120>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d103      	bne.n	8002bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	615a      	str	r2, [r3, #20]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	40001800 	.word	0x40001800
 8002c00:	40001c00 	.word	0x40001c00
 8002c04:	40002000 	.word	0x40002000

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0201 	bic.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC1_SetConfig+0x64>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0308 	bic.w	r3, r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_OC1_SetConfig+0x8e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f023 0210 	bic.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0320 	bic.w	r3, r3, #32
 8002d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <TIM_OC2_SetConfig+0xe0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC2_SetConfig+0x68>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <TIM_OC2_SetConfig+0xe0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC2_SetConfig+0x94>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <TIM_OC3_SetConfig+0xe0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_OC3_SetConfig+0x66>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <TIM_OC3_SetConfig+0xe4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10d      	bne.n	8002e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <TIM_OC3_SetConfig+0xe0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_OC3_SetConfig+0x92>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <TIM_OC3_SetConfig+0xe4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	031b      	lsls	r3, r3, #12
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <TIM_OC4_SetConfig+0xa0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_OC4_SetConfig+0x68>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <TIM_OC4_SetConfig+0xa4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d109      	bne.n	8002f34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40010400 	.word	0x40010400

08002f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0201 	bic.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 030a 	bic.w	r3, r3, #10
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0210 	bic.w	r2, r3, #16
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	031b      	lsls	r3, r3, #12
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	f043 0307 	orr.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	431a      	orrs	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2201      	movs	r2, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e05a      	b.n	80031a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d022      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d01d      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d018      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00e      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10c      	bne.n	8003190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4313      	orrs	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40001800 	.word	0x40001800

080031c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e03d      	b.n	8003260 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e042      	b.n	8003302 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fd fd95 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fdc6 	bl	8003e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b08a      	sub	sp, #40	; 0x28
 800330e:	af02      	add	r7, sp, #8
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	d16d      	bne.n	8003406 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_UART_Transmit+0x2c>
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e066      	b.n	8003408 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2221      	movs	r2, #33	; 0x21
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003348:	f7fd fe56 	bl	8000ff8 <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d108      	bne.n	8003376 <HAL_UART_Transmit+0x6c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e003      	b.n	800337e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800337e:	e02a      	b.n	80033d6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fb15 	bl	80039ba <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e036      	b.n	8003408 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	3302      	adds	r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e007      	b.n	80033c8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1cf      	bne.n	8003380 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fae5 	bl	80039ba <UART_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e006      	b.n	8003408 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	d112      	bne.n	8003450 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Receive_IT+0x26>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00b      	b.n	8003452 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	461a      	mov	r2, r3
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fb25 	bl	8003a96 <UART_Start_Receive_IT>
 800344c:	4603      	mov	r3, r0
 800344e:	e000      	b.n	8003452 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b0ba      	sub	sp, #232	; 0xe8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800349a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_UART_IRQHandler+0x66>
 80034ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fc01 	bl	8003cc2 <UART_Receive_IT>
      return;
 80034c0:	e25b      	b.n	800397a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80de 	beq.w	8003688 <HAL_UART_IRQHandler+0x22c>
 80034cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80d1 	beq.w	8003688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_UART_IRQHandler+0xae>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_UART_IRQHandler+0xd2>
 8003516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f043 0202 	orr.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_UART_IRQHandler+0xf6>
 800353a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <HAL_UART_IRQHandler+0x126>
 800355e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800356a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 81f2 	beq.w	8003970 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_UART_IRQHandler+0x14e>
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb8c 	bl	8003cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_UART_IRQHandler+0x17a>
 80035ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d04f      	beq.n	8003676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa96 	bl	8003b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d141      	bne.n	800366e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3314      	adds	r3, #20
 80035f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800361a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800362e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1d9      	bne.n	80035ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d013      	beq.n	8003666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	4a7e      	ldr	r2, [pc, #504]	; (800383c <HAL_UART_IRQHandler+0x3e0>)
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fed5 	bl	80013fa <HAL_DMA_Abort_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e00e      	b.n	8003684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f993 	bl	8003992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	e00a      	b.n	8003684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f98f 	bl	8003992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	e006      	b.n	8003684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f98b 	bl	8003992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003682:	e175      	b.n	8003970 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	bf00      	nop
    return;
 8003686:	e173      	b.n	8003970 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 814f 	bne.w	8003930 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8148 	beq.w	8003930 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8141 	beq.w	8003930 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	f040 80b6 	bne.w	8003840 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8145 	beq.w	8003974 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036f2:	429a      	cmp	r2, r3
 80036f4:	f080 813e 	bcs.w	8003974 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	f000 8088 	beq.w	800381e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800372c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800373a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800373e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003746:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1d9      	bne.n	800370e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800376a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800377e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003782:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e1      	bne.n	800375a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3314      	adds	r3, #20
 80037b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e3      	bne.n	8003796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003800:	65ba      	str	r2, [r7, #88]	; 0x58
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e3      	bne.n	80037dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fd7e 	bl	800131a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382c:	b29b      	uxth	r3, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8b5 	bl	80039a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800383a:	e09b      	b.n	8003974 <HAL_UART_IRQHandler+0x518>
 800383c:	08003bcd 	.word	0x08003bcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 808e 	beq.w	8003978 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8089 	beq.w	8003978 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800388a:	647a      	str	r2, [r7, #68]	; 0x44
 800388c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e3      	bne.n	8003866 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	623b      	str	r3, [r7, #32]
   return(result);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3314      	adds	r3, #20
 80038be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038c2:	633a      	str	r2, [r7, #48]	; 0x30
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e3      	bne.n	800389e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e3      	bne.n	80038e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f83b 	bl	80039a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800392e:	e023      	b.n	8003978 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_UART_IRQHandler+0x4f4>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f953 	bl	8003bf4 <UART_Transmit_IT>
    return;
 800394e:	e014      	b.n	800397a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00e      	beq.n	800397a <HAL_UART_IRQHandler+0x51e>
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f992 	bl	8003c92 <UART_EndTransmit_IT>
    return;
 800396e:	e004      	b.n	800397a <HAL_UART_IRQHandler+0x51e>
    return;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <HAL_UART_IRQHandler+0x51e>
      return;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_UART_IRQHandler+0x51e>
      return;
 8003978:	bf00      	nop
  }
}
 800397a:	37e8      	adds	r7, #232	; 0xe8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b090      	sub	sp, #64	; 0x40
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	e050      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d04c      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0x30>
 80039da:	f7fd fb0d 	bl	8000ff8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d241      	bcs.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a0a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a3e:	623a      	str	r2, [r7, #32]
 8003a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00f      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d09f      	beq.n	80039cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3740      	adds	r7, #64	; 0x40
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2222      	movs	r2, #34	; 0x22
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ada:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0220 	orr.w	r2, r2, #32
 8003afa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b095      	sub	sp, #84	; 0x54
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b30:	643a      	str	r2, [r7, #64]	; 0x40
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e5      	bne.n	8003b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d119      	bne.n	8003bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba0:	61ba      	str	r2, [r7, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bc2:	bf00      	nop
 8003bc4:	3754      	adds	r7, #84	; 0x54
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff fed3 	bl	8003992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b21      	cmp	r3, #33	; 0x21
 8003c06:	d13e      	bne.n	8003c86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c10:	d114      	bne.n	8003c3c <UART_Transmit_IT+0x48>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d110      	bne.n	8003c3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]
 8003c3a:	e008      	b.n	8003c4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6211      	str	r1, [r2, #32]
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fe64 	bl	8003980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08c      	sub	sp, #48	; 0x30
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b22      	cmp	r3, #34	; 0x22
 8003cd4:	f040 80ae 	bne.w	8003e34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d117      	bne.n	8003d12 <UART_Receive_IT+0x50>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d113      	bne.n	8003d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d10:	e026      	b.n	8003d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d007      	beq.n	8003d36 <UART_Receive_IT+0x74>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <UART_Receive_IT+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e008      	b.n	8003d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d15d      	bne.n	8003e30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0220 	bic.w	r2, r2, #32
 8003d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d135      	bne.n	8003e26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f023 0310 	bic.w	r3, r3, #16
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	623a      	str	r2, [r7, #32]
 8003de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69f9      	ldr	r1, [r7, #28]
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d10a      	bne.n	8003e18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fdc0 	bl	80039a4 <HAL_UARTEx_RxEventCallback>
 8003e24:	e002      	b.n	8003e2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc fe44 	bl	8000ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e002      	b.n	8003e36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e80:	f023 030c 	bic.w	r3, r3, #12
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a57      	ldr	r2, [pc, #348]	; (8004008 <UART_SetConfig+0x1c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <UART_SetConfig+0x78>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a56      	ldr	r2, [pc, #344]	; (800400c <UART_SetConfig+0x1cc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d103      	bne.n	8003ec0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7fe f8a8 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	e002      	b.n	8003ec6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7fe f882 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d14c      	bne.n	8003f6a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4a4a      	ldr	r2, [pc, #296]	; (8004010 <UART_SetConfig+0x1d0>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	0119      	lsls	r1, r3, #4
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f06:	4b42      	ldr	r3, [pc, #264]	; (8004010 <UART_SetConfig+0x1d0>)
 8003f08:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2064      	movs	r0, #100	; 0x64
 8003f10:	fb00 f303 	mul.w	r3, r0, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <UART_SetConfig+0x1d0>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	4419      	add	r1, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b33      	ldr	r3, [pc, #204]	; (8004010 <UART_SetConfig+0x1d0>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <UART_SetConfig+0x1d0>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 0207 	and.w	r2, r3, #7
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	440a      	add	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f68:	e04a      	b.n	8004000 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a23      	ldr	r2, [pc, #140]	; (8004010 <UART_SetConfig+0x1d0>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	0119      	lsls	r1, r3, #4
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <UART_SetConfig+0x1d0>)
 8003fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2064      	movs	r0, #100	; 0x64
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a16      	ldr	r2, [pc, #88]	; (8004010 <UART_SetConfig+0x1d0>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	4419      	add	r1, r3
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <UART_SetConfig+0x1d0>)
 8003fda:	fba3 0302 	umull	r0, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2064      	movs	r0, #100	; 0x64
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a08      	ldr	r2, [pc, #32]	; (8004010 <UART_SetConfig+0x1d0>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40011000 	.word	0x40011000
 800400c:	40011400 	.word	0x40011400
 8004010:	51eb851f 	.word	0x51eb851f

08004014 <memset>:
 8004014:	4603      	mov	r3, r0
 8004016:	4402      	add	r2, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	2600      	movs	r6, #0
 8004028:	4d0c      	ldr	r5, [pc, #48]	; (800405c <__libc_init_array+0x38>)
 800402a:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	f000 f822 	bl	800407c <_init>
 8004038:	2600      	movs	r6, #0
 800403a:	4d0a      	ldr	r5, [pc, #40]	; (8004064 <__libc_init_array+0x40>)
 800403c:	4c0a      	ldr	r4, [pc, #40]	; (8004068 <__libc_init_array+0x44>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	080040b4 	.word	0x080040b4
 8004060:	080040b4 	.word	0x080040b4
 8004064:	080040b4 	.word	0x080040b4
 8004068:	080040b8 	.word	0x080040b8

0800406c <strcpy>:
 800406c:	4603      	mov	r3, r0
 800406e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004072:	f803 2b01 	strb.w	r2, [r3], #1
 8004076:	2a00      	cmp	r2, #0
 8004078:	d1f9      	bne.n	800406e <strcpy+0x2>
 800407a:	4770      	bx	lr

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
