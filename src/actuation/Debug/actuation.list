
actuation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a34  08005a34  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a3c  08005a3c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000060  08005aa4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  08005aa4  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbe7  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002442  00000000  00000000  0002fcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  000320f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7d  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c14  00000000  00000000  00033b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125cc  00000000  00000000  00054739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90a4  00000000  00000000  00066d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004700  00000000  00000000  0012fdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001344ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000060 	.word	0x20000060
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800585c 	.word	0x0800585c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000064 	.word	0x20000064
 80001c0:	0800585c 	.word	0x0800585c

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	468e      	mov	lr, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14c      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d967      	bls.n	80002fe <__udivmoddi4+0xe6>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b153      	cbz	r3, 800024a <__udivmoddi4+0x32>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000240:	fa20 f202 	lsr.w	r2, r0, r2
 8000244:	ea42 0e0e 	orr.w	lr, r2, lr
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fbbe f1f7 	udiv	r1, lr, r7
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fb07 ee11 	mls	lr, r7, r1, lr
 800025a:	fb01 f005 	mul.w	r0, r1, r5
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x66>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000270:	f080 8119 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8116 	bls.w	80004a6 <__udivmoddi4+0x28e>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	fbb2 f0f7 	udiv	r0, r2, r7
 8000284:	fb07 2210 	mls	r2, r7, r0, r2
 8000288:	fb00 f505 	mul.w	r5, r0, r5
 800028c:	b2a4      	uxth	r4, r4
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8104 	bcs.w	80004aa <__udivmoddi4+0x292>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8101 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa6>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xc0>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ea 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d148      	bne.n	8000372 <__udivmoddi4+0x15a>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xd2>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2c2>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4696      	mov	lr, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa6>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xea>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 808e 	bne.w	8000428 <__udivmoddi4+0x210>
 800030c:	1a88      	subs	r0, r1, r2
 800030e:	2101      	movs	r1, #1
 8000310:	0c17      	lsrs	r7, r2, #16
 8000312:	fa1f fe82 	uxth.w	lr, r2
 8000316:	fbb0 f5f7 	udiv	r5, r0, r7
 800031a:	fb07 0015 	mls	r0, r7, r5, r0
 800031e:	0c22      	lsrs	r2, r4, #16
 8000320:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000324:	fb0e f005 	mul.w	r0, lr, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x126>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f105 38ff 	add.w	r8, r5, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x124>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 80cc 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033c:	4645      	mov	r5, r8
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	45a6      	cmp	lr, r4
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x150>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14e>
 8000360:	45a6      	cmp	lr, r4
 8000362:	f200 80b4 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000366:	4610      	mov	r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000370:	e7a0      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000372:	f1c1 0720 	rsb	r7, r1, #32
 8000376:	408b      	lsls	r3, r1
 8000378:	fa22 fc07 	lsr.w	ip, r2, r7
 800037c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000380:	fa25 fa07 	lsr.w	sl, r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	fbba f8f9 	udiv	r8, sl, r9
 800038c:	408d      	lsls	r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	432b      	orrs	r3, r5
 800039c:	fa00 f501 	lsl.w	r5, r0, r1
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	0c1c      	lsrs	r4, r3, #16
 80003a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003aa:	42a0      	cmp	r0, r4
 80003ac:	fa02 f201 	lsl.w	r2, r2, r1
 80003b0:	d90b      	bls.n	80003ca <__udivmoddi4+0x1b2>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ba:	f080 8086 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003be:	42a0      	cmp	r0, r4
 80003c0:	f240 8083 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c4:	f1a8 0802 	sub.w	r8, r8, #2
 80003c8:	4464      	add	r4, ip
 80003ca:	1a24      	subs	r4, r4, r0
 80003cc:	b298      	uxth	r0, r3
 80003ce:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d2:	fb09 4413 	mls	r4, r9, r3, r4
 80003d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80003da:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x1dc>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ea:	d26a      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d968      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003f0:	3b02      	subs	r3, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f8:	fba0 9302 	umull	r9, r3, r0, r2
 80003fc:	eba4 040e 	sub.w	r4, r4, lr
 8000400:	429c      	cmp	r4, r3
 8000402:	46c8      	mov	r8, r9
 8000404:	469e      	mov	lr, r3
 8000406:	d354      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000408:	d051      	beq.n	80004ae <__udivmoddi4+0x296>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d067      	beq.n	80004de <__udivmoddi4+0x2c6>
 800040e:	ebb5 0308 	subs.w	r3, r5, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	40cb      	lsrs	r3, r1
 8000418:	fa04 f707 	lsl.w	r7, r4, r7
 800041c:	431f      	orrs	r7, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e74a      	b.n	80002be <__udivmoddi4+0xa6>
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	f1c3 0020 	rsb	r0, r3, #32
 8000430:	40c1      	lsrs	r1, r0
 8000432:	409d      	lsls	r5, r3
 8000434:	fa24 f000 	lsr.w	r0, r4, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	4328      	orrs	r0, r5
 800043e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000442:	fb07 1115 	mls	r1, r7, r5, r1
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	0c02      	lsrs	r2, r0, #16
 800044c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000450:	fb05 f10e 	mul.w	r1, r5, lr
 8000454:	4291      	cmp	r1, r2
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f105 38ff 	add.w	r8, r5, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	4291      	cmp	r1, r2
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3d02      	subs	r5, #2
 800046c:	4462      	add	r2, ip
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	fbb2 f1f7 	udiv	r1, r2, r7
 8000474:	fb07 2211 	mls	r2, r7, r1, r2
 8000478:	b280      	uxth	r0, r0
 800047a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800047e:	fb01 f20e 	mul.w	r2, r1, lr
 8000482:	4282      	cmp	r2, r0
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0000 	adds.w	r0, ip, r0
 800048a:	f101 38ff 	add.w	r8, r1, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4282      	cmp	r2, r0
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3902      	subs	r1, #2
 8000496:	4460      	add	r0, ip
 8000498:	1a80      	subs	r0, r0, r2
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	e73a      	b.n	8000316 <__udivmoddi4+0xfe>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e70b      	b.n	80002be <__udivmoddi4+0xa6>
 80004a6:	4671      	mov	r1, lr
 80004a8:	e6e9      	b.n	800027e <__udivmoddi4+0x66>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fe      	b.n	80002ac <__udivmoddi4+0x94>
 80004ae:	454d      	cmp	r5, r9
 80004b0:	d2ab      	bcs.n	800040a <__udivmoddi4+0x1f2>
 80004b2:	ebb9 0802 	subs.w	r8, r9, r2
 80004b6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a5      	b.n	800040a <__udivmoddi4+0x1f2>
 80004be:	4641      	mov	r1, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1dc>
 80004c6:	4645      	mov	r5, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77d      	b.n	80003ca <__udivmoddi4+0x1b2>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e749      	b.n	8000368 <__udivmoddi4+0x150>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e731      	b.n	800033e <__udivmoddi4+0x126>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xdc>
 80004de:	4631      	mov	r1, r6
 80004e0:	e6ed      	b.n	80002be <__udivmoddi4+0xa6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 ff4c 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f86c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fa42 	bl	800097c <MX_GPIO_Init>
  MX_RTC_Init();
 80004f8:	f000 f8fc 	bl	80006f4 <MX_RTC_Init>
  MX_TIM1_Init();
 80004fc:	f000 f920 	bl	8000740 <MX_TIM1_Init>
  MX_TIM12_Init();
 8000500:	f000 f9a8 	bl	8000854 <MX_TIM12_Init>
  MX_DAC_Init();
 8000504:	f000 f8c2 	bl	800068c <MX_DAC_Init>
  MX_USART6_UART_Init();
 8000508:	f000 fa0e 	bl	8000928 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_RegisterRxEventCallback(&huart6, handleRx)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <main+0xbc>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <main+0xbc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f042 0220 	orr.w	r2, r2, #32
 800051a:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart6, (unsigned char *)&c, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4922      	ldr	r1, [pc, #136]	; (80005a8 <main+0xc0>)
 8000520:	4820      	ldr	r0, [pc, #128]	; (80005a4 <main+0xbc>)
 8000522:	f003 f9b0 	bl	8003886 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000526:	210c      	movs	r1, #12
 8000528:	4820      	ldr	r0, [pc, #128]	; (80005ac <main+0xc4>)
 800052a:	f002 fa4f 	bl	80029cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <main+0xc8>)
 8000532:	f002 fa4b 	bl	80029cc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim1.Instance->CNT = 0;
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0xc4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  htim12.Instance->CNT = 0;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <main+0xc8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  while (1) {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    if (msgReady) {
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <main+0xcc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d01a      	beq.n	8000584 <main+0x9c>
      msgReady = 0;
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <main+0xcc>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
      switch (msg[0]) {
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <main+0xd0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b21      	cmp	r3, #33	; 0x21
 800055a:	d002      	beq.n	8000562 <main+0x7a>
 800055c:	2b58      	cmp	r3, #88	; 0x58
 800055e:	d006      	beq.n	800056e <main+0x86>
 8000560:	e00a      	b.n	8000578 <main+0x90>
      case '!':
        handleCommand(msg[1]);
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <main+0xd0>)
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 faf2 	bl	8000b50 <handleCommand>
        break;
 800056c:	e00a      	b.n	8000584 <main+0x9c>
      case 'X':
        handlePos(msg + 1);
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <main+0xd4>)
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fba5 	bl	8000cc0 <handlePos>
        break;
 8000576:	e005      	b.n	8000584 <main+0x9c>
      default:
        transmit("A999\0");
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0xd8>)
 800057a:	f000 fabf 	bl	8000afc <transmit>
        gameState = DISCONNECTED;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <main+0xdc>)
 8000580:	2244      	movs	r2, #68	; 0x44
 8000582:	701a      	strb	r2, [r3, #0]
      }
    }
    if (gameState == IN_GAME && movQ.count) send_pulses(dequeueMove());
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <main+0xdc>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b53      	cmp	r3, #83	; 0x53
 800058a:	d1dc      	bne.n	8000546 <main+0x5e>
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0xe0>)
 800058e:	f893 34b2 	ldrb.w	r3, [r3, #1202]	; 0x4b2
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0d7      	beq.n	8000546 <main+0x5e>
 8000596:	f000 fbb5 	bl	8000d04 <dequeueMove>
 800059a:	4603      	mov	r3, r0
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fbe7 	bl	8000d70 <send_pulses>
    if (msgReady) {
 80005a2:	e7d0      	b.n	8000546 <main+0x5e>
 80005a4:	20000140 	.word	0x20000140
 80005a8:	200001b8 	.word	0x200001b8
 80005ac:	200000b0 	.word	0x200000b0
 80005b0:	200000f8 	.word	0x200000f8
 80005b4:	200001f4 	.word	0x200001f4
 80005b8:	200001f8 	.word	0x200001f8
 80005bc:	200001f9 	.word	0x200001f9
 80005c0:	08005874 	.word	0x08005874
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000214 	.word	0x20000214

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f820 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005fe:	230a      	movs	r3, #10
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000612:	2300      	movs	r3, #0
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000616:	230d      	movs	r3, #13
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 800061a:	23c3      	movs	r3, #195	; 0xc3
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000622:	2304      	movs	r3, #4
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fae8 	bl	8001c00 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 fc8d 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fd25 	bl	80020a8 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000664:	f000 fc76 	bl	8000f54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000668:	2304      	movs	r3, #4
 800066a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800066c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000670:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ff17 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000680:	f000 fc68 	bl	8000f54 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DAC_Init+0x60>)
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_DAC_Init+0x64>)
 800069e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_DAC_Init+0x60>)
 80006a2:	f000 ffec 	bl	800167e <HAL_DAC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006ac:	f000 fc52 	bl	8000f54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_DAC_Init+0x60>)
 80006c0:	f000 ffff 	bl	80016c2 <HAL_DAC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006ca:	f000 fc43 	bl	8000f54 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2210      	movs	r2, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DAC_Init+0x60>)
 80006d6:	f000 fff4 	bl	80016c2 <HAL_DAC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 fc38 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	40007400 	.word	0x40007400

080006f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_RTC_Init+0x44>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_RTC_Init+0x48>)
 80006fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_RTC_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_RTC_Init+0x44>)
 8000706:	227f      	movs	r2, #127	; 0x7f
 8000708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_RTC_Init+0x44>)
 800070c:	22ff      	movs	r2, #255	; 0xff
 800070e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_RTC_Init+0x44>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_RTC_Init+0x44>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_RTC_Init+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_RTC_Init+0x44>)
 8000724:	f001 ffb6 	bl	8002694 <HAL_RTC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800072e:	f000 fc11 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000090 	.word	0x20000090
 800073c:	40002800 	.word	0x40002800

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b092      	sub	sp, #72	; 0x48
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 ff58 	bl	8004620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_TIM1_Init+0x10c>)
 8000772:	4a37      	ldr	r2, [pc, #220]	; (8000850 <MX_TIM1_Init+0x110>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_TIM1_Init+0x10c>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_TIM1_Init+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <MX_TIM1_Init+0x10c>)
 8000784:	2204      	movs	r2, #4
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_TIM1_Init+0x10c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_TIM1_Init+0x10c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM1_Init+0x10c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_TIM1_Init+0x10c>)
 800079c:	f002 f8c6 	bl	800292c <HAL_TIM_PWM_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007a6:	f000 fbd5 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80007aa:	2108      	movs	r1, #8
 80007ac:	4827      	ldr	r0, [pc, #156]	; (800084c <MX_TIM1_Init+0x10c>)
 80007ae:	f002 f9d5 	bl	8002b5c <HAL_TIM_OnePulse_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 fbcc 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c8:	4619      	mov	r1, r3
 80007ca:	4820      	ldr	r0, [pc, #128]	; (800084c <MX_TIM1_Init+0x10c>)
 80007cc:	f002 feae 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80007d6:	f000 fbbd 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80007da:	2370      	movs	r3, #112	; 0x70
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	220c      	movs	r2, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM1_Init+0x10c>)
 80007fc:	f002 fa08 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000806:	f000 fba5 	bl	8000f54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x10c>)
 800082e:	f002 fef7 	bl	8003620 <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000838:	f000 fb8c 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x10c>)
 800083e:	f000 fc51 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3748      	adds	r7, #72	; 0x48
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000b0 	.word	0x200000b0
 8000850:	40010000 	.word	0x40010000

08000854 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_TIM12_Init+0xcc>)
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <MX_TIM12_Init+0xd0>)
 800087e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_TIM12_Init+0xcc>)
 800088e:	2204      	movs	r2, #4
 8000890:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_TIM12_Init+0xcc>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008a0:	f001 fff5 	bl	800288e <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80008aa:	f000 fb53 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4619      	mov	r1, r3
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008bc:	f002 fa6a 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80008c6:	f000 fb45 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80008ca:	4815      	ldr	r0, [pc, #84]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008cc:	f002 f82e 	bl	800292c <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80008d6:	f000 fb3d 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK)
 80008da:	2108      	movs	r1, #8
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008de:	f002 f93d 	bl	8002b5c <HAL_TIM_OnePulse_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM12_Init+0x98>
  {
    Error_Handler();
 80008e8:	f000 fb34 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008ec:	2370      	movs	r3, #112	; 0x70
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000904:	f002 f984 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 800090e:	f000 fb21 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000914:	f000 fbe6 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000f8 	.word	0x200000f8
 8000924:	40001800 	.word	0x40001800

08000928 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART6_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000934:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000938:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000960:	f002 feb0 	bl	80036c4 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 faf3 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000140 	.word	0x20000140
 8000978:	40011400 	.word	0x40011400

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	4b54      	ldr	r3, [pc, #336]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a53      	ldr	r2, [pc, #332]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a45      	ldr	r2, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <MX_GPIO_Init+0x170>)
 8000a42:	f001 f8c5 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <MX_GPIO_Init+0x174>)
 8000a4e:	f001 f8bf 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a5a:	f001 f8b9 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2101      	movs	r1, #1
 8000a62:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MX_GPIO_Init+0x17c>)
 8000a64:	f001 f8b4 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0x170>)
 8000a82:	f000 ff07 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x174>)
 8000aa0:	f000 fef8 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000abe:	f000 fee9 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_GPIO_Init+0x17c>)
 8000ada:	f000 fedb 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	; 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40021000 	.word	0x40021000

08000afc <transmit>:

/* USER CODE BEGIN 4 */
void transmit(const char *m) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b092      	sub	sp, #72	; 0x48
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
  char s[MAX_TX_LEN];
  snprintf(s, sizeof(s), "%s#%s;\n", m, m);
 8000b04:	f107 000c 	add.w	r0, r7, #12
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <transmit+0x40>)
 8000b10:	2132      	movs	r1, #50	; 0x32
 8000b12:	f003 fd25 	bl	8004560 <sniprintf>
  HAL_UART_Transmit(&huart6, (unsigned char *)s, strlen(s), HAL_MAX_DELAY);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb5c 	bl	80001d8 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f107 010c 	add.w	r1, r7, #12
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <transmit+0x44>)
 8000b2e:	f002 fe27 	bl	8003780 <HAL_UART_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	; 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	0800587c 	.word	0x0800587c
 8000b40:	20000140 	.word	0x20000140

08000b44 <resetMotors>:

void resetMotors() {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return;
 8000b48:	bf00      	nop
}
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <handleCommand>:

void handleCommand(const char code) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  switch (code) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	3b44      	subs	r3, #68	; 0x44
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	d84f      	bhi.n	8000c02 <handleCommand+0xb2>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <handleCommand+0x18>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000bd9 	.word	0x08000bd9
 8000b6c:	08000c03 	.word	0x08000c03
 8000b70:	08000c03 	.word	0x08000c03
 8000b74:	08000c03 	.word	0x08000c03
 8000b78:	08000c03 	.word	0x08000c03
 8000b7c:	08000bb7 	.word	0x08000bb7
 8000b80:	08000c03 	.word	0x08000c03
 8000b84:	08000c03 	.word	0x08000c03
 8000b88:	08000c03 	.word	0x08000c03
 8000b8c:	08000c03 	.word	0x08000c03
 8000b90:	08000c03 	.word	0x08000c03
 8000b94:	08000c03 	.word	0x08000c03
 8000b98:	08000c03 	.word	0x08000c03
 8000b9c:	08000c03 	.word	0x08000c03
 8000ba0:	08000ba9 	.word	0x08000ba9
 8000ba4:	08000be5 	.word	0x08000be5
  case 'R':
    gameState = RE_CENTER;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <handleCommand+0xc4>)
 8000baa:	2252      	movs	r2, #82	; 0x52
 8000bac:	701a      	strb	r2, [r3, #0]
//    transmit("X,1,200,0,100\n"); // send cur position.
    transmit("!R\0");
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <handleCommand+0xc8>)
 8000bb0:	f7ff ffa4 	bl	8000afc <transmit>
    break;
 8000bb4:	e029      	b.n	8000c0a <handleCommand+0xba>
  case 'I':
    if (gameState == RE_CENTER || gameState == IN_GAME) resetMotors();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <handleCommand+0xc4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b52      	cmp	r3, #82	; 0x52
 8000bbc:	d003      	beq.n	8000bc6 <handleCommand+0x76>
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <handleCommand+0xc4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b53      	cmp	r3, #83	; 0x53
 8000bc4:	d101      	bne.n	8000bca <handleCommand+0x7a>
 8000bc6:	f7ff ffbd 	bl	8000b44 <resetMotors>
    gameState = IDLE;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <handleCommand+0xc4>)
 8000bcc:	2249      	movs	r2, #73	; 0x49
 8000bce:	701a      	strb	r2, [r3, #0]
    transmit("!I\0");
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <handleCommand+0xcc>)
 8000bd2:	f7ff ff93 	bl	8000afc <transmit>
    break;
 8000bd6:	e018      	b.n	8000c0a <handleCommand+0xba>
  case 'D':
    gameState = DISCONNECTED;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <handleCommand+0xc4>)
 8000bda:	2244      	movs	r2, #68	; 0x44
 8000bdc:	701a      	strb	r2, [r3, #0]
    transmit("!D\0");
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <handleCommand+0xd0>)
 8000be0:	f7ff ff8c 	bl	8000afc <transmit>
  case 'S':
    if (gameState != IDLE) transmit("A988\0");
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <handleCommand+0xc4>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b49      	cmp	r3, #73	; 0x49
 8000bea:	d003      	beq.n	8000bf4 <handleCommand+0xa4>
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <handleCommand+0xd4>)
 8000bee:	f7ff ff85 	bl	8000afc <transmit>
    else {
      gameState = IN_GAME;
      transmit("!S\0");
    }
    break;
 8000bf2:	e00a      	b.n	8000c0a <handleCommand+0xba>
      gameState = IN_GAME;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <handleCommand+0xc4>)
 8000bf6:	2253      	movs	r2, #83	; 0x53
 8000bf8:	701a      	strb	r2, [r3, #0]
      transmit("!S\0");
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <handleCommand+0xd8>)
 8000bfc:	f7ff ff7e 	bl	8000afc <transmit>
    break;
 8000c00:	e003      	b.n	8000c0a <handleCommand+0xba>
  default:
    transmit("A989\0");
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <handleCommand+0xdc>)
 8000c04:	f7ff ff7a 	bl	8000afc <transmit>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000000 	.word	0x20000000
 8000c18:	08005884 	.word	0x08005884
 8000c1c:	08005888 	.word	0x08005888
 8000c20:	0800588c 	.word	0x0800588c
 8000c24:	08005890 	.word	0x08005890
 8000c28:	08005898 	.word	0x08005898
 8000c2c:	0800589c 	.word	0x0800589c

08000c30 <enqueueMove>:

void enqueueMove(Move m) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Move *end = &movQ.moves[movQ.end++];
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <enqueueMove+0x84>)
 8000c3e:	f893 34b1 	ldrb.w	r3, [r3, #1201]	; 0x4b1
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	b2d1      	uxtb	r1, r2
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <enqueueMove+0x84>)
 8000c48:	f882 14b1 	strb.w	r1, [r2, #1201]	; 0x4b1
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <enqueueMove+0x84>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
  movQ.end %= MAX_Q_LEN;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <enqueueMove+0x84>)
 8000c5e:	f893 34b1 	ldrb.w	r3, [r3, #1201]	; 0x4b1
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <enqueueMove+0x88>)
 8000c64:	fba2 1203 	umull	r1, r2, r2, r3
 8000c68:	0952      	lsrs	r2, r2, #5
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	fb01 f202 	mul.w	r2, r1, r2
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <enqueueMove+0x84>)
 8000c76:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
  if (movQ.count++ == MAX_Q_LEN)
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <enqueueMove+0x84>)
 8000c7c:	f893 34b2 	ldrb.w	r3, [r3, #1202]	; 0x4b2
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <enqueueMove+0x84>)
 8000c86:	f882 14b2 	strb.w	r1, [r2, #1202]	; 0x4b2
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d102      	bne.n	8000c94 <enqueueMove+0x64>
    transmit("A979\0");
 8000c8e:	480b      	ldr	r0, [pc, #44]	; (8000cbc <enqueueMove+0x8c>)
 8000c90:	f7ff ff34 	bl	8000afc <transmit>
  end->xDir = m.xDir;
 8000c94:	793a      	ldrb	r2, [r7, #4]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	701a      	strb	r2, [r3, #0]
  end->xPul = m.xPul;
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	605a      	str	r2, [r3, #4]
  end->yDir = m.yDir;
 8000ca0:	797a      	ldrb	r2, [r7, #5]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	705a      	strb	r2, [r3, #1]
  end->yPul = m.yPul;
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	609a      	str	r2, [r3, #8]
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000214 	.word	0x20000214
 8000cb8:	51eb851f 	.word	0x51eb851f
 8000cbc:	080058a4 	.word	0x080058a4

08000cc0 <handlePos>:

void handlePos(unsigned char *data) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
  Move m;
  sscanf((char *)data, "%c,%d,%c,%d", &m.xDir, &m.xPul, &m.yDir, &m.yPul);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	1d19      	adds	r1, r3, #4
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	3301      	adds	r3, #1
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4906      	ldr	r1, [pc, #24]	; (8000d00 <handlePos+0x40>)
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f003 fc6e 	bl	80045c8 <siscanf>
  enqueueMove(m);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cf4:	f7ff ff9c 	bl	8000c30 <enqueueMove>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	080058ac 	.word	0x080058ac

08000d04 <dequeueMove>:


Move *dequeueMove() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  if (!movQ.count)
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <dequeueMove+0x60>)
 8000d0c:	f893 34b2 	ldrb.w	r3, [r3, #1202]	; 0x4b2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <dequeueMove+0x16>
    transmit("A969\0");
 8000d14:	4814      	ldr	r0, [pc, #80]	; (8000d68 <dequeueMove+0x64>)
 8000d16:	f7ff fef1 	bl	8000afc <transmit>
  Move *move = &movQ.moves[movQ.start++];
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <dequeueMove+0x60>)
 8000d1c:	f893 34b0 	ldrb.w	r3, [r3, #1200]	; 0x4b0
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	b2d1      	uxtb	r1, r2
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <dequeueMove+0x60>)
 8000d26:	f882 14b0 	strb.w	r1, [r2, #1200]	; 0x4b0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <dequeueMove+0x60>)
 8000d36:	4413      	add	r3, r2
 8000d38:	607b      	str	r3, [r7, #4]
  movQ.start %= MAX_Q_LEN;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <dequeueMove+0x60>)
 8000d3c:	f893 34b0 	ldrb.w	r3, [r3, #1200]	; 0x4b0
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <dequeueMove+0x68>)
 8000d42:	fba2 1203 	umull	r1, r2, r2, r3
 8000d46:	0952      	lsrs	r2, r2, #5
 8000d48:	2164      	movs	r1, #100	; 0x64
 8000d4a:	fb01 f202 	mul.w	r2, r1, r2
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <dequeueMove+0x60>)
 8000d54:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
  return move;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000214 	.word	0x20000214
 8000d68:	080058b8 	.word	0x080058b8
 8000d6c:	51eb851f 	.word	0x51eb851f

08000d70 <send_pulses>:

void send_pulses(Move *move){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  int sent1 = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  int sent2 = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  int i;
  unsigned char arr_check = htim12.Instance->ARR;
 8000d80:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <send_pulses+0x130>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	72fb      	strb	r3, [r7, #11]
  if(move->xPul > move->yPul){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dd3a      	ble.n	8000e0a <send_pulses+0x9a>
    for(sent1 = 0; sent1 < move->xPul; sent1++){
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e031      	b.n	8000dfe <send_pulses+0x8e>
      if(sent2 < move->yPul){
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	da17      	bge.n	8000dd4 <send_pulses+0x64>
        for(i = 0; i < arr_check; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e00a      	b.n	8000dc0 <send_pulses+0x50>
        htim12.Instance->CNT = i;
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <send_pulses+0x130>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
        htim1.Instance->CNT = i;
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <send_pulses+0x134>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
        for(i = 0; i < arr_check; i++){
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <send_pulses+0x3a>
        }
        i = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
        sent2++;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e011      	b.n	8000df8 <send_pulses+0x88>
      }
      else{
        htim1.Instance->CNT = 0;
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <send_pulses+0x134>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
        for(; i < arr_check; i++){
 8000ddc:	e006      	b.n	8000dec <send_pulses+0x7c>
          htim12.Instance->CNT = i;
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <send_pulses+0x130>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
        for(; i < arr_check; i++){
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf4      	blt.n	8000dde <send_pulses+0x6e>
        }
        i = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
    for(sent1 = 0; sent1 < move->xPul; sent1++){
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbc8      	blt.n	8000d9a <send_pulses+0x2a>
 8000e08:	e039      	b.n	8000e7e <send_pulses+0x10e>
      }
    }
  }
  else{
    for(sent2=0; sent2 < move->yPul; sent2++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e031      	b.n	8000e74 <send_pulses+0x104>
      if(sent1 < move->xPul){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	da17      	bge.n	8000e4a <send_pulses+0xda>
        for(i = 0; i < arr_check; i++){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e00a      	b.n	8000e36 <send_pulses+0xc6>
        htim12.Instance->CNT = i;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <send_pulses+0x130>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
        htim1.Instance->CNT = i;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <send_pulses+0x134>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
        for(i = 0; i < arr_check; i++){
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf0      	blt.n	8000e20 <send_pulses+0xb0>
        }
        i = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
        sent1++;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e011      	b.n	8000e6e <send_pulses+0xfe>
      }
      else{
        htim12.Instance->CNT = 0;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <send_pulses+0x130>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
        for(; i < arr_check; i++){
 8000e52:	e006      	b.n	8000e62 <send_pulses+0xf2>
          htim1.Instance->CNT = i;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <send_pulses+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
        for(; i < arr_check; i++){
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbf4      	blt.n	8000e54 <send_pulses+0xe4>
        }
        i = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
    for(sent2=0; sent2 < move->yPul; sent2++){
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	3301      	adds	r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbc8      	blt.n	8000e10 <send_pulses+0xa0>
      }
    }
  }
  htim12.Instance->CNT = 0;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <send_pulses+0x130>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  htim1.Instance->CNT = 0;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <send_pulses+0x134>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2101      	movs	r1, #1
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <send_pulses+0x138>)
 8000e94:	f000 fe9c 	bl	8001bd0 <HAL_GPIO_WritePin>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000f8 	.word	0x200000f8
 8000ea4:	200000b0 	.word	0x200000b0
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  switch (c) {
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_UART_RxCpltCallback+0x90>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b23      	cmp	r3, #35	; 0x23
 8000eba:	d002      	beq.n	8000ec2 <HAL_UART_RxCpltCallback+0x16>
 8000ebc:	2b3b      	cmp	r3, #59	; 0x3b
 8000ebe:	d013      	beq.n	8000ee8 <HAL_UART_RxCpltCallback+0x3c>
 8000ec0:	e02d      	b.n	8000f1e <HAL_UART_RxCpltCallback+0x72>
  case '#':
    msg[i] = buffer[i] = '\0';
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_UART_RxCpltCallback+0x98>)
 8000eca:	4601      	mov	r1, r0
 8000ecc:	54d1      	strb	r1, [r2, r3]
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_UART_RxCpltCallback+0x9c>)
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	54d1      	strb	r1, [r2, r3]
    strcpy((char *)msg, (char *)buffer);
 8000ed8:	491a      	ldr	r1, [pc, #104]	; (8000f44 <HAL_UART_RxCpltCallback+0x98>)
 8000eda:	481b      	ldr	r0, [pc, #108]	; (8000f48 <HAL_UART_RxCpltCallback+0x9c>)
 8000edc:	f003 fbd4 	bl	8004688 <strcpy>
    i = 0;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    break;
 8000ee6:	e024      	b.n	8000f32 <HAL_UART_RxCpltCallback+0x86>
  case ';':
    buffer[i] = '\0';
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <HAL_UART_RxCpltCallback+0x98>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	54d1      	strb	r1, [r2, r3]
    if (strcmp((char *)msg, (char *)buffer) || msgReady)
 8000ef2:	4914      	ldr	r1, [pc, #80]	; (8000f44 <HAL_UART_RxCpltCallback+0x98>)
 8000ef4:	4814      	ldr	r0, [pc, #80]	; (8000f48 <HAL_UART_RxCpltCallback+0x9c>)
 8000ef6:	f7ff f965 	bl	80001c4 <strcmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <HAL_UART_RxCpltCallback+0x5c>
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_UART_RxCpltCallback+0xa0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_UART_RxCpltCallback+0x64>
      gameState = DISCONNECTED;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_RxCpltCallback+0xa4>)
 8000f0a:	2244      	movs	r2, #68	; 0x44
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e002      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x6a>
    else
      msgReady = 1;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_UART_RxCpltCallback+0xa0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
    i = 0;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
    break;
 8000f1c:	e009      	b.n	8000f32 <HAL_UART_RxCpltCallback+0x86>
  default:
    buffer[i++] = c;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4906      	ldr	r1, [pc, #24]	; (8000f40 <HAL_UART_RxCpltCallback+0x94>)
 8000f26:	600a      	str	r2, [r1, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_UART_RxCpltCallback+0x90>)
 8000f2a:	7811      	ldrb	r1, [r2, #0]
 8000f2c:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <HAL_UART_RxCpltCallback+0x98>)
 8000f2e:	54d1      	strb	r1, [r2, r3]
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001b8 	.word	0x200001b8
 8000f40:	200001f0 	.word	0x200001f0
 8000f44:	200001bc 	.word	0x200001bc
 8000f48:	200001f8 	.word	0x200001f8
 8000f4c:	200001f4 	.word	0x200001f4
 8000f50:	20000000 	.word	0x20000000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
   */
  __disable_irq();
  //  while (1) {
  //  }
  /* USER CODE END Error_Handler_Debug */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x48>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x48>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x48>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_MspInit+0x48>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_MspInit+0x48>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_MspInit+0x48>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_DAC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800100a:	2330      	movs	r3, #48	; 0x30
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_DAC_MspInit+0x84>)
 800101e:	f000 fc39 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40007400 	.word	0x40007400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <HAL_RTC_MspInit+0x24>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d102      	bne.n	8001050 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_RTC_MspInit+0x28>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40002800 	.word	0x40002800
 8001060:	42470e3c 	.word	0x42470e3c

08001064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_TIM_PWM_MspInit+0x38>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10d      	bne.n	8001092 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40010000 	.word	0x40010000
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_TIM_Base_MspInit+0x38>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40001800 	.word	0x40001800
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_TIM_MspPostInit+0xb4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d11f      	bne.n	8001146 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001134:	2301      	movs	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <HAL_TIM_MspPostInit+0xbc>)
 8001140:	f000 fba8 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001144:	e023      	b.n	800118e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_TIM_MspPostInit+0xc0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d11e      	bne.n	800118e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800116c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800117e:	2309      	movs	r3, #9
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <HAL_TIM_MspPostInit+0xc4>)
 800118a:	f000 fb83 	bl	8001894 <HAL_GPIO_Init>
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40010000 	.word	0x40010000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40001800 	.word	0x40001800
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_UART_MspInit+0x94>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d133      	bne.n	8001236 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001216:	2308      	movs	r3, #8
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_UART_MspInit+0x9c>)
 8001222:	f000 fb37 	bl	8001894 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2047      	movs	r0, #71	; 0x47
 800122c:	f000 f9f1 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001230:	2047      	movs	r0, #71	; 0x47
 8001232:	f000 fa0a 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40011400 	.word	0x40011400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f8cb 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <USART6_IRQHandler+0x18>)
 80012a2:	f002 fb15 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  HAL_UART_Receive_IT(&huart6, &c, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <USART6_IRQHandler+0x1c>)
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <USART6_IRQHandler+0x18>)
 80012ac:	f002 faeb 	bl	8003886 <HAL_UART_Receive_IT>
  /* USER CODE END USART6_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000140 	.word	0x20000140
 80012b8:	200001b8 	.word	0x200001b8

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f003 f9a0 	bl	8004630 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20020000 	.word	0x20020000
 800131c:	00000400 	.word	0x00000400
 8001320:	200006c8 	.word	0x200006c8
 8001324:	20000818 	.word	0x20000818

08001328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800136c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001338:	f7ff fff6 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f003 f96b 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff f8bf 	bl	80004e8 <main>
  bx  lr
 800136a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800136c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001378:	08005a44 	.word	0x08005a44
  ldr r2, =_sbss
 800137c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001380:	20000818 	.word	0x20000818

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_Init+0x40>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_Init+0x40>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x40>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f923 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fdd2 	bl	8000f64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f93b 	bl	8001666 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f903 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000000c 	.word	0x2000000c
 800144c:	200006cc 	.word	0x200006cc

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200006cc 	.word	0x200006cc

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4906      	ldr	r1, [pc, #24]	; (80014fc <__NVIC_EnableIRQ+0x34>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff90 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff2d 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff42 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff35 	bl	80014c8 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e014      	b.n	80016ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fc85 	bl	8000fb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b089      	sub	sp, #36	; 0x24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_DAC_ConfigChannel+0x1c>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e042      	b.n	8001768 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	795b      	ldrb	r3, [r3, #5]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_DAC_ConfigChannel+0x2c>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e03c      	b.n	8001768 <HAL_DAC_ConfigChannel+0xa6>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2202      	movs	r2, #2
 80016f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	f640 72fe 	movw	r2, #4094	; 0xffe
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	22c0      	movs	r2, #192	; 0xc0
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001766:	7ffb      	ldrb	r3, [r7, #31]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3724      	adds	r7, #36	; 0x24
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fe66 	bl	8001450 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e052      	b.n	800184a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0216 	bic.w	r2, r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <HAL_DMA_Abort+0x62>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f4:	e013      	b.n	800181e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f6:	f7ff fe2b 	bl	8001450 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d90c      	bls.n	800181e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e015      	b.n	800184a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e4      	bne.n	80017f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	223f      	movs	r2, #63	; 0x3f
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d004      	beq.n	8001870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e00c      	b.n	800188a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2205      	movs	r2, #5
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e16f      	b.n	8001b84 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8161 	beq.w	8001b7e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80bb 	beq.w	8001b7e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	4a63      	ldr	r2, [pc, #396]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a16:	6453      	str	r3, [r2, #68]	; 0x44
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a24:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_GPIO_Init+0x310>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_GPIO_Init+0x314>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d031      	beq.n	8001ab4 <HAL_GPIO_Init+0x220>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a56      	ldr	r2, [pc, #344]	; (8001bac <HAL_GPIO_Init+0x318>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d02b      	beq.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a55      	ldr	r2, [pc, #340]	; (8001bb0 <HAL_GPIO_Init+0x31c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d025      	beq.n	8001aac <HAL_GPIO_Init+0x218>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_GPIO_Init+0x320>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d01f      	beq.n	8001aa8 <HAL_GPIO_Init+0x214>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a53      	ldr	r2, [pc, #332]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d019      	beq.n	8001aa4 <HAL_GPIO_Init+0x210>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x328>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_GPIO_Init+0x20c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a51      	ldr	r2, [pc, #324]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x208>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a50      	ldr	r2, [pc, #320]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a4f      	ldr	r2, [pc, #316]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x200>
 8001a90:	2308      	movs	r3, #8
 8001a92:	e010      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001a94:	2309      	movs	r3, #9
 8001a96:	e00e      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001a98:	2307      	movs	r3, #7
 8001a9a:	e00c      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	e00a      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac8:	4936      	ldr	r1, [pc, #216]	; (8001ba4 <HAL_GPIO_Init+0x310>)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001afa:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae88 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e23b      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d050      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1e:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4b98      	ldr	r3, [pc, #608]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d036      	beq.n	8001cbe <HAL_RCC_OscConfig+0xbe>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d132      	bne.n	8001cbe <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e216      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <HAL_RCC_OscConfig+0x29c>)
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fbef 	bl	8001450 <HAL_GetTick>
 8001c72:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c76:	f7ff fbeb 	bl	8001450 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e200      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c88:	4b83      	ldr	r3, [pc, #524]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x76>
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fbdb 	bl	8001450 <HAL_GetTick>
 8001c9a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7ff fbd7 	bl	8001450 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1ec      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb0:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x9e>
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d077      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ccc:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d126      	bne.n	8001d32 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d120      	bne.n	8001d32 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf0:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e1c0      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	21f8      	movs	r1, #248	; 0xf8
 8001d16:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	69b9      	ldr	r1, [r7, #24]
 8001d1a:	fa91 f1a1 	rbit	r1, r1
 8001d1e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d20:	6979      	ldr	r1, [r7, #20]
 8001d22:	fab1 f181 	clz	r1, r1
 8001d26:	b2c9      	uxtb	r1, r1
 8001d28:	408b      	lsls	r3, r1
 8001d2a:	495b      	ldr	r1, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d30:	e044      	b.n	8001dbc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02a      	beq.n	8001d90 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_OscConfig+0x2a0>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb86 	bl	8001450 <HAL_GetTick>
 8001d44:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff fb82 	bl	8001450 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e197      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	21f8      	movs	r1, #248	; 0xf8
 8001d74:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6939      	ldr	r1, [r7, #16]
 8001d78:	fa91 f1a1 	rbit	r1, r1
 8001d7c:	60f9      	str	r1, [r7, #12]
  return result;
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	fab1 f181 	clz	r1, r1
 8001d84:	b2c9      	uxtb	r1, r1
 8001d86:	408b      	lsls	r3, r1
 8001d88:	4943      	ldr	r1, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x2a0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fb5b 	bl	8001450 <HAL_GetTick>
 8001d9a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fb57 	bl	8001450 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e16c      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d030      	beq.n	8001e2a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d016      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x2a4>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb3b 	bl	8001450 <HAL_GetTick>
 8001dda:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fb37 	bl	8001450 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e14c      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x1de>
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_RCC_OscConfig+0x2a4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fb24 	bl	8001450 <HAL_GetTick>
 8001e08:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb20 	bl	8001450 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e135      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d110      	bne.n	8001e6c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_RCC_OscConfig+0x2a8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_RCC_OscConfig+0x2a8>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x2a8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d122      	bne.n	8001eca <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_RCC_OscConfig+0x2a8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_RCC_OscConfig+0x2a8>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fade 	bl	8001450 <HAL_GetTick>
 8001e94:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	e012      	b.n	8001ebe <HAL_RCC_OscConfig+0x2be>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40023802 	.word	0x40023802
 8001ea0:	42470000 	.word	0x42470000
 8001ea4:	42470e80 	.word	0x42470e80
 8001ea8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7ff fad0 	bl	8001450 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0e5      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x494>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x498>)
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fab8 	bl	8001450 <HAL_GetTick>
 8001ee0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fab4 	bl	8001450 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0c7      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ee      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2e4>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff faa2 	bl	8001450 <HAL_GetTick>
 8001f0c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff fa9e 	bl	8001450 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0b1      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ee      	bne.n	8001f10 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a57      	ldr	r2, [pc, #348]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 809c 	beq.w	8002088 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d061      	beq.n	8002020 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d146      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCC_OscConfig+0x4a0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fa71 	bl	8001450 <HAL_GetTick>
 8001f6e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fa6d 	bl	8001450 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	; 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e082      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x4a4>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	69d1      	ldr	r1, [r2, #28]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6a12      	ldr	r2, [r2, #32]
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa6:	0192      	lsls	r2, r2, #6
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fae:	0612      	lsls	r2, r2, #24
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0412      	lsls	r2, r2, #16
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCC_OscConfig+0x4a0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fa41 	bl	8001450 <HAL_GetTick>
 8001fce:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fa3d 	bl	8001450 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e052      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3d2>
 8001ff0:	e04a      	b.n	8002088 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x4a0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fa2a 	bl	8001450 <HAL_GetTick>
 8001ffc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fa26 	bl	8001450 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e03b      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x400>
 800201e:	e033      	b.n	8002088 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e02e      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x49c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	d121      	bne.n	8002084 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d11a      	bne.n	8002084 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800205a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800205c:	4293      	cmp	r3, r2
 800205e:	d111      	bne.n	8002084 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	3b01      	subs	r3, #1
 800206e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000
 8002098:	40023870 	.word	0x40023870
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470060 	.word	0x42470060
 80020a4:	f0bc8000 	.word	0xf0bc8000

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d2      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d90c      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0be      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002114:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4950      	ldr	r1, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e085      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e079      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e071      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4939      	ldr	r1, [pc, #228]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff f95e 	bl	8001450 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff f95a 	bl	8001450 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e059      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d20c      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e03c      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	491b      	ldr	r1, [pc, #108]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4913      	ldr	r1, [pc, #76]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002226:	f000 f82b 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800222a:	4601      	mov	r1, r0
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	22f0      	movs	r2, #240	; 0xf0
 8002236:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	60fa      	str	r2, [r7, #12]
  return result;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	40d3      	lsrs	r3, r2
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1cc>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	fa21 f303 	lsr.w	r3, r1, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1d0>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f8b6 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	080058cc 	.word	0x080058cc
 8002278:	20000004 	.word	0x20000004
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b090      	sub	sp, #64	; 0x40
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f200 80a2 	bhi.w	80023ee <HAL_RCC_GetSysClockFreq+0x16e>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022b2:	e09c      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022b8:	e09c      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022be:	e099      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d027      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	627a      	str	r2, [r7, #36]	; 0x24
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e8:	2100      	movs	r1, #0
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022ec:	fb03 f201 	mul.w	r2, r3, r1
 80022f0:	2300      	movs	r3, #0
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	4a43      	ldr	r2, [pc, #268]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022fa:	fba0 2102 	umull	r2, r1, r0, r2
 80022fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002300:	62ba      	str	r2, [r7, #40]	; 0x28
 8002302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002304:	4413      	add	r3, r2
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	2200      	movs	r2, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	61fa      	str	r2, [r7, #28]
 8002310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002314:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002318:	f7fd ff66 	bl	80001e8 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002324:	e055      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	2200      	movs	r2, #0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	617a      	str	r2, [r7, #20]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002338:	f04f 0b00 	mov.w	fp, #0
 800233c:	4652      	mov	r2, sl
 800233e:	465b      	mov	r3, fp
 8002340:	f04f 0000 	mov.w	r0, #0
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	0159      	lsls	r1, r3, #5
 800234a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234e:	0150      	lsls	r0, r2, #5
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	ebb2 080a 	subs.w	r8, r2, sl
 8002358:	eb63 090b 	sbc.w	r9, r3, fp
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002368:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800236c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002370:	ebb2 0408 	subs.w	r4, r2, r8
 8002374:	eb63 0509 	sbc.w	r5, r3, r9
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	00eb      	lsls	r3, r5, #3
 8002382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002386:	00e2      	lsls	r2, r4, #3
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	eb14 030a 	adds.w	r3, r4, sl
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	eb45 030b 	adc.w	r3, r5, fp
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a4:	4629      	mov	r1, r5
 80023a6:	028b      	lsls	r3, r1, #10
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	4604      	mov	r4, r0
 80023ae:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80023b2:	4601      	mov	r1, r0
 80023b4:	028a      	lsls	r2, r1, #10
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	2200      	movs	r2, #0
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	60fa      	str	r2, [r7, #12]
 80023c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c6:	f7fd ff0f 	bl	80001e8 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4613      	mov	r3, r2
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	3301      	adds	r3, #1
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3740      	adds	r7, #64	; 0x40
 80023fa:	46bd      	mov	sp, r7
 80023fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	017d7840 	.word	0x017d7840

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <HAL_RCC_GetHCLKFreq+0x10>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002426:	f7ff fff1 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242a:	4601      	mov	r1, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002434:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	603a      	str	r2, [r7, #0]
  return result;
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	40d3      	lsrs	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x40>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	080058dc 	.word	0x080058dc

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800246a:	f7ff ffcf 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800246e:	4601      	mov	r1, r0
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002478:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800247c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	603a      	str	r2, [r7, #0]
  return result;
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	40d3      	lsrs	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	080058dc 	.word	0x080058dc

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d14c      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d2:	f7fe ffbd 	bl	8001450 <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024da:	f7fe ffb9 	bl	8001450 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0c7      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	613a      	str	r2, [r7, #16]
  return result;
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	fa03 f202 	lsl.w	r2, r3, r2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800251e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	69f9      	ldr	r1, [r7, #28]
 8002522:	fa91 f1a1 	rbit	r1, r1
 8002526:	61b9      	str	r1, [r7, #24]
  return result;
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	fab1 f181 	clz	r1, r1
 800252e:	b2c9      	uxtb	r1, r1
 8002530:	408b      	lsls	r3, r1
 8002532:	4955      	ldr	r1, [pc, #340]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800253a:	4b52      	ldr	r3, [pc, #328]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe ff86 	bl	8001450 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002548:	f7fe ff82 	bl	8001450 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e090      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8083 	beq.w	800267a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002590:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3d      	ldr	r2, [pc, #244]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe ff58 	bl	8001450 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe ff54 	bl	8001450 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e062      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02f      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d028      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e0:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e8:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d114      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe ff22 	bl	8001450 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe ff1e 	bl	8001450 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e02a      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ee      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263e:	d10d      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002662:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002666:	6093      	str	r3, [r2, #8]
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800266a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002676:	4313      	orrs	r3, r2
 8002678:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	42470068 	.word	0x42470068
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000
 8002690:	42470e40 	.word	0x42470e40

08002694 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e073      	b.n	8002792 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7f5b      	ldrb	r3, [r3, #29]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fcbc 	bl	8001038 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d055      	beq.n	8002780 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	22ca      	movs	r2, #202	; 0xca
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2253      	movs	r2, #83	; 0x53
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f87d 	bl	80027e4 <RTC_EnterInitMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d12c      	bne.n	800274e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002706:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6919      	ldr	r1, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f884 	bl	8002852 <RTC_ExitInitMode>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	22ff      	movs	r2, #255	; 0xff
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
 800277e:	e001      	b.n	8002784 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f643 7257 	movw	r2, #16215	; 0x3f57
 80027ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b0:	f7fe fe4e 	bl	8001450 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027b6:	e009      	b.n	80027cc <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027b8:	f7fe fe4a 	bl	8001450 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c6:	d901      	bls.n	80027cc <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e007      	b.n	80027dc <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d122      	bne.n	8002848 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002810:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002812:	f7fe fe1d 	bl	8001450 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002818:	e00c      	b.n	8002834 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800281a:	f7fe fe19 	bl	8001450 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002828:	d904      	bls.n	8002834 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <RTC_EnterInitMode+0x64>
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d1e8      	bne.n	800281a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286c:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff93 	bl	800279a <HAL_RTC_WaitForSynchro>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e041      	b.n	8002924 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fbf5 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 fb29 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e041      	b.n	80029c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fb86 	bl	8001064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 fada 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_TIM_PWM_Start+0x24>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e022      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d109      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x3e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e015      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d109      	bne.n	8002a24 <HAL_TIM_PWM_Start+0x58>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e008      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07c      	b.n	8002b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0x82>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a4c:	e013      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x92>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xa2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	e003      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fd30 	bl	80034e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_TIM_PWM_Start+0x174>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <HAL_TIM_PWM_Start+0x178>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_PWM_Start+0xd0>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_PWM_Start+0xd2>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_TIM_PWM_Start+0x174>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d01d      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <HAL_TIM_PWM_Start+0x17c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_TIM_PWM_Start+0x180>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_TIM_PWM_Start+0x184>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <HAL_TIM_PWM_Start+0x178>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIM_PWM_Start+0x188>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIM_PWM_Start+0x18c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d010      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	e007      	b.n	8002b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40001800 	.word	0x40001800

08002b5c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e041      	b.n	8002bf4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f839 	bl	8002bfc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f000 f9c1 	bl	8002f24 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0ae      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	f200 809f 	bhi.w	8002d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002d7d 	.word	0x08002d7d
 8002c4c:	08002d7d 	.word	0x08002d7d
 8002c50:	08002d7d 	.word	0x08002d7d
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002d7d 	.word	0x08002d7d
 8002c5c:	08002d7d 	.word	0x08002d7d
 8002c60:	08002d7d 	.word	0x08002d7d
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002d7d 	.word	0x08002d7d
 8002c6c:	08002d7d 	.word	0x08002d7d
 8002c70:	08002d7d 	.word	0x08002d7d
 8002c74:	08002d3b 	.word	0x08002d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f9ee 	bl	8003060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6999      	ldr	r1, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
      break;
 8002cb6:	e064      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa3e 	bl	8003140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
      break;
 8002cf8:	e043      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa91 	bl	8003228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0208 	orr.w	r2, r2, #8
 8002d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
      break;
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fae5 	bl	8003310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0b4      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x186>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d03e      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xd4>
 8002dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dee:	f200 8087 	bhi.w	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	f000 8086 	beq.w	8002f06 <HAL_TIM_ConfigClockSource+0x172>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d87f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d01a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xa6>
 8002e04:	2b70      	cmp	r3, #112	; 0x70
 8002e06:	d87b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b60      	cmp	r3, #96	; 0x60
 8002e0a:	d050      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x11a>
 8002e0c:	2b60      	cmp	r3, #96	; 0x60
 8002e0e:	d877      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d03c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0xfa>
 8002e14:	2b50      	cmp	r3, #80	; 0x50
 8002e16:	d873      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d058      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x13a>
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d86f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d064      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	2b30      	cmp	r3, #48	; 0x30
 8002e26:	d86b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d060      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d867      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05c      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d05a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	e062      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	f000 fb2c 	bl	80034a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]
      break;
 8002e66:	e04f      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	f000 fb15 	bl	80034a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e8a:	609a      	str	r2, [r3, #8]
      break;
 8002e8c:	e03c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fa8c 	bl	80033b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2150      	movs	r1, #80	; 0x50
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fae3 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002eac:	e02c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 faaa 	bl	8003414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2160      	movs	r1, #96	; 0x60
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fad3 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 fa6c 	bl	80033b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fac3 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e00c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f000 faba 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002efe:	e003      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3f      	ldr	r2, [pc, #252]	; (8003034 <TIM_Base_SetConfig+0x110>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <TIM_Base_SetConfig+0x114>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <TIM_Base_SetConfig+0x118>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <TIM_Base_SetConfig+0x11c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a39      	ldr	r2, [pc, #228]	; (8003044 <TIM_Base_SetConfig+0x120>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <TIM_Base_SetConfig+0x110>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d027      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <TIM_Base_SetConfig+0x114>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d023      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <TIM_Base_SetConfig+0x118>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <TIM_Base_SetConfig+0x11c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a28      	ldr	r2, [pc, #160]	; (8003044 <TIM_Base_SetConfig+0x120>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d017      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a27      	ldr	r2, [pc, #156]	; (8003048 <TIM_Base_SetConfig+0x124>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <TIM_Base_SetConfig+0x128>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a25      	ldr	r2, [pc, #148]	; (8003050 <TIM_Base_SetConfig+0x12c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <TIM_Base_SetConfig+0x130>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <TIM_Base_SetConfig+0x134>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <TIM_Base_SetConfig+0x138>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <TIM_Base_SetConfig+0x110>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_Base_SetConfig+0xf8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <TIM_Base_SetConfig+0x120>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	615a      	str	r2, [r3, #20]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40010000 	.word	0x40010000
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40010400 	.word	0x40010400
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400
 8003050:	40014800 	.word	0x40014800
 8003054:	40001800 	.word	0x40001800
 8003058:	40001c00 	.word	0x40001c00
 800305c:	40002000 	.word	0x40002000

08003060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 0201 	bic.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <TIM_OC1_SetConfig+0xd8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <TIM_OC1_SetConfig+0x64>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1f      	ldr	r2, [pc, #124]	; (800313c <TIM_OC1_SetConfig+0xdc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0308 	bic.w	r3, r3, #8
 80030ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <TIM_OC1_SetConfig+0xd8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <TIM_OC1_SetConfig+0x8e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <TIM_OC1_SetConfig+0xdc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d111      	bne.n	8003112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 0210 	bic.w	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0320 	bic.w	r3, r3, #32
 800318a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_OC2_SetConfig+0xe0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_OC2_SetConfig+0x68>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_OC2_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC2_SetConfig+0xe0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_OC2_SetConfig+0x94>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <TIM_OC2_SetConfig+0xe4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d113      	bne.n	80031fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_OC3_SetConfig+0xe0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_OC3_SetConfig+0x66>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <TIM_OC3_SetConfig+0xe4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10d      	bne.n	80032aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <TIM_OC3_SetConfig+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_OC3_SetConfig+0x92>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <TIM_OC3_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d113      	bne.n	80032e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40010400 	.word	0x40010400

08003310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800335a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <TIM_OC4_SetConfig+0xa0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC4_SetConfig+0x68>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <TIM_OC4_SetConfig+0xa4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d109      	bne.n	800338c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400

080033b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 030a 	bic.w	r3, r3, #10
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	031b      	lsls	r3, r3, #12
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	f043 0307 	orr.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	609a      	str	r2, [r3, #8]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2201      	movs	r2, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e05a      	b.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d01d      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10c      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40010400 	.word	0x40010400
 8003618:	40014000 	.word	0x40014000
 800361c:	40001800 	.word	0x40001800

08003620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e03d      	b.n	80036b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e04d      	b.n	8003772 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d111      	bne.n	8003706 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fbd2 	bl	8003e94 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a20      	ldr	r2, [pc, #128]	; (800377c <HAL_UART_Init+0xb8>)
 80036fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2224      	movs	r2, #36	; 0x24
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fe34 	bl	800438c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003732:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003742:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003752:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	080011ad 	.word	0x080011ad

08003780 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d16d      	bne.n	800387c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x2c>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e066      	b.n	800387e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2221      	movs	r2, #33	; 0x21
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fd fe47 	bl	8001450 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	d108      	bne.n	80037ec <HAL_UART_Transmit+0x6c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e003      	b.n	80037f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f4:	e02a      	b.n	800384c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb7d 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e036      	b.n	800387e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003824:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	3302      	adds	r3, #2
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e007      	b.n	800383e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3301      	adds	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1cf      	bne.n	80037f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fb4d 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e006      	b.n	800387e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b20      	cmp	r3, #32
 800389e:	d112      	bne.n	80038c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_UART_Receive_IT+0x26>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e00b      	b.n	80038c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fb8d 	bl	8003fdc <UART_Start_Receive_IT>
 80038c2:	4603      	mov	r3, r0
 80038c4:	e000      	b.n	80038c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0ba      	sub	sp, #232	; 0xe8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800390e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fc6c 	bl	800420c <UART_Receive_IT>
      return;
 8003934:	e260      	b.n	8003df8 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80e1 	beq.w	8003b02 <HAL_UART_IRQHandler+0x232>
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80d4 	beq.w	8003b02 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
 800398a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0202 	orr.w	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 81f7 	beq.w	8003dee <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fbf7 	bl	800420c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_UART_IRQHandler+0x17a>
 8003a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d051      	beq.n	8003aee <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 faff 	bl	800404e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d142      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1d9      	bne.n	8003a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	4a80      	ldr	r2, [pc, #512]	; (8003cb8 <HAL_UART_IRQHandler+0x3e8>)
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fec7 	bl	8001852 <HAL_DMA_Abort_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e011      	b.n	8003afe <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae2:	e00c      	b.n	8003afe <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e007      	b.n	8003afe <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003afc:	e177      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	bf00      	nop
    return;
 8003b00:	e175      	b.n	8003dee <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f040 8151 	bne.w	8003dae <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 814a 	beq.w	8003dae <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8143 	beq.w	8003dae <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	f040 80b7 	bne.w	8003cbc <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8147 	beq.w	8003df2 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f080 8140 	bcs.w	8003df2 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b84:	f000 8088 	beq.w	8003c98 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bb4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1d9      	bne.n	8003b88 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e1      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e3      	bne.n	8003c10 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c68:	f023 0310 	bic.w	r3, r3, #16
 8003c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fd6d 	bl	8001772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003caa:	b292      	uxth	r2, r2
 8003cac:	1a8a      	subs	r2, r1, r2
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb6:	e09c      	b.n	8003df2 <HAL_UART_IRQHandler+0x522>
 8003cb8:	08004113 	.word	0x08004113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 808f 	beq.w	8003df6 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 808a 	beq.w	8003df6 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d06:	647a      	str	r2, [r7, #68]	; 0x44
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e3      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	623b      	str	r3, [r7, #32]
   return(result);
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e3      	bne.n	8003d1a <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0310 	bic.w	r3, r3, #16
 8003d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d84:	61fa      	str	r2, [r7, #28]
 8003d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	69b9      	ldr	r1, [r7, #24]
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	617b      	str	r3, [r7, #20]
   return(result);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e3      	bne.n	8003d60 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003da6:	4611      	mov	r1, r2
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dac:	e023      	b.n	8003df6 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_UART_IRQHandler+0x4fe>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9b8 	bl	800413c <UART_Transmit_IT>
    return;
 8003dcc:	e014      	b.n	8003df8 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00e      	beq.n	8003df8 <HAL_UART_IRQHandler+0x528>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9f7 	bl	80041da <UART_EndTransmit_IT>
    return;
 8003dec:	e004      	b.n	8003df8 <HAL_UART_IRQHandler+0x528>
    return;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <HAL_UART_IRQHandler+0x528>
      return;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HAL_UART_IRQHandler+0x528>
      return;
 8003df6:	bf00      	nop
  }
}
 8003df8:	37e8      	adds	r7, #232	; 0xe8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <UART_InitCallbacksToDefault+0x48>)
 8003ea0:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <UART_InitCallbacksToDefault+0x4c>)
 8003ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <UART_InitCallbacksToDefault+0x50>)
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <UART_InitCallbacksToDefault+0x54>)
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <UART_InitCallbacksToDefault+0x58>)
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <UART_InitCallbacksToDefault+0x5c>)
 8003ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <UART_InitCallbacksToDefault+0x60>)
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <UART_InitCallbacksToDefault+0x64>)
 8003eca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <UART_InitCallbacksToDefault+0x68>)
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c

}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	08003e13 	.word	0x08003e13
 8003ee0:	08003e01 	.word	0x08003e01
 8003ee4:	08003e25 	.word	0x08003e25
 8003ee8:	08000ead 	.word	0x08000ead
 8003eec:	08003e37 	.word	0x08003e37
 8003ef0:	08003e49 	.word	0x08003e49
 8003ef4:	08003e5b 	.word	0x08003e5b
 8003ef8:	08003e6d 	.word	0x08003e6d
 8003efc:	08003e7f 	.word	0x08003e7f

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b090      	sub	sp, #64	; 0x40
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	e050      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d04c      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f20:	f7fd fa96 	bl	8001450 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d241      	bcs.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f50:	637a      	str	r2, [r7, #52]	; 0x34
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f84:	623a      	str	r2, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e00f      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d09f      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3740      	adds	r7, #64	; 0x40
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2222      	movs	r2, #34	; 0x22
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0220 	orr.w	r2, r2, #32
 8004040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b095      	sub	sp, #84	; 0x54
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004076:	643a      	str	r2, [r7, #64]	; 0x40
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800407c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	61fb      	str	r3, [r7, #28]
   return(result);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d119      	bne.n	80040fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e6:	61ba      	str	r2, [r7, #24]
 80040e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6979      	ldr	r1, [r7, #20]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	613b      	str	r3, [r7, #16]
   return(result);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004108:	bf00      	nop
 800410a:	3754      	adds	r7, #84	; 0x54
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b21      	cmp	r3, #33	; 0x21
 800414e:	d13e      	bne.n	80041ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d114      	bne.n	8004184 <UART_Transmit_IT+0x48>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d110      	bne.n	8004184 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004176:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]
 8004182:	e008      	b.n	8004196 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	1c59      	adds	r1, r3, #1
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6211      	str	r1, [r2, #32]
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b22      	cmp	r3, #34	; 0x22
 800421e:	f040 80b0 	bne.w	8004382 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d117      	bne.n	800425c <UART_Receive_IT+0x50>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d113      	bne.n	800425c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	b29a      	uxth	r2, r3
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
 800425a:	e026      	b.n	80042aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d007      	beq.n	8004280 <UART_Receive_IT+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <UART_Receive_IT+0x82>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e008      	b.n	80042a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4619      	mov	r1, r3
 80042b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d15f      	bne.n	800437e <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0220 	bic.w	r2, r2, #32
 80042cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	d136      	bne.n	8004372 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	613b      	str	r3, [r7, #16]
   return(result);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	623a      	str	r2, [r7, #32]
 800432c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	69f9      	ldr	r1, [r7, #28]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	61bb      	str	r3, [r7, #24]
   return(result);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d10a      	bne.n	8004362 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800436a:	4611      	mov	r1, r2
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
 8004370:	e003      	b.n	800437a <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e002      	b.n	8004384 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3730      	adds	r7, #48	; 0x30
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043cc:	f023 030c 	bic.w	r3, r3, #12
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a57      	ldr	r2, [pc, #348]	; (8004554 <UART_SetConfig+0x1c8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <UART_SetConfig+0x78>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a56      	ldr	r2, [pc, #344]	; (8004558 <UART_SetConfig+0x1cc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe f82e 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	e002      	b.n	8004412 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7fe f808 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
 8004410:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d14c      	bne.n	80044b6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	4a4a      	ldr	r2, [pc, #296]	; (800455c <UART_SetConfig+0x1d0>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	0119      	lsls	r1, r3, #4
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009a      	lsls	r2, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <UART_SetConfig+0x1d0>)
 8004454:	fba3 0302 	umull	r0, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	2064      	movs	r0, #100	; 0x64
 800445c:	fb00 f303 	mul.w	r3, r0, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	3332      	adds	r3, #50	; 0x32
 8004466:	4a3d      	ldr	r2, [pc, #244]	; (800455c <UART_SetConfig+0x1d0>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004474:	4419      	add	r1, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009a      	lsls	r2, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fbb2 f2f3 	udiv	r2, r2, r3
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <UART_SetConfig+0x1d0>)
 800448e:	fba3 0302 	umull	r0, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2064      	movs	r0, #100	; 0x64
 8004496:	fb00 f303 	mul.w	r3, r0, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a2e      	ldr	r2, [pc, #184]	; (800455c <UART_SetConfig+0x1d0>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	440a      	add	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044b4:	e04a      	b.n	800454c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <UART_SetConfig+0x1d0>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	0119      	lsls	r1, r3, #4
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009a      	lsls	r2, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <UART_SetConfig+0x1d0>)
 80044ee:	fba3 0302 	umull	r0, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2064      	movs	r0, #100	; 0x64
 80044f6:	fb00 f303 	mul.w	r3, r0, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <UART_SetConfig+0x1d0>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	4419      	add	r1, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f2f3 	udiv	r2, r2, r3
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <UART_SetConfig+0x1d0>)
 8004526:	fba3 0302 	umull	r0, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a08      	ldr	r2, [pc, #32]	; (800455c <UART_SetConfig+0x1d0>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	440a      	add	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40011000 	.word	0x40011000
 8004558:	40011400 	.word	0x40011400
 800455c:	51eb851f 	.word	0x51eb851f

08004560 <sniprintf>:
 8004560:	b40c      	push	{r2, r3}
 8004562:	b530      	push	{r4, r5, lr}
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <sniprintf+0x64>)
 8004566:	1e0c      	subs	r4, r1, #0
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	b09d      	sub	sp, #116	; 0x74
 800456c:	da08      	bge.n	8004580 <sniprintf+0x20>
 800456e:	238b      	movs	r3, #139	; 0x8b
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	b01d      	add	sp, #116	; 0x74
 8004578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800457c:	b002      	add	sp, #8
 800457e:	4770      	bx	lr
 8004580:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004584:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004588:	bf0c      	ite	eq
 800458a:	4623      	moveq	r3, r4
 800458c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	9307      	str	r3, [sp, #28]
 8004594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004598:	9002      	str	r0, [sp, #8]
 800459a:	9006      	str	r0, [sp, #24]
 800459c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045a0:	4628      	mov	r0, r5
 80045a2:	ab21      	add	r3, sp, #132	; 0x84
 80045a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045a6:	a902      	add	r1, sp, #8
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	f000 f9c3 	bl	8004934 <_svfiprintf_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	bfbc      	itt	lt
 80045b2:	238b      	movlt	r3, #139	; 0x8b
 80045b4:	602b      	strlt	r3, [r5, #0]
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	d0dd      	beq.n	8004576 <sniprintf+0x16>
 80045ba:	2200      	movs	r2, #0
 80045bc:	9b02      	ldr	r3, [sp, #8]
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e7d9      	b.n	8004576 <sniprintf+0x16>
 80045c2:	bf00      	nop
 80045c4:	2000005c 	.word	0x2000005c

080045c8 <siscanf>:
 80045c8:	b40e      	push	{r1, r2, r3}
 80045ca:	f44f 7201 	mov.w	r2, #516	; 0x204
 80045ce:	b530      	push	{r4, r5, lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	ac1f      	add	r4, sp, #124	; 0x7c
 80045d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80045d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80045dc:	9002      	str	r0, [sp, #8]
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	f7fb fdfa 	bl	80001d8 <strlen>
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <siscanf+0x4c>)
 80045e6:	9003      	str	r0, [sp, #12]
 80045e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ea:	2300      	movs	r3, #0
 80045ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80045ee:	9314      	str	r3, [sp, #80]	; 0x50
 80045f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045f4:	9007      	str	r0, [sp, #28]
 80045f6:	4808      	ldr	r0, [pc, #32]	; (8004618 <siscanf+0x50>)
 80045f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045fc:	462a      	mov	r2, r5
 80045fe:	4623      	mov	r3, r4
 8004600:	a902      	add	r1, sp, #8
 8004602:	6800      	ldr	r0, [r0, #0]
 8004604:	9401      	str	r4, [sp, #4]
 8004606:	f000 faed 	bl	8004be4 <__ssvfiscanf_r>
 800460a:	b01c      	add	sp, #112	; 0x70
 800460c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004610:	b003      	add	sp, #12
 8004612:	4770      	bx	lr
 8004614:	0800461d 	.word	0x0800461d
 8004618:	2000005c 	.word	0x2000005c

0800461c <__seofread>:
 800461c:	2000      	movs	r0, #0
 800461e:	4770      	bx	lr

08004620 <memset>:
 8004620:	4603      	mov	r3, r0
 8004622:	4402      	add	r2, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	f803 1b01 	strb.w	r1, [r3], #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000005c 	.word	0x2000005c

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	2600      	movs	r6, #0
 8004640:	4d0c      	ldr	r5, [pc, #48]	; (8004674 <__libc_init_array+0x38>)
 8004642:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <__libc_init_array+0x3c>)
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	f001 f906 	bl	800585c <_init>
 8004650:	2600      	movs	r6, #0
 8004652:	4d0a      	ldr	r5, [pc, #40]	; (800467c <__libc_init_array+0x40>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	; (8004680 <__libc_init_array+0x44>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08005a3c 	.word	0x08005a3c
 8004678:	08005a3c 	.word	0x08005a3c
 800467c:	08005a3c 	.word	0x08005a3c
 8004680:	08005a40 	.word	0x08005a40

08004684 <__retarget_lock_acquire_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_release_recursive>:
 8004686:	4770      	bx	lr

08004688 <strcpy>:
 8004688:	4603      	mov	r3, r0
 800468a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468e:	f803 2b01 	strb.w	r2, [r3], #1
 8004692:	2a00      	cmp	r2, #0
 8004694:	d1f9      	bne.n	800468a <strcpy+0x2>
 8004696:	4770      	bx	lr

08004698 <_free_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	2900      	cmp	r1, #0
 800469e:	d040      	beq.n	8004722 <_free_r+0x8a>
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	18e4      	addlt	r4, r4, r3
 80046ac:	f000 f8dc 	bl	8004868 <__malloc_lock>
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <_free_r+0x8c>)
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	b933      	cbnz	r3, 80046c4 <_free_r+0x2c>
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	4628      	mov	r0, r5
 80046bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c0:	f000 b8d8 	b.w	8004874 <__malloc_unlock>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d908      	bls.n	80046da <_free_r+0x42>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf01      	itttt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	e7ed      	b.n	80046b6 <_free_r+0x1e>
 80046da:	461a      	mov	r2, r3
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b10b      	cbz	r3, 80046e4 <_free_r+0x4c>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d9fa      	bls.n	80046da <_free_r+0x42>
 80046e4:	6811      	ldr	r1, [r2, #0]
 80046e6:	1850      	adds	r0, r2, r1
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d10b      	bne.n	8004704 <_free_r+0x6c>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	4401      	add	r1, r0
 80046f0:	1850      	adds	r0, r2, r1
 80046f2:	4283      	cmp	r3, r0
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	d1e0      	bne.n	80046ba <_free_r+0x22>
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4408      	add	r0, r1
 80046fe:	6010      	str	r0, [r2, #0]
 8004700:	6053      	str	r3, [r2, #4]
 8004702:	e7da      	b.n	80046ba <_free_r+0x22>
 8004704:	d902      	bls.n	800470c <_free_r+0x74>
 8004706:	230c      	movs	r3, #12
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	e7d6      	b.n	80046ba <_free_r+0x22>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	1821      	adds	r1, r4, r0
 8004710:	428b      	cmp	r3, r1
 8004712:	bf01      	itttt	eq
 8004714:	6819      	ldreq	r1, [r3, #0]
 8004716:	685b      	ldreq	r3, [r3, #4]
 8004718:	1809      	addeq	r1, r1, r0
 800471a:	6021      	streq	r1, [r4, #0]
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6054      	str	r4, [r2, #4]
 8004720:	e7cb      	b.n	80046ba <_free_r+0x22>
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	20000810 	.word	0x20000810

08004728 <sbrk_aligned>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4e0e      	ldr	r6, [pc, #56]	; (8004764 <sbrk_aligned+0x3c>)
 800472c:	460c      	mov	r4, r1
 800472e:	6831      	ldr	r1, [r6, #0]
 8004730:	4605      	mov	r5, r0
 8004732:	b911      	cbnz	r1, 800473a <sbrk_aligned+0x12>
 8004734:	f000 ff3a 	bl	80055ac <_sbrk_r>
 8004738:	6030      	str	r0, [r6, #0]
 800473a:	4621      	mov	r1, r4
 800473c:	4628      	mov	r0, r5
 800473e:	f000 ff35 	bl	80055ac <_sbrk_r>
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	d00a      	beq.n	800475c <sbrk_aligned+0x34>
 8004746:	1cc4      	adds	r4, r0, #3
 8004748:	f024 0403 	bic.w	r4, r4, #3
 800474c:	42a0      	cmp	r0, r4
 800474e:	d007      	beq.n	8004760 <sbrk_aligned+0x38>
 8004750:	1a21      	subs	r1, r4, r0
 8004752:	4628      	mov	r0, r5
 8004754:	f000 ff2a 	bl	80055ac <_sbrk_r>
 8004758:	3001      	adds	r0, #1
 800475a:	d101      	bne.n	8004760 <sbrk_aligned+0x38>
 800475c:	f04f 34ff 	mov.w	r4, #4294967295
 8004760:	4620      	mov	r0, r4
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	20000814 	.word	0x20000814

08004768 <_malloc_r>:
 8004768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800476c:	1ccd      	adds	r5, r1, #3
 800476e:	f025 0503 	bic.w	r5, r5, #3
 8004772:	3508      	adds	r5, #8
 8004774:	2d0c      	cmp	r5, #12
 8004776:	bf38      	it	cc
 8004778:	250c      	movcc	r5, #12
 800477a:	2d00      	cmp	r5, #0
 800477c:	4607      	mov	r7, r0
 800477e:	db01      	blt.n	8004784 <_malloc_r+0x1c>
 8004780:	42a9      	cmp	r1, r5
 8004782:	d905      	bls.n	8004790 <_malloc_r+0x28>
 8004784:	230c      	movs	r3, #12
 8004786:	2600      	movs	r6, #0
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4630      	mov	r0, r6
 800478c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004790:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004864 <_malloc_r+0xfc>
 8004794:	f000 f868 	bl	8004868 <__malloc_lock>
 8004798:	f8d8 3000 	ldr.w	r3, [r8]
 800479c:	461c      	mov	r4, r3
 800479e:	bb5c      	cbnz	r4, 80047f8 <_malloc_r+0x90>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7ff ffc0 	bl	8004728 <sbrk_aligned>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	4604      	mov	r4, r0
 80047ac:	d155      	bne.n	800485a <_malloc_r+0xf2>
 80047ae:	f8d8 4000 	ldr.w	r4, [r8]
 80047b2:	4626      	mov	r6, r4
 80047b4:	2e00      	cmp	r6, #0
 80047b6:	d145      	bne.n	8004844 <_malloc_r+0xdc>
 80047b8:	2c00      	cmp	r4, #0
 80047ba:	d048      	beq.n	800484e <_malloc_r+0xe6>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	4631      	mov	r1, r6
 80047c0:	4638      	mov	r0, r7
 80047c2:	eb04 0903 	add.w	r9, r4, r3
 80047c6:	f000 fef1 	bl	80055ac <_sbrk_r>
 80047ca:	4581      	cmp	r9, r0
 80047cc:	d13f      	bne.n	800484e <_malloc_r+0xe6>
 80047ce:	6821      	ldr	r1, [r4, #0]
 80047d0:	4638      	mov	r0, r7
 80047d2:	1a6d      	subs	r5, r5, r1
 80047d4:	4629      	mov	r1, r5
 80047d6:	f7ff ffa7 	bl	8004728 <sbrk_aligned>
 80047da:	3001      	adds	r0, #1
 80047dc:	d037      	beq.n	800484e <_malloc_r+0xe6>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	442b      	add	r3, r5
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	f8d8 3000 	ldr.w	r3, [r8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d038      	beq.n	800485e <_malloc_r+0xf6>
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	42a2      	cmp	r2, r4
 80047f0:	d12b      	bne.n	800484a <_malloc_r+0xe2>
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	e00f      	b.n	8004818 <_malloc_r+0xb0>
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	1b52      	subs	r2, r2, r5
 80047fc:	d41f      	bmi.n	800483e <_malloc_r+0xd6>
 80047fe:	2a0b      	cmp	r2, #11
 8004800:	d917      	bls.n	8004832 <_malloc_r+0xca>
 8004802:	1961      	adds	r1, r4, r5
 8004804:	42a3      	cmp	r3, r4
 8004806:	6025      	str	r5, [r4, #0]
 8004808:	bf18      	it	ne
 800480a:	6059      	strne	r1, [r3, #4]
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	bf08      	it	eq
 8004810:	f8c8 1000 	streq.w	r1, [r8]
 8004814:	5162      	str	r2, [r4, r5]
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	4638      	mov	r0, r7
 800481a:	f104 060b 	add.w	r6, r4, #11
 800481e:	f000 f829 	bl	8004874 <__malloc_unlock>
 8004822:	f026 0607 	bic.w	r6, r6, #7
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	1af2      	subs	r2, r6, r3
 800482a:	d0ae      	beq.n	800478a <_malloc_r+0x22>
 800482c:	1b9b      	subs	r3, r3, r6
 800482e:	50a3      	str	r3, [r4, r2]
 8004830:	e7ab      	b.n	800478a <_malloc_r+0x22>
 8004832:	42a3      	cmp	r3, r4
 8004834:	6862      	ldr	r2, [r4, #4]
 8004836:	d1dd      	bne.n	80047f4 <_malloc_r+0x8c>
 8004838:	f8c8 2000 	str.w	r2, [r8]
 800483c:	e7ec      	b.n	8004818 <_malloc_r+0xb0>
 800483e:	4623      	mov	r3, r4
 8004840:	6864      	ldr	r4, [r4, #4]
 8004842:	e7ac      	b.n	800479e <_malloc_r+0x36>
 8004844:	4634      	mov	r4, r6
 8004846:	6876      	ldr	r6, [r6, #4]
 8004848:	e7b4      	b.n	80047b4 <_malloc_r+0x4c>
 800484a:	4613      	mov	r3, r2
 800484c:	e7cc      	b.n	80047e8 <_malloc_r+0x80>
 800484e:	230c      	movs	r3, #12
 8004850:	4638      	mov	r0, r7
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	f000 f80e 	bl	8004874 <__malloc_unlock>
 8004858:	e797      	b.n	800478a <_malloc_r+0x22>
 800485a:	6025      	str	r5, [r4, #0]
 800485c:	e7dc      	b.n	8004818 <_malloc_r+0xb0>
 800485e:	605b      	str	r3, [r3, #4]
 8004860:	deff      	udf	#255	; 0xff
 8004862:	bf00      	nop
 8004864:	20000810 	.word	0x20000810

08004868 <__malloc_lock>:
 8004868:	4801      	ldr	r0, [pc, #4]	; (8004870 <__malloc_lock+0x8>)
 800486a:	f7ff bf0b 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800486e:	bf00      	nop
 8004870:	2000080c 	.word	0x2000080c

08004874 <__malloc_unlock>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__malloc_unlock+0x8>)
 8004876:	f7ff bf06 	b.w	8004686 <__retarget_lock_release_recursive>
 800487a:	bf00      	nop
 800487c:	2000080c 	.word	0x2000080c

08004880 <__ssputs_r>:
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	461f      	mov	r7, r3
 8004886:	688e      	ldr	r6, [r1, #8]
 8004888:	4682      	mov	sl, r0
 800488a:	42be      	cmp	r6, r7
 800488c:	460c      	mov	r4, r1
 800488e:	4690      	mov	r8, r2
 8004890:	680b      	ldr	r3, [r1, #0]
 8004892:	d82c      	bhi.n	80048ee <__ssputs_r+0x6e>
 8004894:	898a      	ldrh	r2, [r1, #12]
 8004896:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800489a:	d026      	beq.n	80048ea <__ssputs_r+0x6a>
 800489c:	6965      	ldr	r5, [r4, #20]
 800489e:	6909      	ldr	r1, [r1, #16]
 80048a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048a4:	eba3 0901 	sub.w	r9, r3, r1
 80048a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ac:	1c7b      	adds	r3, r7, #1
 80048ae:	444b      	add	r3, r9
 80048b0:	106d      	asrs	r5, r5, #1
 80048b2:	429d      	cmp	r5, r3
 80048b4:	bf38      	it	cc
 80048b6:	461d      	movcc	r5, r3
 80048b8:	0553      	lsls	r3, r2, #21
 80048ba:	d527      	bpl.n	800490c <__ssputs_r+0x8c>
 80048bc:	4629      	mov	r1, r5
 80048be:	f7ff ff53 	bl	8004768 <_malloc_r>
 80048c2:	4606      	mov	r6, r0
 80048c4:	b360      	cbz	r0, 8004920 <__ssputs_r+0xa0>
 80048c6:	464a      	mov	r2, r9
 80048c8:	6921      	ldr	r1, [r4, #16]
 80048ca:	f000 fe8d 	bl	80055e8 <memcpy>
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	6126      	str	r6, [r4, #16]
 80048dc:	444e      	add	r6, r9
 80048de:	6026      	str	r6, [r4, #0]
 80048e0:	463e      	mov	r6, r7
 80048e2:	6165      	str	r5, [r4, #20]
 80048e4:	eba5 0509 	sub.w	r5, r5, r9
 80048e8:	60a5      	str	r5, [r4, #8]
 80048ea:	42be      	cmp	r6, r7
 80048ec:	d900      	bls.n	80048f0 <__ssputs_r+0x70>
 80048ee:	463e      	mov	r6, r7
 80048f0:	4632      	mov	r2, r6
 80048f2:	4641      	mov	r1, r8
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	f000 fe3e 	bl	8005576 <memmove>
 80048fa:	2000      	movs	r0, #0
 80048fc:	68a3      	ldr	r3, [r4, #8]
 80048fe:	1b9b      	subs	r3, r3, r6
 8004900:	60a3      	str	r3, [r4, #8]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	4433      	add	r3, r6
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	462a      	mov	r2, r5
 800490e:	f000 fe79 	bl	8005604 <_realloc_r>
 8004912:	4606      	mov	r6, r0
 8004914:	2800      	cmp	r0, #0
 8004916:	d1e0      	bne.n	80048da <__ssputs_r+0x5a>
 8004918:	4650      	mov	r0, sl
 800491a:	6921      	ldr	r1, [r4, #16]
 800491c:	f7ff febc 	bl	8004698 <_free_r>
 8004920:	230c      	movs	r3, #12
 8004922:	f8ca 3000 	str.w	r3, [sl]
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	e7e9      	b.n	8004908 <__ssputs_r+0x88>

08004934 <_svfiprintf_r>:
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	4698      	mov	r8, r3
 800493a:	898b      	ldrh	r3, [r1, #12]
 800493c:	4607      	mov	r7, r0
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	460d      	mov	r5, r1
 8004942:	4614      	mov	r4, r2
 8004944:	b09d      	sub	sp, #116	; 0x74
 8004946:	d50e      	bpl.n	8004966 <_svfiprintf_r+0x32>
 8004948:	690b      	ldr	r3, [r1, #16]
 800494a:	b963      	cbnz	r3, 8004966 <_svfiprintf_r+0x32>
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	f7ff ff0b 	bl	8004768 <_malloc_r>
 8004952:	6028      	str	r0, [r5, #0]
 8004954:	6128      	str	r0, [r5, #16]
 8004956:	b920      	cbnz	r0, 8004962 <_svfiprintf_r+0x2e>
 8004958:	230c      	movs	r3, #12
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e0d0      	b.n	8004b04 <_svfiprintf_r+0x1d0>
 8004962:	2340      	movs	r3, #64	; 0x40
 8004964:	616b      	str	r3, [r5, #20]
 8004966:	2300      	movs	r3, #0
 8004968:	9309      	str	r3, [sp, #36]	; 0x24
 800496a:	2320      	movs	r3, #32
 800496c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004970:	2330      	movs	r3, #48	; 0x30
 8004972:	f04f 0901 	mov.w	r9, #1
 8004976:	f8cd 800c 	str.w	r8, [sp, #12]
 800497a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004b1c <_svfiprintf_r+0x1e8>
 800497e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004982:	4623      	mov	r3, r4
 8004984:	469a      	mov	sl, r3
 8004986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800498a:	b10a      	cbz	r2, 8004990 <_svfiprintf_r+0x5c>
 800498c:	2a25      	cmp	r2, #37	; 0x25
 800498e:	d1f9      	bne.n	8004984 <_svfiprintf_r+0x50>
 8004990:	ebba 0b04 	subs.w	fp, sl, r4
 8004994:	d00b      	beq.n	80049ae <_svfiprintf_r+0x7a>
 8004996:	465b      	mov	r3, fp
 8004998:	4622      	mov	r2, r4
 800499a:	4629      	mov	r1, r5
 800499c:	4638      	mov	r0, r7
 800499e:	f7ff ff6f 	bl	8004880 <__ssputs_r>
 80049a2:	3001      	adds	r0, #1
 80049a4:	f000 80a9 	beq.w	8004afa <_svfiprintf_r+0x1c6>
 80049a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049aa:	445a      	add	r2, fp
 80049ac:	9209      	str	r2, [sp, #36]	; 0x24
 80049ae:	f89a 3000 	ldrb.w	r3, [sl]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a1 	beq.w	8004afa <_svfiprintf_r+0x1c6>
 80049b8:	2300      	movs	r3, #0
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049c2:	f10a 0a01 	add.w	sl, sl, #1
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	9307      	str	r3, [sp, #28]
 80049ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ce:	931a      	str	r3, [sp, #104]	; 0x68
 80049d0:	4654      	mov	r4, sl
 80049d2:	2205      	movs	r2, #5
 80049d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d8:	4850      	ldr	r0, [pc, #320]	; (8004b1c <_svfiprintf_r+0x1e8>)
 80049da:	f000 fdf7 	bl	80055cc <memchr>
 80049de:	9a04      	ldr	r2, [sp, #16]
 80049e0:	b9d8      	cbnz	r0, 8004a1a <_svfiprintf_r+0xe6>
 80049e2:	06d0      	lsls	r0, r2, #27
 80049e4:	bf44      	itt	mi
 80049e6:	2320      	movmi	r3, #32
 80049e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ec:	0711      	lsls	r1, r2, #28
 80049ee:	bf44      	itt	mi
 80049f0:	232b      	movmi	r3, #43	; 0x2b
 80049f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f6:	f89a 3000 	ldrb.w	r3, [sl]
 80049fa:	2b2a      	cmp	r3, #42	; 0x2a
 80049fc:	d015      	beq.n	8004a2a <_svfiprintf_r+0xf6>
 80049fe:	4654      	mov	r4, sl
 8004a00:	2000      	movs	r0, #0
 8004a02:	f04f 0c0a 	mov.w	ip, #10
 8004a06:	9a07      	ldr	r2, [sp, #28]
 8004a08:	4621      	mov	r1, r4
 8004a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a0e:	3b30      	subs	r3, #48	; 0x30
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d94d      	bls.n	8004ab0 <_svfiprintf_r+0x17c>
 8004a14:	b1b0      	cbz	r0, 8004a44 <_svfiprintf_r+0x110>
 8004a16:	9207      	str	r2, [sp, #28]
 8004a18:	e014      	b.n	8004a44 <_svfiprintf_r+0x110>
 8004a1a:	eba0 0308 	sub.w	r3, r0, r8
 8004a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	46a2      	mov	sl, r4
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	e7d2      	b.n	80049d0 <_svfiprintf_r+0x9c>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	9103      	str	r1, [sp, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bfbb      	ittet	lt
 8004a36:	425b      	neglt	r3, r3
 8004a38:	f042 0202 	orrlt.w	r2, r2, #2
 8004a3c:	9307      	strge	r3, [sp, #28]
 8004a3e:	9307      	strlt	r3, [sp, #28]
 8004a40:	bfb8      	it	lt
 8004a42:	9204      	strlt	r2, [sp, #16]
 8004a44:	7823      	ldrb	r3, [r4, #0]
 8004a46:	2b2e      	cmp	r3, #46	; 0x2e
 8004a48:	d10c      	bne.n	8004a64 <_svfiprintf_r+0x130>
 8004a4a:	7863      	ldrb	r3, [r4, #1]
 8004a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a4e:	d134      	bne.n	8004aba <_svfiprintf_r+0x186>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	3402      	adds	r4, #2
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	9203      	str	r2, [sp, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bfb8      	it	lt
 8004a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a62:	9305      	str	r3, [sp, #20]
 8004a64:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004b20 <_svfiprintf_r+0x1ec>
 8004a68:	2203      	movs	r2, #3
 8004a6a:	4650      	mov	r0, sl
 8004a6c:	7821      	ldrb	r1, [r4, #0]
 8004a6e:	f000 fdad 	bl	80055cc <memchr>
 8004a72:	b138      	cbz	r0, 8004a84 <_svfiprintf_r+0x150>
 8004a74:	2240      	movs	r2, #64	; 0x40
 8004a76:	9b04      	ldr	r3, [sp, #16]
 8004a78:	eba0 000a 	sub.w	r0, r0, sl
 8004a7c:	4082      	lsls	r2, r0
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	3401      	adds	r4, #1
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a88:	2206      	movs	r2, #6
 8004a8a:	4826      	ldr	r0, [pc, #152]	; (8004b24 <_svfiprintf_r+0x1f0>)
 8004a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a90:	f000 fd9c 	bl	80055cc <memchr>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d038      	beq.n	8004b0a <_svfiprintf_r+0x1d6>
 8004a98:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <_svfiprintf_r+0x1f4>)
 8004a9a:	bb1b      	cbnz	r3, 8004ae4 <_svfiprintf_r+0x1b0>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	3307      	adds	r3, #7
 8004aa0:	f023 0307 	bic.w	r3, r3, #7
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	9303      	str	r3, [sp, #12]
 8004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aaa:	4433      	add	r3, r6
 8004aac:	9309      	str	r3, [sp, #36]	; 0x24
 8004aae:	e768      	b.n	8004982 <_svfiprintf_r+0x4e>
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ab8:	e7a6      	b.n	8004a08 <_svfiprintf_r+0xd4>
 8004aba:	2300      	movs	r3, #0
 8004abc:	f04f 0c0a 	mov.w	ip, #10
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	3401      	adds	r4, #1
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004acc:	3a30      	subs	r2, #48	; 0x30
 8004ace:	2a09      	cmp	r2, #9
 8004ad0:	d903      	bls.n	8004ada <_svfiprintf_r+0x1a6>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c6      	beq.n	8004a64 <_svfiprintf_r+0x130>
 8004ad6:	9105      	str	r1, [sp, #20]
 8004ad8:	e7c4      	b.n	8004a64 <_svfiprintf_r+0x130>
 8004ada:	4604      	mov	r4, r0
 8004adc:	2301      	movs	r3, #1
 8004ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ae2:	e7f0      	b.n	8004ac6 <_svfiprintf_r+0x192>
 8004ae4:	ab03      	add	r3, sp, #12
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	462a      	mov	r2, r5
 8004aea:	4638      	mov	r0, r7
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <_svfiprintf_r+0x1f8>)
 8004aee:	a904      	add	r1, sp, #16
 8004af0:	f3af 8000 	nop.w
 8004af4:	1c42      	adds	r2, r0, #1
 8004af6:	4606      	mov	r6, r0
 8004af8:	d1d6      	bne.n	8004aa8 <_svfiprintf_r+0x174>
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	065b      	lsls	r3, r3, #25
 8004afe:	f53f af2d 	bmi.w	800495c <_svfiprintf_r+0x28>
 8004b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b04:	b01d      	add	sp, #116	; 0x74
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	ab03      	add	r3, sp, #12
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	462a      	mov	r2, r5
 8004b10:	4638      	mov	r0, r7
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <_svfiprintf_r+0x1f8>)
 8004b14:	a904      	add	r1, sp, #16
 8004b16:	f000 fa4f 	bl	8004fb8 <_printf_i>
 8004b1a:	e7eb      	b.n	8004af4 <_svfiprintf_r+0x1c0>
 8004b1c:	080058e4 	.word	0x080058e4
 8004b20:	080058ea 	.word	0x080058ea
 8004b24:	080058ee 	.word	0x080058ee
 8004b28:	00000000 	.word	0x00000000
 8004b2c:	08004881 	.word	0x08004881

08004b30 <_sungetc_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	1c4b      	adds	r3, r1, #1
 8004b34:	4614      	mov	r4, r2
 8004b36:	d103      	bne.n	8004b40 <_sungetc_r+0x10>
 8004b38:	f04f 35ff 	mov.w	r5, #4294967295
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	8993      	ldrh	r3, [r2, #12]
 8004b42:	b2cd      	uxtb	r5, r1
 8004b44:	f023 0320 	bic.w	r3, r3, #32
 8004b48:	8193      	strh	r3, [r2, #12]
 8004b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b4c:	6852      	ldr	r2, [r2, #4]
 8004b4e:	b18b      	cbz	r3, 8004b74 <_sungetc_r+0x44>
 8004b50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b52:	4293      	cmp	r3, r2
 8004b54:	dd08      	ble.n	8004b68 <_sungetc_r+0x38>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	1e5a      	subs	r2, r3, #1
 8004b5a:	6022      	str	r2, [r4, #0]
 8004b5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	e7e9      	b.n	8004b3c <_sungetc_r+0xc>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f000 fccc 	bl	8005506 <__submore>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d0f1      	beq.n	8004b56 <_sungetc_r+0x26>
 8004b72:	e7e1      	b.n	8004b38 <_sungetc_r+0x8>
 8004b74:	6921      	ldr	r1, [r4, #16]
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	b151      	cbz	r1, 8004b90 <_sungetc_r+0x60>
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d208      	bcs.n	8004b90 <_sungetc_r+0x60>
 8004b7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004b82:	42a9      	cmp	r1, r5
 8004b84:	d104      	bne.n	8004b90 <_sungetc_r+0x60>
 8004b86:	3b01      	subs	r3, #1
 8004b88:	3201      	adds	r2, #1
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	6062      	str	r2, [r4, #4]
 8004b8e:	e7d5      	b.n	8004b3c <_sungetc_r+0xc>
 8004b90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b98:	6363      	str	r3, [r4, #52]	; 0x34
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e7dc      	b.n	8004b64 <_sungetc_r+0x34>

08004baa <__ssrefill_r>:
 8004baa:	b510      	push	{r4, lr}
 8004bac:	460c      	mov	r4, r1
 8004bae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004bb0:	b169      	cbz	r1, 8004bce <__ssrefill_r+0x24>
 8004bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb6:	4299      	cmp	r1, r3
 8004bb8:	d001      	beq.n	8004bbe <__ssrefill_r+0x14>
 8004bba:	f7ff fd6d 	bl	8004698 <_free_r>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	b113      	cbz	r3, 8004bce <__ssrefill_r+0x24>
 8004bc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	e7f3      	b.n	8004bcc <__ssrefill_r+0x22>

08004be4 <__ssvfiscanf_r>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	460c      	mov	r4, r1
 8004bea:	2100      	movs	r1, #0
 8004bec:	4606      	mov	r6, r0
 8004bee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004bf2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004bf6:	49a6      	ldr	r1, [pc, #664]	; (8004e90 <__ssvfiscanf_r+0x2ac>)
 8004bf8:	f10d 0804 	add.w	r8, sp, #4
 8004bfc:	91a0      	str	r1, [sp, #640]	; 0x280
 8004bfe:	49a5      	ldr	r1, [pc, #660]	; (8004e94 <__ssvfiscanf_r+0x2b0>)
 8004c00:	4fa5      	ldr	r7, [pc, #660]	; (8004e98 <__ssvfiscanf_r+0x2b4>)
 8004c02:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004e9c <__ssvfiscanf_r+0x2b8>
 8004c06:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004c0a:	91a1      	str	r1, [sp, #644]	; 0x284
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	7813      	ldrb	r3, [r2, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 815a 	beq.w	8004eca <__ssvfiscanf_r+0x2e6>
 8004c16:	5cf9      	ldrb	r1, [r7, r3]
 8004c18:	1c55      	adds	r5, r2, #1
 8004c1a:	f011 0108 	ands.w	r1, r1, #8
 8004c1e:	d019      	beq.n	8004c54 <__ssvfiscanf_r+0x70>
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dd0f      	ble.n	8004c46 <__ssvfiscanf_r+0x62>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	5cba      	ldrb	r2, [r7, r2]
 8004c2c:	0712      	lsls	r2, r2, #28
 8004c2e:	d401      	bmi.n	8004c34 <__ssvfiscanf_r+0x50>
 8004c30:	462a      	mov	r2, r5
 8004c32:	e7ec      	b.n	8004c0e <__ssvfiscanf_r+0x2a>
 8004c34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c36:	3301      	adds	r3, #1
 8004c38:	3201      	adds	r2, #1
 8004c3a:	9245      	str	r2, [sp, #276]	; 0x114
 8004c3c:	6862      	ldr	r2, [r4, #4]
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	3a01      	subs	r2, #1
 8004c42:	6062      	str	r2, [r4, #4]
 8004c44:	e7ec      	b.n	8004c20 <__ssvfiscanf_r+0x3c>
 8004c46:	4621      	mov	r1, r4
 8004c48:	4630      	mov	r0, r6
 8004c4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c4c:	4798      	blx	r3
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d0e9      	beq.n	8004c26 <__ssvfiscanf_r+0x42>
 8004c52:	e7ed      	b.n	8004c30 <__ssvfiscanf_r+0x4c>
 8004c54:	2b25      	cmp	r3, #37	; 0x25
 8004c56:	d012      	beq.n	8004c7e <__ssvfiscanf_r+0x9a>
 8004c58:	469a      	mov	sl, r3
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f340 8092 	ble.w	8004d86 <__ssvfiscanf_r+0x1a2>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	7813      	ldrb	r3, [r2, #0]
 8004c66:	4553      	cmp	r3, sl
 8004c68:	f040 812f 	bne.w	8004eca <__ssvfiscanf_r+0x2e6>
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	3201      	adds	r2, #1
 8004c70:	3b01      	subs	r3, #1
 8004c72:	6063      	str	r3, [r4, #4]
 8004c74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	9345      	str	r3, [sp, #276]	; 0x114
 8004c7c:	e7d8      	b.n	8004c30 <__ssvfiscanf_r+0x4c>
 8004c7e:	9141      	str	r1, [sp, #260]	; 0x104
 8004c80:	9143      	str	r1, [sp, #268]	; 0x10c
 8004c82:	7853      	ldrb	r3, [r2, #1]
 8004c84:	2b2a      	cmp	r3, #42	; 0x2a
 8004c86:	bf04      	itt	eq
 8004c88:	2310      	moveq	r3, #16
 8004c8a:	1c95      	addeq	r5, r2, #2
 8004c8c:	f04f 020a 	mov.w	r2, #10
 8004c90:	bf08      	it	eq
 8004c92:	9341      	streq	r3, [sp, #260]	; 0x104
 8004c94:	46aa      	mov	sl, r5
 8004c96:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004c9a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d91c      	bls.n	8004cdc <__ssvfiscanf_r+0xf8>
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	487d      	ldr	r0, [pc, #500]	; (8004e9c <__ssvfiscanf_r+0x2b8>)
 8004ca6:	f000 fc91 	bl	80055cc <memchr>
 8004caa:	b138      	cbz	r0, 8004cbc <__ssvfiscanf_r+0xd8>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4655      	mov	r5, sl
 8004cb0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004cb2:	eba0 0009 	sub.w	r0, r0, r9
 8004cb6:	4083      	lsls	r3, r0
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	9341      	str	r3, [sp, #260]	; 0x104
 8004cbc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cc0:	2b78      	cmp	r3, #120	; 0x78
 8004cc2:	d806      	bhi.n	8004cd2 <__ssvfiscanf_r+0xee>
 8004cc4:	2b57      	cmp	r3, #87	; 0x57
 8004cc6:	d810      	bhi.n	8004cea <__ssvfiscanf_r+0x106>
 8004cc8:	2b25      	cmp	r3, #37	; 0x25
 8004cca:	d0c5      	beq.n	8004c58 <__ssvfiscanf_r+0x74>
 8004ccc:	d856      	bhi.n	8004d7c <__ssvfiscanf_r+0x198>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d064      	beq.n	8004d9c <__ssvfiscanf_r+0x1b8>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	9347      	str	r3, [sp, #284]	; 0x11c
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	9342      	str	r3, [sp, #264]	; 0x108
 8004cda:	e075      	b.n	8004dc8 <__ssvfiscanf_r+0x1e4>
 8004cdc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004cde:	4655      	mov	r5, sl
 8004ce0:	fb02 1103 	mla	r1, r2, r3, r1
 8004ce4:	3930      	subs	r1, #48	; 0x30
 8004ce6:	9143      	str	r1, [sp, #268]	; 0x10c
 8004ce8:	e7d4      	b.n	8004c94 <__ssvfiscanf_r+0xb0>
 8004cea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004cee:	2a20      	cmp	r2, #32
 8004cf0:	d8ef      	bhi.n	8004cd2 <__ssvfiscanf_r+0xee>
 8004cf2:	a101      	add	r1, pc, #4	; (adr r1, 8004cf8 <__ssvfiscanf_r+0x114>)
 8004cf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004cf8:	08004dab 	.word	0x08004dab
 8004cfc:	08004cd3 	.word	0x08004cd3
 8004d00:	08004cd3 	.word	0x08004cd3
 8004d04:	08004e09 	.word	0x08004e09
 8004d08:	08004cd3 	.word	0x08004cd3
 8004d0c:	08004cd3 	.word	0x08004cd3
 8004d10:	08004cd3 	.word	0x08004cd3
 8004d14:	08004cd3 	.word	0x08004cd3
 8004d18:	08004cd3 	.word	0x08004cd3
 8004d1c:	08004cd3 	.word	0x08004cd3
 8004d20:	08004cd3 	.word	0x08004cd3
 8004d24:	08004e1f 	.word	0x08004e1f
 8004d28:	08004e05 	.word	0x08004e05
 8004d2c:	08004d83 	.word	0x08004d83
 8004d30:	08004d83 	.word	0x08004d83
 8004d34:	08004d83 	.word	0x08004d83
 8004d38:	08004cd3 	.word	0x08004cd3
 8004d3c:	08004dc1 	.word	0x08004dc1
 8004d40:	08004cd3 	.word	0x08004cd3
 8004d44:	08004cd3 	.word	0x08004cd3
 8004d48:	08004cd3 	.word	0x08004cd3
 8004d4c:	08004cd3 	.word	0x08004cd3
 8004d50:	08004e2f 	.word	0x08004e2f
 8004d54:	08004dfd 	.word	0x08004dfd
 8004d58:	08004da3 	.word	0x08004da3
 8004d5c:	08004cd3 	.word	0x08004cd3
 8004d60:	08004cd3 	.word	0x08004cd3
 8004d64:	08004e2b 	.word	0x08004e2b
 8004d68:	08004cd3 	.word	0x08004cd3
 8004d6c:	08004e05 	.word	0x08004e05
 8004d70:	08004cd3 	.word	0x08004cd3
 8004d74:	08004cd3 	.word	0x08004cd3
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	3b45      	subs	r3, #69	; 0x45
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d8a7      	bhi.n	8004cd2 <__ssvfiscanf_r+0xee>
 8004d82:	2305      	movs	r3, #5
 8004d84:	e01f      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4630      	mov	r0, r6
 8004d8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004d8c:	4798      	blx	r3
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f43f af67 	beq.w	8004c62 <__ssvfiscanf_r+0x7e>
 8004d94:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f040 808d 	bne.w	8004eb6 <__ssvfiscanf_r+0x2d2>
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	e08f      	b.n	8004ec2 <__ssvfiscanf_r+0x2de>
 8004da2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	9241      	str	r2, [sp, #260]	; 0x104
 8004daa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	9241      	str	r2, [sp, #260]	; 0x104
 8004db2:	2210      	movs	r2, #16
 8004db4:	2b6f      	cmp	r3, #111	; 0x6f
 8004db6:	bf34      	ite	cc
 8004db8:	2303      	movcc	r3, #3
 8004dba:	2304      	movcs	r3, #4
 8004dbc:	9242      	str	r2, [sp, #264]	; 0x108
 8004dbe:	e002      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9342      	str	r3, [sp, #264]	; 0x108
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8004dc8:	6863      	ldr	r3, [r4, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dd3d      	ble.n	8004e4a <__ssvfiscanf_r+0x266>
 8004dce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004dd0:	0659      	lsls	r1, r3, #25
 8004dd2:	d404      	bmi.n	8004dde <__ssvfiscanf_r+0x1fa>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	5cba      	ldrb	r2, [r7, r2]
 8004dda:	0712      	lsls	r2, r2, #28
 8004ddc:	d43c      	bmi.n	8004e58 <__ssvfiscanf_r+0x274>
 8004dde:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	dc4b      	bgt.n	8004e7c <__ssvfiscanf_r+0x298>
 8004de4:	466b      	mov	r3, sp
 8004de6:	4622      	mov	r2, r4
 8004de8:	4630      	mov	r0, r6
 8004dea:	a941      	add	r1, sp, #260	; 0x104
 8004dec:	f000 fa06 	bl	80051fc <_scanf_chars>
 8004df0:	2801      	cmp	r0, #1
 8004df2:	d06a      	beq.n	8004eca <__ssvfiscanf_r+0x2e6>
 8004df4:	2802      	cmp	r0, #2
 8004df6:	f47f af1b 	bne.w	8004c30 <__ssvfiscanf_r+0x4c>
 8004dfa:	e7cb      	b.n	8004d94 <__ssvfiscanf_r+0x1b0>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	9342      	str	r3, [sp, #264]	; 0x108
 8004e00:	2304      	movs	r3, #4
 8004e02:	e7e0      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004e04:	220a      	movs	r2, #10
 8004e06:	e7d5      	b.n	8004db4 <__ssvfiscanf_r+0x1d0>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f000 fb42 	bl	8005494 <__sccl>
 8004e10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e12:	4605      	mov	r5, r0
 8004e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e18:	9341      	str	r3, [sp, #260]	; 0x104
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e7d3      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004e1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e24:	9341      	str	r3, [sp, #260]	; 0x104
 8004e26:	2300      	movs	r3, #0
 8004e28:	e7cd      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e7cb      	b.n	8004dc6 <__ssvfiscanf_r+0x1e2>
 8004e2e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e30:	06c3      	lsls	r3, r0, #27
 8004e32:	f53f aefd 	bmi.w	8004c30 <__ssvfiscanf_r+0x4c>
 8004e36:	9b00      	ldr	r3, [sp, #0]
 8004e38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e3a:	1d19      	adds	r1, r3, #4
 8004e3c:	9100      	str	r1, [sp, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	07c0      	lsls	r0, r0, #31
 8004e42:	bf4c      	ite	mi
 8004e44:	801a      	strhmi	r2, [r3, #0]
 8004e46:	601a      	strpl	r2, [r3, #0]
 8004e48:	e6f2      	b.n	8004c30 <__ssvfiscanf_r+0x4c>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e50:	4798      	blx	r3
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0bb      	beq.n	8004dce <__ssvfiscanf_r+0x1ea>
 8004e56:	e79d      	b.n	8004d94 <__ssvfiscanf_r+0x1b0>
 8004e58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e5a:	3201      	adds	r2, #1
 8004e5c:	9245      	str	r2, [sp, #276]	; 0x114
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	3a01      	subs	r2, #1
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	6062      	str	r2, [r4, #4]
 8004e66:	dd02      	ble.n	8004e6e <__ssvfiscanf_r+0x28a>
 8004e68:	3301      	adds	r3, #1
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	e7b2      	b.n	8004dd4 <__ssvfiscanf_r+0x1f0>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4630      	mov	r0, r6
 8004e72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e74:	4798      	blx	r3
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d0ac      	beq.n	8004dd4 <__ssvfiscanf_r+0x1f0>
 8004e7a:	e78b      	b.n	8004d94 <__ssvfiscanf_r+0x1b0>
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	dc0f      	bgt.n	8004ea0 <__ssvfiscanf_r+0x2bc>
 8004e80:	466b      	mov	r3, sp
 8004e82:	4622      	mov	r2, r4
 8004e84:	4630      	mov	r0, r6
 8004e86:	a941      	add	r1, sp, #260	; 0x104
 8004e88:	f000 fa12 	bl	80052b0 <_scanf_i>
 8004e8c:	e7b0      	b.n	8004df0 <__ssvfiscanf_r+0x20c>
 8004e8e:	bf00      	nop
 8004e90:	08004b31 	.word	0x08004b31
 8004e94:	08004bab 	.word	0x08004bab
 8004e98:	08005933 	.word	0x08005933
 8004e9c:	080058ea 	.word	0x080058ea
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <__ssvfiscanf_r+0x2ec>)
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f43f aec4 	beq.w	8004c30 <__ssvfiscanf_r+0x4c>
 8004ea8:	466b      	mov	r3, sp
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4630      	mov	r0, r6
 8004eae:	a941      	add	r1, sp, #260	; 0x104
 8004eb0:	f3af 8000 	nop.w
 8004eb4:	e79c      	b.n	8004df0 <__ssvfiscanf_r+0x20c>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ebc:	bf18      	it	ne
 8004ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8004ec2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004ecc:	e7f9      	b.n	8004ec2 <__ssvfiscanf_r+0x2de>
 8004ece:	bf00      	nop
 8004ed0:	00000000 	.word	0x00000000

08004ed4 <_printf_common>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4699      	mov	r9, r3
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	bfb8      	it	lt
 8004ee6:	4613      	movlt	r3, r2
 8004ee8:	6033      	str	r3, [r6, #0]
 8004eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef4:	b10a      	cbz	r2, 8004efa <_printf_common+0x26>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	6833      	ldrmi	r3, [r6, #0]
 8004f02:	3302      	addmi	r3, #2
 8004f04:	6033      	strmi	r3, [r6, #0]
 8004f06:	6825      	ldr	r5, [r4, #0]
 8004f08:	f015 0506 	ands.w	r5, r5, #6
 8004f0c:	d106      	bne.n	8004f1c <_printf_common+0x48>
 8004f0e:	f104 0a19 	add.w	sl, r4, #25
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dc2b      	bgt.n	8004f74 <_printf_common+0xa0>
 8004f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f20:	1e13      	subs	r3, r2, #0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d430      	bmi.n	8004f8e <_printf_common+0xba>
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	4638      	mov	r0, r7
 8004f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d023      	beq.n	8004f82 <_printf_common+0xae>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	f003 0306 	and.w	r3, r3, #6
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf14      	ite	ne
 8004f46:	2500      	movne	r5, #0
 8004f48:	6833      	ldreq	r3, [r6, #0]
 8004f4a:	f04f 0600 	mov.w	r6, #0
 8004f4e:	bf08      	it	eq
 8004f50:	68e5      	ldreq	r5, [r4, #12]
 8004f52:	f104 041a 	add.w	r4, r4, #26
 8004f56:	bf08      	it	eq
 8004f58:	1aed      	subeq	r5, r5, r3
 8004f5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f5e:	bf08      	it	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	4293      	cmp	r3, r2
 8004f66:	bfc4      	itt	gt
 8004f68:	1a9b      	subgt	r3, r3, r2
 8004f6a:	18ed      	addgt	r5, r5, r3
 8004f6c:	42b5      	cmp	r5, r6
 8004f6e:	d11a      	bne.n	8004fa6 <_printf_common+0xd2>
 8004f70:	2000      	movs	r0, #0
 8004f72:	e008      	b.n	8004f86 <_printf_common+0xb2>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4652      	mov	r2, sl
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d103      	bne.n	8004f8a <_printf_common+0xb6>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	3501      	adds	r5, #1
 8004f8c:	e7c1      	b.n	8004f12 <_printf_common+0x3e>
 8004f8e:	2030      	movs	r0, #48	; 0x30
 8004f90:	18e1      	adds	r1, r4, r3
 8004f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f9c:	4422      	add	r2, r4
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa4:	e7c2      	b.n	8004f2c <_printf_common+0x58>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4649      	mov	r1, r9
 8004fac:	4638      	mov	r0, r7
 8004fae:	47c0      	blx	r8
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d0e6      	beq.n	8004f82 <_printf_common+0xae>
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	e7d9      	b.n	8004f6c <_printf_common+0x98>

08004fb8 <_printf_i>:
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	7e0f      	ldrb	r7, [r1, #24]
 8004fbe:	4691      	mov	r9, r2
 8004fc0:	2f78      	cmp	r7, #120	; 0x78
 8004fc2:	4680      	mov	r8, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	469a      	mov	sl, r3
 8004fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fce:	d807      	bhi.n	8004fe0 <_printf_i+0x28>
 8004fd0:	2f62      	cmp	r7, #98	; 0x62
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x32>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 80d5 	beq.w	8005184 <_printf_i+0x1cc>
 8004fda:	2f58      	cmp	r7, #88	; 0x58
 8004fdc:	f000 80c1 	beq.w	8005162 <_printf_i+0x1aa>
 8004fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe8:	e03a      	b.n	8005060 <_printf_i+0xa8>
 8004fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fee:	2b15      	cmp	r3, #21
 8004ff0:	d8f6      	bhi.n	8004fe0 <_printf_i+0x28>
 8004ff2:	a101      	add	r1, pc, #4	; (adr r1, 8004ff8 <_printf_i+0x40>)
 8004ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08004fe1 	.word	0x08004fe1
 8005004:	08004fe1 	.word	0x08004fe1
 8005008:	08004fe1 	.word	0x08004fe1
 800500c:	08004fe1 	.word	0x08004fe1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fe1 	.word	0x08004fe1
 8005018:	08004fe1 	.word	0x08004fe1
 800501c:	08004fe1 	.word	0x08004fe1
 8005020:	08004fe1 	.word	0x08004fe1
 8005024:	0800516b 	.word	0x0800516b
 8005028:	08005091 	.word	0x08005091
 800502c:	08005125 	.word	0x08005125
 8005030:	08004fe1 	.word	0x08004fe1
 8005034:	08004fe1 	.word	0x08004fe1
 8005038:	0800518d 	.word	0x0800518d
 800503c:	08004fe1 	.word	0x08004fe1
 8005040:	08005091 	.word	0x08005091
 8005044:	08004fe1 	.word	0x08004fe1
 8005048:	08004fe1 	.word	0x08004fe1
 800504c:	0800512d 	.word	0x0800512d
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	602a      	str	r2, [r5, #0]
 8005058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800505c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005060:	2301      	movs	r3, #1
 8005062:	e0a0      	b.n	80051a6 <_printf_i+0x1ee>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	682b      	ldr	r3, [r5, #0]
 8005068:	0607      	lsls	r7, r0, #24
 800506a:	f103 0104 	add.w	r1, r3, #4
 800506e:	6029      	str	r1, [r5, #0]
 8005070:	d501      	bpl.n	8005076 <_printf_i+0xbe>
 8005072:	681e      	ldr	r6, [r3, #0]
 8005074:	e003      	b.n	800507e <_printf_i+0xc6>
 8005076:	0646      	lsls	r6, r0, #25
 8005078:	d5fb      	bpl.n	8005072 <_printf_i+0xba>
 800507a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800507e:	2e00      	cmp	r6, #0
 8005080:	da03      	bge.n	800508a <_printf_i+0xd2>
 8005082:	232d      	movs	r3, #45	; 0x2d
 8005084:	4276      	negs	r6, r6
 8005086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508a:	230a      	movs	r3, #10
 800508c:	4859      	ldr	r0, [pc, #356]	; (80051f4 <_printf_i+0x23c>)
 800508e:	e012      	b.n	80050b6 <_printf_i+0xfe>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	1d19      	adds	r1, r3, #4
 8005096:	6029      	str	r1, [r5, #0]
 8005098:	0605      	lsls	r5, r0, #24
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0xe8>
 800509c:	681e      	ldr	r6, [r3, #0]
 800509e:	e002      	b.n	80050a6 <_printf_i+0xee>
 80050a0:	0641      	lsls	r1, r0, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0xe4>
 80050a4:	881e      	ldrh	r6, [r3, #0]
 80050a6:	2f6f      	cmp	r7, #111	; 0x6f
 80050a8:	bf0c      	ite	eq
 80050aa:	2308      	moveq	r3, #8
 80050ac:	230a      	movne	r3, #10
 80050ae:	4851      	ldr	r0, [pc, #324]	; (80051f4 <_printf_i+0x23c>)
 80050b0:	2100      	movs	r1, #0
 80050b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b6:	6865      	ldr	r5, [r4, #4]
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	bfa8      	it	ge
 80050bc:	6821      	ldrge	r1, [r4, #0]
 80050be:	60a5      	str	r5, [r4, #8]
 80050c0:	bfa4      	itt	ge
 80050c2:	f021 0104 	bicge.w	r1, r1, #4
 80050c6:	6021      	strge	r1, [r4, #0]
 80050c8:	b90e      	cbnz	r6, 80050ce <_printf_i+0x116>
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	d04b      	beq.n	8005166 <_printf_i+0x1ae>
 80050ce:	4615      	mov	r5, r2
 80050d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d4:	fb03 6711 	mls	r7, r3, r1, r6
 80050d8:	5dc7      	ldrb	r7, [r0, r7]
 80050da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050de:	4637      	mov	r7, r6
 80050e0:	42bb      	cmp	r3, r7
 80050e2:	460e      	mov	r6, r1
 80050e4:	d9f4      	bls.n	80050d0 <_printf_i+0x118>
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d10b      	bne.n	8005102 <_printf_i+0x14a>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	07de      	lsls	r6, r3, #31
 80050ee:	d508      	bpl.n	8005102 <_printf_i+0x14a>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	6861      	ldr	r1, [r4, #4]
 80050f4:	4299      	cmp	r1, r3
 80050f6:	bfde      	ittt	le
 80050f8:	2330      	movle	r3, #48	; 0x30
 80050fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005102:	1b52      	subs	r2, r2, r5
 8005104:	6122      	str	r2, [r4, #16]
 8005106:	464b      	mov	r3, r9
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	f8cd a000 	str.w	sl, [sp]
 8005110:	aa03      	add	r2, sp, #12
 8005112:	f7ff fedf 	bl	8004ed4 <_printf_common>
 8005116:	3001      	adds	r0, #1
 8005118:	d14a      	bne.n	80051b0 <_printf_i+0x1f8>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b004      	add	sp, #16
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f043 0320 	orr.w	r3, r3, #32
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	2778      	movs	r7, #120	; 0x78
 800512e:	4832      	ldr	r0, [pc, #200]	; (80051f8 <_printf_i+0x240>)
 8005130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	6829      	ldr	r1, [r5, #0]
 8005138:	061f      	lsls	r7, r3, #24
 800513a:	f851 6b04 	ldr.w	r6, [r1], #4
 800513e:	d402      	bmi.n	8005146 <_printf_i+0x18e>
 8005140:	065f      	lsls	r7, r3, #25
 8005142:	bf48      	it	mi
 8005144:	b2b6      	uxthmi	r6, r6
 8005146:	07df      	lsls	r7, r3, #31
 8005148:	bf48      	it	mi
 800514a:	f043 0320 	orrmi.w	r3, r3, #32
 800514e:	6029      	str	r1, [r5, #0]
 8005150:	bf48      	it	mi
 8005152:	6023      	strmi	r3, [r4, #0]
 8005154:	b91e      	cbnz	r6, 800515e <_printf_i+0x1a6>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f023 0320 	bic.w	r3, r3, #32
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	2310      	movs	r3, #16
 8005160:	e7a6      	b.n	80050b0 <_printf_i+0xf8>
 8005162:	4824      	ldr	r0, [pc, #144]	; (80051f4 <_printf_i+0x23c>)
 8005164:	e7e4      	b.n	8005130 <_printf_i+0x178>
 8005166:	4615      	mov	r5, r2
 8005168:	e7bd      	b.n	80050e6 <_printf_i+0x12e>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	6826      	ldr	r6, [r4, #0]
 800516e:	1d18      	adds	r0, r3, #4
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	6028      	str	r0, [r5, #0]
 8005174:	0635      	lsls	r5, r6, #24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	d501      	bpl.n	800517e <_printf_i+0x1c6>
 800517a:	6019      	str	r1, [r3, #0]
 800517c:	e002      	b.n	8005184 <_printf_i+0x1cc>
 800517e:	0670      	lsls	r0, r6, #25
 8005180:	d5fb      	bpl.n	800517a <_printf_i+0x1c2>
 8005182:	8019      	strh	r1, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	4615      	mov	r5, r2
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	e7bc      	b.n	8005106 <_printf_i+0x14e>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	2100      	movs	r1, #0
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	681d      	ldr	r5, [r3, #0]
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fa17 	bl	80055cc <memchr>
 800519e:	b108      	cbz	r0, 80051a4 <_printf_i+0x1ec>
 80051a0:	1b40      	subs	r0, r0, r5
 80051a2:	6060      	str	r0, [r4, #4]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	2300      	movs	r3, #0
 80051aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ae:	e7aa      	b.n	8005106 <_printf_i+0x14e>
 80051b0:	462a      	mov	r2, r5
 80051b2:	4649      	mov	r1, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	47d0      	blx	sl
 80051ba:	3001      	adds	r0, #1
 80051bc:	d0ad      	beq.n	800511a <_printf_i+0x162>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	079b      	lsls	r3, r3, #30
 80051c2:	d413      	bmi.n	80051ec <_printf_i+0x234>
 80051c4:	68e0      	ldr	r0, [r4, #12]
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	4298      	cmp	r0, r3
 80051ca:	bfb8      	it	lt
 80051cc:	4618      	movlt	r0, r3
 80051ce:	e7a6      	b.n	800511e <_printf_i+0x166>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4632      	mov	r2, r6
 80051d4:	4649      	mov	r1, r9
 80051d6:	4640      	mov	r0, r8
 80051d8:	47d0      	blx	sl
 80051da:	3001      	adds	r0, #1
 80051dc:	d09d      	beq.n	800511a <_printf_i+0x162>
 80051de:	3501      	adds	r5, #1
 80051e0:	68e3      	ldr	r3, [r4, #12]
 80051e2:	9903      	ldr	r1, [sp, #12]
 80051e4:	1a5b      	subs	r3, r3, r1
 80051e6:	42ab      	cmp	r3, r5
 80051e8:	dcf2      	bgt.n	80051d0 <_printf_i+0x218>
 80051ea:	e7eb      	b.n	80051c4 <_printf_i+0x20c>
 80051ec:	2500      	movs	r5, #0
 80051ee:	f104 0619 	add.w	r6, r4, #25
 80051f2:	e7f5      	b.n	80051e0 <_printf_i+0x228>
 80051f4:	080058f5 	.word	0x080058f5
 80051f8:	08005906 	.word	0x08005906

080051fc <_scanf_chars>:
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	4615      	mov	r5, r2
 8005202:	688a      	ldr	r2, [r1, #8]
 8005204:	4680      	mov	r8, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b932      	cbnz	r2, 8005218 <_scanf_chars+0x1c>
 800520a:	698a      	ldr	r2, [r1, #24]
 800520c:	2a00      	cmp	r2, #0
 800520e:	bf0c      	ite	eq
 8005210:	2201      	moveq	r2, #1
 8005212:	f04f 32ff 	movne.w	r2, #4294967295
 8005216:	608a      	str	r2, [r1, #8]
 8005218:	2700      	movs	r7, #0
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80052ac <_scanf_chars+0xb0>
 8005220:	06d1      	lsls	r1, r2, #27
 8005222:	bf5f      	itttt	pl
 8005224:	681a      	ldrpl	r2, [r3, #0]
 8005226:	1d11      	addpl	r1, r2, #4
 8005228:	6019      	strpl	r1, [r3, #0]
 800522a:	6816      	ldrpl	r6, [r2, #0]
 800522c:	69a0      	ldr	r0, [r4, #24]
 800522e:	b188      	cbz	r0, 8005254 <_scanf_chars+0x58>
 8005230:	2801      	cmp	r0, #1
 8005232:	d107      	bne.n	8005244 <_scanf_chars+0x48>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	6963      	ldr	r3, [r4, #20]
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	b953      	cbnz	r3, 8005254 <_scanf_chars+0x58>
 800523e:	2f00      	cmp	r7, #0
 8005240:	d031      	beq.n	80052a6 <_scanf_chars+0xaa>
 8005242:	e022      	b.n	800528a <_scanf_chars+0x8e>
 8005244:	2802      	cmp	r0, #2
 8005246:	d120      	bne.n	800528a <_scanf_chars+0x8e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	d41a      	bmi.n	800528a <_scanf_chars+0x8e>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	3701      	adds	r7, #1
 8005258:	06da      	lsls	r2, r3, #27
 800525a:	bf5e      	ittt	pl
 800525c:	682b      	ldrpl	r3, [r5, #0]
 800525e:	781b      	ldrbpl	r3, [r3, #0]
 8005260:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005264:	682a      	ldr	r2, [r5, #0]
 8005266:	686b      	ldr	r3, [r5, #4]
 8005268:	3201      	adds	r2, #1
 800526a:	602a      	str	r2, [r5, #0]
 800526c:	68a2      	ldr	r2, [r4, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	3a01      	subs	r2, #1
 8005272:	606b      	str	r3, [r5, #4]
 8005274:	60a2      	str	r2, [r4, #8]
 8005276:	b142      	cbz	r2, 800528a <_scanf_chars+0x8e>
 8005278:	2b00      	cmp	r3, #0
 800527a:	dcd7      	bgt.n	800522c <_scanf_chars+0x30>
 800527c:	4629      	mov	r1, r5
 800527e:	4640      	mov	r0, r8
 8005280:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005284:	4798      	blx	r3
 8005286:	2800      	cmp	r0, #0
 8005288:	d0d0      	beq.n	800522c <_scanf_chars+0x30>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f013 0310 	ands.w	r3, r3, #16
 8005290:	d105      	bne.n	800529e <_scanf_chars+0xa2>
 8005292:	68e2      	ldr	r2, [r4, #12]
 8005294:	3201      	adds	r2, #1
 8005296:	60e2      	str	r2, [r4, #12]
 8005298:	69a2      	ldr	r2, [r4, #24]
 800529a:	b102      	cbz	r2, 800529e <_scanf_chars+0xa2>
 800529c:	7033      	strb	r3, [r6, #0]
 800529e:	2000      	movs	r0, #0
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	443b      	add	r3, r7
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	bf00      	nop
 80052ac:	08005933 	.word	0x08005933

080052b0 <_scanf_i>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	460c      	mov	r4, r1
 80052b6:	4698      	mov	r8, r3
 80052b8:	4b72      	ldr	r3, [pc, #456]	; (8005484 <_scanf_i+0x1d4>)
 80052ba:	b087      	sub	sp, #28
 80052bc:	4682      	mov	sl, r0
 80052be:	4616      	mov	r6, r2
 80052c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <_scanf_i+0x1d8>)
 80052cc:	69a1      	ldr	r1, [r4, #24]
 80052ce:	4a6f      	ldr	r2, [pc, #444]	; (800548c <_scanf_i+0x1dc>)
 80052d0:	4627      	mov	r7, r4
 80052d2:	2903      	cmp	r1, #3
 80052d4:	bf18      	it	ne
 80052d6:	461a      	movne	r2, r3
 80052d8:	68a3      	ldr	r3, [r4, #8]
 80052da:	9201      	str	r2, [sp, #4]
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80052e2:	bf81      	itttt	hi
 80052e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052e8:	eb03 0905 	addhi.w	r9, r3, r5
 80052ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052f0:	60a3      	strhi	r3, [r4, #8]
 80052f2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80052f6:	bf98      	it	ls
 80052f8:	f04f 0900 	movls.w	r9, #0
 80052fc:	463d      	mov	r5, r7
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	6831      	ldr	r1, [r6, #0]
 800530a:	ab03      	add	r3, sp, #12
 800530c:	2202      	movs	r2, #2
 800530e:	7809      	ldrb	r1, [r1, #0]
 8005310:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005314:	f000 f95a 	bl	80055cc <memchr>
 8005318:	b328      	cbz	r0, 8005366 <_scanf_i+0xb6>
 800531a:	f1bb 0f01 	cmp.w	fp, #1
 800531e:	d159      	bne.n	80053d4 <_scanf_i+0x124>
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	b92a      	cbnz	r2, 8005330 <_scanf_i+0x80>
 8005324:	2308      	movs	r3, #8
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	6822      	ldr	r2, [r4, #0]
 8005332:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	68a2      	ldr	r2, [r4, #8]
 800533a:	1e51      	subs	r1, r2, #1
 800533c:	60a1      	str	r1, [r4, #8]
 800533e:	b192      	cbz	r2, 8005366 <_scanf_i+0xb6>
 8005340:	6832      	ldr	r2, [r6, #0]
 8005342:	1c51      	adds	r1, r2, #1
 8005344:	6031      	str	r1, [r6, #0]
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	f805 2b01 	strb.w	r2, [r5], #1
 800534c:	6872      	ldr	r2, [r6, #4]
 800534e:	3a01      	subs	r2, #1
 8005350:	2a00      	cmp	r2, #0
 8005352:	6072      	str	r2, [r6, #4]
 8005354:	dc07      	bgt.n	8005366 <_scanf_i+0xb6>
 8005356:	4631      	mov	r1, r6
 8005358:	4650      	mov	r0, sl
 800535a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800535e:	4790      	blx	r2
 8005360:	2800      	cmp	r0, #0
 8005362:	f040 8085 	bne.w	8005470 <_scanf_i+0x1c0>
 8005366:	f10b 0b01 	add.w	fp, fp, #1
 800536a:	f1bb 0f03 	cmp.w	fp, #3
 800536e:	d1cb      	bne.n	8005308 <_scanf_i+0x58>
 8005370:	6863      	ldr	r3, [r4, #4]
 8005372:	b90b      	cbnz	r3, 8005378 <_scanf_i+0xc8>
 8005374:	230a      	movs	r3, #10
 8005376:	6063      	str	r3, [r4, #4]
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	4945      	ldr	r1, [pc, #276]	; (8005490 <_scanf_i+0x1e0>)
 800537c:	6960      	ldr	r0, [r4, #20]
 800537e:	1ac9      	subs	r1, r1, r3
 8005380:	f000 f888 	bl	8005494 <__sccl>
 8005384:	f04f 0b00 	mov.w	fp, #0
 8005388:	68a3      	ldr	r3, [r4, #8]
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03d      	beq.n	800540c <_scanf_i+0x15c>
 8005390:	6831      	ldr	r1, [r6, #0]
 8005392:	6960      	ldr	r0, [r4, #20]
 8005394:	f891 c000 	ldrb.w	ip, [r1]
 8005398:	f810 000c 	ldrb.w	r0, [r0, ip]
 800539c:	2800      	cmp	r0, #0
 800539e:	d035      	beq.n	800540c <_scanf_i+0x15c>
 80053a0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80053a4:	d124      	bne.n	80053f0 <_scanf_i+0x140>
 80053a6:	0510      	lsls	r0, r2, #20
 80053a8:	d522      	bpl.n	80053f0 <_scanf_i+0x140>
 80053aa:	f10b 0b01 	add.w	fp, fp, #1
 80053ae:	f1b9 0f00 	cmp.w	r9, #0
 80053b2:	d003      	beq.n	80053bc <_scanf_i+0x10c>
 80053b4:	3301      	adds	r3, #1
 80053b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	6873      	ldr	r3, [r6, #4]
 80053be:	3b01      	subs	r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	6073      	str	r3, [r6, #4]
 80053c4:	dd1b      	ble.n	80053fe <_scanf_i+0x14e>
 80053c6:	6833      	ldr	r3, [r6, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60a3      	str	r3, [r4, #8]
 80053d2:	e7d9      	b.n	8005388 <_scanf_i+0xd8>
 80053d4:	f1bb 0f02 	cmp.w	fp, #2
 80053d8:	d1ae      	bne.n	8005338 <_scanf_i+0x88>
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80053e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80053e4:	d1bf      	bne.n	8005366 <_scanf_i+0xb6>
 80053e6:	2310      	movs	r3, #16
 80053e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ec:	6063      	str	r3, [r4, #4]
 80053ee:	e7a2      	b.n	8005336 <_scanf_i+0x86>
 80053f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80053f4:	6022      	str	r2, [r4, #0]
 80053f6:	780b      	ldrb	r3, [r1, #0]
 80053f8:	f805 3b01 	strb.w	r3, [r5], #1
 80053fc:	e7de      	b.n	80053bc <_scanf_i+0x10c>
 80053fe:	4631      	mov	r1, r6
 8005400:	4650      	mov	r0, sl
 8005402:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005406:	4798      	blx	r3
 8005408:	2800      	cmp	r0, #0
 800540a:	d0df      	beq.n	80053cc <_scanf_i+0x11c>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	05d9      	lsls	r1, r3, #23
 8005410:	d50d      	bpl.n	800542e <_scanf_i+0x17e>
 8005412:	42bd      	cmp	r5, r7
 8005414:	d909      	bls.n	800542a <_scanf_i+0x17a>
 8005416:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800541a:	4632      	mov	r2, r6
 800541c:	4650      	mov	r0, sl
 800541e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005422:	f105 39ff 	add.w	r9, r5, #4294967295
 8005426:	4798      	blx	r3
 8005428:	464d      	mov	r5, r9
 800542a:	42bd      	cmp	r5, r7
 800542c:	d028      	beq.n	8005480 <_scanf_i+0x1d0>
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	f012 0210 	ands.w	r2, r2, #16
 8005434:	d113      	bne.n	800545e <_scanf_i+0x1ae>
 8005436:	702a      	strb	r2, [r5, #0]
 8005438:	4639      	mov	r1, r7
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	4650      	mov	r0, sl
 800543e:	9e01      	ldr	r6, [sp, #4]
 8005440:	47b0      	blx	r6
 8005442:	f8d8 3000 	ldr.w	r3, [r8]
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	f8c8 2000 	str.w	r2, [r8]
 800544e:	f011 0f20 	tst.w	r1, #32
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	d00f      	beq.n	8005476 <_scanf_i+0x1c6>
 8005456:	6018      	str	r0, [r3, #0]
 8005458:	68e3      	ldr	r3, [r4, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	60e3      	str	r3, [r4, #12]
 800545e:	2000      	movs	r0, #0
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	1bed      	subs	r5, r5, r7
 8005464:	445d      	add	r5, fp
 8005466:	442b      	add	r3, r5
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	b007      	add	sp, #28
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	f04f 0b00 	mov.w	fp, #0
 8005474:	e7ca      	b.n	800540c <_scanf_i+0x15c>
 8005476:	07ca      	lsls	r2, r1, #31
 8005478:	bf4c      	ite	mi
 800547a:	8018      	strhmi	r0, [r3, #0]
 800547c:	6018      	strpl	r0, [r3, #0]
 800547e:	e7eb      	b.n	8005458 <_scanf_i+0x1a8>
 8005480:	2001      	movs	r0, #1
 8005482:	e7f2      	b.n	800546a <_scanf_i+0x1ba>
 8005484:	080058c0 	.word	0x080058c0
 8005488:	08005849 	.word	0x08005849
 800548c:	08005761 	.word	0x08005761
 8005490:	08005927 	.word	0x08005927

08005494 <__sccl>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	780b      	ldrb	r3, [r1, #0]
 8005498:	4604      	mov	r4, r0
 800549a:	2b5e      	cmp	r3, #94	; 0x5e
 800549c:	bf0b      	itete	eq
 800549e:	784b      	ldrbeq	r3, [r1, #1]
 80054a0:	1c4a      	addne	r2, r1, #1
 80054a2:	1c8a      	addeq	r2, r1, #2
 80054a4:	2100      	movne	r1, #0
 80054a6:	bf08      	it	eq
 80054a8:	2101      	moveq	r1, #1
 80054aa:	3801      	subs	r0, #1
 80054ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80054b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80054b4:	42a8      	cmp	r0, r5
 80054b6:	d1fb      	bne.n	80054b0 <__sccl+0x1c>
 80054b8:	b90b      	cbnz	r3, 80054be <__sccl+0x2a>
 80054ba:	1e50      	subs	r0, r2, #1
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	f081 0101 	eor.w	r1, r1, #1
 80054c2:	4610      	mov	r0, r2
 80054c4:	54e1      	strb	r1, [r4, r3]
 80054c6:	4602      	mov	r2, r0
 80054c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80054cc:	2d2d      	cmp	r5, #45	; 0x2d
 80054ce:	d005      	beq.n	80054dc <__sccl+0x48>
 80054d0:	2d5d      	cmp	r5, #93	; 0x5d
 80054d2:	d016      	beq.n	8005502 <__sccl+0x6e>
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	d0f1      	beq.n	80054bc <__sccl+0x28>
 80054d8:	462b      	mov	r3, r5
 80054da:	e7f2      	b.n	80054c2 <__sccl+0x2e>
 80054dc:	7846      	ldrb	r6, [r0, #1]
 80054de:	2e5d      	cmp	r6, #93	; 0x5d
 80054e0:	d0fa      	beq.n	80054d8 <__sccl+0x44>
 80054e2:	42b3      	cmp	r3, r6
 80054e4:	dcf8      	bgt.n	80054d8 <__sccl+0x44>
 80054e6:	461a      	mov	r2, r3
 80054e8:	3002      	adds	r0, #2
 80054ea:	3201      	adds	r2, #1
 80054ec:	4296      	cmp	r6, r2
 80054ee:	54a1      	strb	r1, [r4, r2]
 80054f0:	dcfb      	bgt.n	80054ea <__sccl+0x56>
 80054f2:	1af2      	subs	r2, r6, r3
 80054f4:	3a01      	subs	r2, #1
 80054f6:	42b3      	cmp	r3, r6
 80054f8:	bfa8      	it	ge
 80054fa:	2200      	movge	r2, #0
 80054fc:	1c5d      	adds	r5, r3, #1
 80054fe:	18ab      	adds	r3, r5, r2
 8005500:	e7e1      	b.n	80054c6 <__sccl+0x32>
 8005502:	4610      	mov	r0, r2
 8005504:	e7da      	b.n	80054bc <__sccl+0x28>

08005506 <__submore>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	460c      	mov	r4, r1
 800550c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800550e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005512:	4299      	cmp	r1, r3
 8005514:	d11b      	bne.n	800554e <__submore+0x48>
 8005516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800551a:	f7ff f925 	bl	8004768 <_malloc_r>
 800551e:	b918      	cbnz	r0, 8005528 <__submore+0x22>
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552c:	63a3      	str	r3, [r4, #56]	; 0x38
 800552e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005532:	6360      	str	r0, [r4, #52]	; 0x34
 8005534:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005538:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800553c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005540:	7043      	strb	r3, [r0, #1]
 8005542:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005546:	7003      	strb	r3, [r0, #0]
 8005548:	6020      	str	r0, [r4, #0]
 800554a:	2000      	movs	r0, #0
 800554c:	e7ea      	b.n	8005524 <__submore+0x1e>
 800554e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005550:	0077      	lsls	r7, r6, #1
 8005552:	463a      	mov	r2, r7
 8005554:	f000 f856 	bl	8005604 <_realloc_r>
 8005558:	4605      	mov	r5, r0
 800555a:	2800      	cmp	r0, #0
 800555c:	d0e0      	beq.n	8005520 <__submore+0x1a>
 800555e:	eb00 0806 	add.w	r8, r0, r6
 8005562:	4601      	mov	r1, r0
 8005564:	4632      	mov	r2, r6
 8005566:	4640      	mov	r0, r8
 8005568:	f000 f83e 	bl	80055e8 <memcpy>
 800556c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005570:	f8c4 8000 	str.w	r8, [r4]
 8005574:	e7e9      	b.n	800554a <__submore+0x44>

08005576 <memmove>:
 8005576:	4288      	cmp	r0, r1
 8005578:	b510      	push	{r4, lr}
 800557a:	eb01 0402 	add.w	r4, r1, r2
 800557e:	d902      	bls.n	8005586 <memmove+0x10>
 8005580:	4284      	cmp	r4, r0
 8005582:	4623      	mov	r3, r4
 8005584:	d807      	bhi.n	8005596 <memmove+0x20>
 8005586:	1e43      	subs	r3, r0, #1
 8005588:	42a1      	cmp	r1, r4
 800558a:	d008      	beq.n	800559e <memmove+0x28>
 800558c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005590:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005594:	e7f8      	b.n	8005588 <memmove+0x12>
 8005596:	4601      	mov	r1, r0
 8005598:	4402      	add	r2, r0
 800559a:	428a      	cmp	r2, r1
 800559c:	d100      	bne.n	80055a0 <memmove+0x2a>
 800559e:	bd10      	pop	{r4, pc}
 80055a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055a8:	e7f7      	b.n	800559a <memmove+0x24>
	...

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4d05      	ldr	r5, [pc, #20]	; (80055c8 <_sbrk_r+0x1c>)
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fb fe80 	bl	80012bc <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000808 	.word	0x20000808

080055cc <memchr>:
 80055cc:	4603      	mov	r3, r0
 80055ce:	b510      	push	{r4, lr}
 80055d0:	b2c9      	uxtb	r1, r1
 80055d2:	4402      	add	r2, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	d101      	bne.n	80055de <memchr+0x12>
 80055da:	2000      	movs	r0, #0
 80055dc:	e003      	b.n	80055e6 <memchr+0x1a>
 80055de:	7804      	ldrb	r4, [r0, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	428c      	cmp	r4, r1
 80055e4:	d1f6      	bne.n	80055d4 <memchr+0x8>
 80055e6:	bd10      	pop	{r4, pc}

080055e8 <memcpy>:
 80055e8:	440a      	add	r2, r1
 80055ea:	4291      	cmp	r1, r2
 80055ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80055f0:	d100      	bne.n	80055f4 <memcpy+0xc>
 80055f2:	4770      	bx	lr
 80055f4:	b510      	push	{r4, lr}
 80055f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055fa:	4291      	cmp	r1, r2
 80055fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005600:	d1f9      	bne.n	80055f6 <memcpy+0xe>
 8005602:	bd10      	pop	{r4, pc}

08005604 <_realloc_r>:
 8005604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005608:	4680      	mov	r8, r0
 800560a:	4614      	mov	r4, r2
 800560c:	460e      	mov	r6, r1
 800560e:	b921      	cbnz	r1, 800561a <_realloc_r+0x16>
 8005610:	4611      	mov	r1, r2
 8005612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	f7ff b8a7 	b.w	8004768 <_malloc_r>
 800561a:	b92a      	cbnz	r2, 8005628 <_realloc_r+0x24>
 800561c:	f7ff f83c 	bl	8004698 <_free_r>
 8005620:	4625      	mov	r5, r4
 8005622:	4628      	mov	r0, r5
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005628:	f000 f910 	bl	800584c <_malloc_usable_size_r>
 800562c:	4284      	cmp	r4, r0
 800562e:	4607      	mov	r7, r0
 8005630:	d802      	bhi.n	8005638 <_realloc_r+0x34>
 8005632:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005636:	d812      	bhi.n	800565e <_realloc_r+0x5a>
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f7ff f894 	bl	8004768 <_malloc_r>
 8005640:	4605      	mov	r5, r0
 8005642:	2800      	cmp	r0, #0
 8005644:	d0ed      	beq.n	8005622 <_realloc_r+0x1e>
 8005646:	42bc      	cmp	r4, r7
 8005648:	4622      	mov	r2, r4
 800564a:	4631      	mov	r1, r6
 800564c:	bf28      	it	cs
 800564e:	463a      	movcs	r2, r7
 8005650:	f7ff ffca 	bl	80055e8 <memcpy>
 8005654:	4631      	mov	r1, r6
 8005656:	4640      	mov	r0, r8
 8005658:	f7ff f81e 	bl	8004698 <_free_r>
 800565c:	e7e1      	b.n	8005622 <_realloc_r+0x1e>
 800565e:	4635      	mov	r5, r6
 8005660:	e7df      	b.n	8005622 <_realloc_r+0x1e>
	...

08005664 <_strtol_l.constprop.0>:
 8005664:	2b01      	cmp	r3, #1
 8005666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566a:	4686      	mov	lr, r0
 800566c:	4690      	mov	r8, r2
 800566e:	d001      	beq.n	8005674 <_strtol_l.constprop.0+0x10>
 8005670:	2b24      	cmp	r3, #36	; 0x24
 8005672:	d906      	bls.n	8005682 <_strtol_l.constprop.0+0x1e>
 8005674:	f7fe ffdc 	bl	8004630 <__errno>
 8005678:	2316      	movs	r3, #22
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	2000      	movs	r0, #0
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	460d      	mov	r5, r1
 8005684:	4835      	ldr	r0, [pc, #212]	; (800575c <_strtol_l.constprop.0+0xf8>)
 8005686:	462a      	mov	r2, r5
 8005688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800568c:	5d06      	ldrb	r6, [r0, r4]
 800568e:	f016 0608 	ands.w	r6, r6, #8
 8005692:	d1f8      	bne.n	8005686 <_strtol_l.constprop.0+0x22>
 8005694:	2c2d      	cmp	r4, #45	; 0x2d
 8005696:	d12e      	bne.n	80056f6 <_strtol_l.constprop.0+0x92>
 8005698:	2601      	movs	r6, #1
 800569a:	782c      	ldrb	r4, [r5, #0]
 800569c:	1c95      	adds	r5, r2, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d057      	beq.n	8005752 <_strtol_l.constprop.0+0xee>
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d109      	bne.n	80056ba <_strtol_l.constprop.0+0x56>
 80056a6:	2c30      	cmp	r4, #48	; 0x30
 80056a8:	d107      	bne.n	80056ba <_strtol_l.constprop.0+0x56>
 80056aa:	782a      	ldrb	r2, [r5, #0]
 80056ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80056b0:	2a58      	cmp	r2, #88	; 0x58
 80056b2:	d149      	bne.n	8005748 <_strtol_l.constprop.0+0xe4>
 80056b4:	2310      	movs	r3, #16
 80056b6:	786c      	ldrb	r4, [r5, #1]
 80056b8:	3502      	adds	r5, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80056c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056c4:	fbbc f9f3 	udiv	r9, ip, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80056ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80056d2:	2f09      	cmp	r7, #9
 80056d4:	d814      	bhi.n	8005700 <_strtol_l.constprop.0+0x9c>
 80056d6:	463c      	mov	r4, r7
 80056d8:	42a3      	cmp	r3, r4
 80056da:	dd20      	ble.n	800571e <_strtol_l.constprop.0+0xba>
 80056dc:	1c57      	adds	r7, r2, #1
 80056de:	d007      	beq.n	80056f0 <_strtol_l.constprop.0+0x8c>
 80056e0:	4581      	cmp	r9, r0
 80056e2:	d319      	bcc.n	8005718 <_strtol_l.constprop.0+0xb4>
 80056e4:	d101      	bne.n	80056ea <_strtol_l.constprop.0+0x86>
 80056e6:	45a2      	cmp	sl, r4
 80056e8:	db16      	blt.n	8005718 <_strtol_l.constprop.0+0xb4>
 80056ea:	2201      	movs	r2, #1
 80056ec:	fb00 4003 	mla	r0, r0, r3, r4
 80056f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f4:	e7eb      	b.n	80056ce <_strtol_l.constprop.0+0x6a>
 80056f6:	2c2b      	cmp	r4, #43	; 0x2b
 80056f8:	bf04      	itt	eq
 80056fa:	782c      	ldrbeq	r4, [r5, #0]
 80056fc:	1c95      	addeq	r5, r2, #2
 80056fe:	e7ce      	b.n	800569e <_strtol_l.constprop.0+0x3a>
 8005700:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005704:	2f19      	cmp	r7, #25
 8005706:	d801      	bhi.n	800570c <_strtol_l.constprop.0+0xa8>
 8005708:	3c37      	subs	r4, #55	; 0x37
 800570a:	e7e5      	b.n	80056d8 <_strtol_l.constprop.0+0x74>
 800570c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005710:	2f19      	cmp	r7, #25
 8005712:	d804      	bhi.n	800571e <_strtol_l.constprop.0+0xba>
 8005714:	3c57      	subs	r4, #87	; 0x57
 8005716:	e7df      	b.n	80056d8 <_strtol_l.constprop.0+0x74>
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	e7e8      	b.n	80056f0 <_strtol_l.constprop.0+0x8c>
 800571e:	1c53      	adds	r3, r2, #1
 8005720:	d108      	bne.n	8005734 <_strtol_l.constprop.0+0xd0>
 8005722:	2322      	movs	r3, #34	; 0x22
 8005724:	4660      	mov	r0, ip
 8005726:	f8ce 3000 	str.w	r3, [lr]
 800572a:	f1b8 0f00 	cmp.w	r8, #0
 800572e:	d0a6      	beq.n	800567e <_strtol_l.constprop.0+0x1a>
 8005730:	1e69      	subs	r1, r5, #1
 8005732:	e006      	b.n	8005742 <_strtol_l.constprop.0+0xde>
 8005734:	b106      	cbz	r6, 8005738 <_strtol_l.constprop.0+0xd4>
 8005736:	4240      	negs	r0, r0
 8005738:	f1b8 0f00 	cmp.w	r8, #0
 800573c:	d09f      	beq.n	800567e <_strtol_l.constprop.0+0x1a>
 800573e:	2a00      	cmp	r2, #0
 8005740:	d1f6      	bne.n	8005730 <_strtol_l.constprop.0+0xcc>
 8005742:	f8c8 1000 	str.w	r1, [r8]
 8005746:	e79a      	b.n	800567e <_strtol_l.constprop.0+0x1a>
 8005748:	2430      	movs	r4, #48	; 0x30
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b5      	bne.n	80056ba <_strtol_l.constprop.0+0x56>
 800574e:	2308      	movs	r3, #8
 8005750:	e7b3      	b.n	80056ba <_strtol_l.constprop.0+0x56>
 8005752:	2c30      	cmp	r4, #48	; 0x30
 8005754:	d0a9      	beq.n	80056aa <_strtol_l.constprop.0+0x46>
 8005756:	230a      	movs	r3, #10
 8005758:	e7af      	b.n	80056ba <_strtol_l.constprop.0+0x56>
 800575a:	bf00      	nop
 800575c:	08005933 	.word	0x08005933

08005760 <_strtol_r>:
 8005760:	f7ff bf80 	b.w	8005664 <_strtol_l.constprop.0>

08005764 <_strtoul_l.constprop.0>:
 8005764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005768:	4686      	mov	lr, r0
 800576a:	460d      	mov	r5, r1
 800576c:	4f35      	ldr	r7, [pc, #212]	; (8005844 <_strtoul_l.constprop.0+0xe0>)
 800576e:	4628      	mov	r0, r5
 8005770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005774:	5d3e      	ldrb	r6, [r7, r4]
 8005776:	f016 0608 	ands.w	r6, r6, #8
 800577a:	d1f8      	bne.n	800576e <_strtoul_l.constprop.0+0xa>
 800577c:	2c2d      	cmp	r4, #45	; 0x2d
 800577e:	d130      	bne.n	80057e2 <_strtoul_l.constprop.0+0x7e>
 8005780:	2601      	movs	r6, #1
 8005782:	782c      	ldrb	r4, [r5, #0]
 8005784:	1c85      	adds	r5, r0, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d057      	beq.n	800583a <_strtoul_l.constprop.0+0xd6>
 800578a:	2b10      	cmp	r3, #16
 800578c:	d109      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 800578e:	2c30      	cmp	r4, #48	; 0x30
 8005790:	d107      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005792:	7828      	ldrb	r0, [r5, #0]
 8005794:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005798:	2858      	cmp	r0, #88	; 0x58
 800579a:	d149      	bne.n	8005830 <_strtoul_l.constprop.0+0xcc>
 800579c:	2310      	movs	r3, #16
 800579e:	786c      	ldrb	r4, [r5, #1]
 80057a0:	3502      	adds	r5, #2
 80057a2:	f04f 38ff 	mov.w	r8, #4294967295
 80057a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80057aa:	2700      	movs	r7, #0
 80057ac:	fb03 f908 	mul.w	r9, r3, r8
 80057b0:	4638      	mov	r0, r7
 80057b2:	ea6f 0909 	mvn.w	r9, r9
 80057b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057ba:	f1bc 0f09 	cmp.w	ip, #9
 80057be:	d815      	bhi.n	80057ec <_strtoul_l.constprop.0+0x88>
 80057c0:	4664      	mov	r4, ip
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	dd23      	ble.n	800580e <_strtoul_l.constprop.0+0xaa>
 80057c6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80057ca:	d007      	beq.n	80057dc <_strtoul_l.constprop.0+0x78>
 80057cc:	4580      	cmp	r8, r0
 80057ce:	d31b      	bcc.n	8005808 <_strtoul_l.constprop.0+0xa4>
 80057d0:	d101      	bne.n	80057d6 <_strtoul_l.constprop.0+0x72>
 80057d2:	45a1      	cmp	r9, r4
 80057d4:	db18      	blt.n	8005808 <_strtoul_l.constprop.0+0xa4>
 80057d6:	2701      	movs	r7, #1
 80057d8:	fb00 4003 	mla	r0, r0, r3, r4
 80057dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057e0:	e7e9      	b.n	80057b6 <_strtoul_l.constprop.0+0x52>
 80057e2:	2c2b      	cmp	r4, #43	; 0x2b
 80057e4:	bf04      	itt	eq
 80057e6:	782c      	ldrbeq	r4, [r5, #0]
 80057e8:	1c85      	addeq	r5, r0, #2
 80057ea:	e7cc      	b.n	8005786 <_strtoul_l.constprop.0+0x22>
 80057ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057f0:	f1bc 0f19 	cmp.w	ip, #25
 80057f4:	d801      	bhi.n	80057fa <_strtoul_l.constprop.0+0x96>
 80057f6:	3c37      	subs	r4, #55	; 0x37
 80057f8:	e7e3      	b.n	80057c2 <_strtoul_l.constprop.0+0x5e>
 80057fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057fe:	f1bc 0f19 	cmp.w	ip, #25
 8005802:	d804      	bhi.n	800580e <_strtoul_l.constprop.0+0xaa>
 8005804:	3c57      	subs	r4, #87	; 0x57
 8005806:	e7dc      	b.n	80057c2 <_strtoul_l.constprop.0+0x5e>
 8005808:	f04f 37ff 	mov.w	r7, #4294967295
 800580c:	e7e6      	b.n	80057dc <_strtoul_l.constprop.0+0x78>
 800580e:	1c7b      	adds	r3, r7, #1
 8005810:	d106      	bne.n	8005820 <_strtoul_l.constprop.0+0xbc>
 8005812:	2322      	movs	r3, #34	; 0x22
 8005814:	4638      	mov	r0, r7
 8005816:	f8ce 3000 	str.w	r3, [lr]
 800581a:	b932      	cbnz	r2, 800582a <_strtoul_l.constprop.0+0xc6>
 800581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005820:	b106      	cbz	r6, 8005824 <_strtoul_l.constprop.0+0xc0>
 8005822:	4240      	negs	r0, r0
 8005824:	2a00      	cmp	r2, #0
 8005826:	d0f9      	beq.n	800581c <_strtoul_l.constprop.0+0xb8>
 8005828:	b107      	cbz	r7, 800582c <_strtoul_l.constprop.0+0xc8>
 800582a:	1e69      	subs	r1, r5, #1
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	e7f5      	b.n	800581c <_strtoul_l.constprop.0+0xb8>
 8005830:	2430      	movs	r4, #48	; 0x30
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1b5      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005836:	2308      	movs	r3, #8
 8005838:	e7b3      	b.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 800583a:	2c30      	cmp	r4, #48	; 0x30
 800583c:	d0a9      	beq.n	8005792 <_strtoul_l.constprop.0+0x2e>
 800583e:	230a      	movs	r3, #10
 8005840:	e7af      	b.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005842:	bf00      	nop
 8005844:	08005933 	.word	0x08005933

08005848 <_strtoul_r>:
 8005848:	f7ff bf8c 	b.w	8005764 <_strtoul_l.constprop.0>

0800584c <_malloc_usable_size_r>:
 800584c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005850:	1f18      	subs	r0, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfbc      	itt	lt
 8005856:	580b      	ldrlt	r3, [r1, r0]
 8005858:	18c0      	addlt	r0, r0, r3
 800585a:	4770      	bx	lr

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
