
actuation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000060  08005a7c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08005a7c  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc18  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002444  00000000  00000000  0002fce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00032128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b82  00000000  00000000  00032fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c14  00000000  00000000  00033b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125ca  00000000  00000000  00054776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90bb  00000000  00000000  00066d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004724  00000000  00000000  0012fdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00134520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000060 	.word	0x20000060
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08005830 	.word	0x08005830

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000064 	.word	0x20000064
 80001c0:	08005830 	.word	0x08005830

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	468e      	mov	lr, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14c      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d967      	bls.n	80002fe <__udivmoddi4+0xe6>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b153      	cbz	r3, 800024a <__udivmoddi4+0x32>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000240:	fa20 f202 	lsr.w	r2, r0, r2
 8000244:	ea42 0e0e 	orr.w	lr, r2, lr
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fbbe f1f7 	udiv	r1, lr, r7
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fb07 ee11 	mls	lr, r7, r1, lr
 800025a:	fb01 f005 	mul.w	r0, r1, r5
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x66>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000270:	f080 8119 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8116 	bls.w	80004a6 <__udivmoddi4+0x28e>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	fbb2 f0f7 	udiv	r0, r2, r7
 8000284:	fb07 2210 	mls	r2, r7, r0, r2
 8000288:	fb00 f505 	mul.w	r5, r0, r5
 800028c:	b2a4      	uxth	r4, r4
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8104 	bcs.w	80004aa <__udivmoddi4+0x292>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8101 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa6>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xc0>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ea 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d148      	bne.n	8000372 <__udivmoddi4+0x15a>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xd2>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2c2>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4696      	mov	lr, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa6>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xea>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 808e 	bne.w	8000428 <__udivmoddi4+0x210>
 800030c:	1a88      	subs	r0, r1, r2
 800030e:	2101      	movs	r1, #1
 8000310:	0c17      	lsrs	r7, r2, #16
 8000312:	fa1f fe82 	uxth.w	lr, r2
 8000316:	fbb0 f5f7 	udiv	r5, r0, r7
 800031a:	fb07 0015 	mls	r0, r7, r5, r0
 800031e:	0c22      	lsrs	r2, r4, #16
 8000320:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000324:	fb0e f005 	mul.w	r0, lr, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x126>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f105 38ff 	add.w	r8, r5, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x124>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 80cc 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033c:	4645      	mov	r5, r8
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	45a6      	cmp	lr, r4
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x150>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14e>
 8000360:	45a6      	cmp	lr, r4
 8000362:	f200 80b4 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000366:	4610      	mov	r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000370:	e7a0      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000372:	f1c1 0720 	rsb	r7, r1, #32
 8000376:	408b      	lsls	r3, r1
 8000378:	fa22 fc07 	lsr.w	ip, r2, r7
 800037c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000380:	fa25 fa07 	lsr.w	sl, r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	fbba f8f9 	udiv	r8, sl, r9
 800038c:	408d      	lsls	r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	432b      	orrs	r3, r5
 800039c:	fa00 f501 	lsl.w	r5, r0, r1
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	0c1c      	lsrs	r4, r3, #16
 80003a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003aa:	42a0      	cmp	r0, r4
 80003ac:	fa02 f201 	lsl.w	r2, r2, r1
 80003b0:	d90b      	bls.n	80003ca <__udivmoddi4+0x1b2>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ba:	f080 8086 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003be:	42a0      	cmp	r0, r4
 80003c0:	f240 8083 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c4:	f1a8 0802 	sub.w	r8, r8, #2
 80003c8:	4464      	add	r4, ip
 80003ca:	1a24      	subs	r4, r4, r0
 80003cc:	b298      	uxth	r0, r3
 80003ce:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d2:	fb09 4413 	mls	r4, r9, r3, r4
 80003d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80003da:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x1dc>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ea:	d26a      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d968      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003f0:	3b02      	subs	r3, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f8:	fba0 9302 	umull	r9, r3, r0, r2
 80003fc:	eba4 040e 	sub.w	r4, r4, lr
 8000400:	429c      	cmp	r4, r3
 8000402:	46c8      	mov	r8, r9
 8000404:	469e      	mov	lr, r3
 8000406:	d354      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000408:	d051      	beq.n	80004ae <__udivmoddi4+0x296>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d067      	beq.n	80004de <__udivmoddi4+0x2c6>
 800040e:	ebb5 0308 	subs.w	r3, r5, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	40cb      	lsrs	r3, r1
 8000418:	fa04 f707 	lsl.w	r7, r4, r7
 800041c:	431f      	orrs	r7, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e74a      	b.n	80002be <__udivmoddi4+0xa6>
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	f1c3 0020 	rsb	r0, r3, #32
 8000430:	40c1      	lsrs	r1, r0
 8000432:	409d      	lsls	r5, r3
 8000434:	fa24 f000 	lsr.w	r0, r4, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	4328      	orrs	r0, r5
 800043e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000442:	fb07 1115 	mls	r1, r7, r5, r1
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	0c02      	lsrs	r2, r0, #16
 800044c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000450:	fb05 f10e 	mul.w	r1, r5, lr
 8000454:	4291      	cmp	r1, r2
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f105 38ff 	add.w	r8, r5, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	4291      	cmp	r1, r2
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3d02      	subs	r5, #2
 800046c:	4462      	add	r2, ip
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	fbb2 f1f7 	udiv	r1, r2, r7
 8000474:	fb07 2211 	mls	r2, r7, r1, r2
 8000478:	b280      	uxth	r0, r0
 800047a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800047e:	fb01 f20e 	mul.w	r2, r1, lr
 8000482:	4282      	cmp	r2, r0
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0000 	adds.w	r0, ip, r0
 800048a:	f101 38ff 	add.w	r8, r1, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4282      	cmp	r2, r0
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3902      	subs	r1, #2
 8000496:	4460      	add	r0, ip
 8000498:	1a80      	subs	r0, r0, r2
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	e73a      	b.n	8000316 <__udivmoddi4+0xfe>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e70b      	b.n	80002be <__udivmoddi4+0xa6>
 80004a6:	4671      	mov	r1, lr
 80004a8:	e6e9      	b.n	800027e <__udivmoddi4+0x66>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fe      	b.n	80002ac <__udivmoddi4+0x94>
 80004ae:	454d      	cmp	r5, r9
 80004b0:	d2ab      	bcs.n	800040a <__udivmoddi4+0x1f2>
 80004b2:	ebb9 0802 	subs.w	r8, r9, r2
 80004b6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a5      	b.n	800040a <__udivmoddi4+0x1f2>
 80004be:	4641      	mov	r1, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1dc>
 80004c6:	4645      	mov	r5, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77d      	b.n	80003ca <__udivmoddi4+0x1b2>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e749      	b.n	8000368 <__udivmoddi4+0x150>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e731      	b.n	800033e <__udivmoddi4+0x126>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xdc>
 80004de:	4631      	mov	r1, r6
 80004e0:	e6ed      	b.n	80002be <__udivmoddi4+0xa6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004ec:	f000 ff36 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f86c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fa42 	bl	800097c <MX_GPIO_Init>
  MX_RTC_Init();
 80004f8:	f000 f8fc 	bl	80006f4 <MX_RTC_Init>
  MX_TIM1_Init();
 80004fc:	f000 f920 	bl	8000740 <MX_TIM1_Init>
  MX_TIM12_Init();
 8000500:	f000 f9a8 	bl	8000854 <MX_TIM12_Init>
  MX_DAC_Init();
 8000504:	f000 f8c2 	bl	800068c <MX_DAC_Init>
  MX_USART6_UART_Init();
 8000508:	f000 fa0e 	bl	8000928 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //  HAL_UART_RegisterRxEventCallback(&huart6, handleRx)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <main+0xbc>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <main+0xbc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f042 0220 	orr.w	r2, r2, #32
 800051a:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart6, (unsigned char *)&c, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4922      	ldr	r1, [pc, #136]	; (80005a8 <main+0xc0>)
 8000520:	4820      	ldr	r0, [pc, #128]	; (80005a4 <main+0xbc>)
 8000522:	f003 f99a 	bl	800385a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000526:	210c      	movs	r1, #12
 8000528:	4820      	ldr	r0, [pc, #128]	; (80005ac <main+0xc4>)
 800052a:	f002 fa39 	bl	80029a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <main+0xc8>)
 8000532:	f002 fa35 	bl	80029a0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim1.Instance->CNT = 0;
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0xc4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  htim12.Instance->CNT = 0;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <main+0xc8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  while (1) {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    if (msgReady) {
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <main+0xcc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0fb      	beq.n	8000546 <main+0x5e>
#ifdef ECHO
      transmit((const char *)msg);
#else
      switch (msg[0]) {
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <main+0xd0>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b21      	cmp	r3, #33	; 0x21
 8000554:	d002      	beq.n	800055c <main+0x74>
 8000556:	2b58      	cmp	r3, #88	; 0x58
 8000558:	d006      	beq.n	8000568 <main+0x80>
 800055a:	e00a      	b.n	8000572 <main+0x8a>
      case '!':
        handleCommand(msg[1]);
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0xd0>)
 800055e:	785b      	ldrb	r3, [r3, #1]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 faf5 	bl	8000b50 <handleCommand>
        break;
 8000566:	e00a      	b.n	800057e <main+0x96>
      case 'X':
        handlePos(msg + 1);
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <main+0xd4>)
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb9e 	bl	8000cac <handlePos>
        break;
 8000570:	e005      	b.n	800057e <main+0x96>
      default:
        transmit("A999\0");
 8000572:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xd8>)
 8000574:	f000 fac2 	bl	8000afc <transmit>
        gameState = DISCONNECTED;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0xdc>)
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	701a      	strb	r2, [r3, #0]
      }
#endif
      msgReady = 0;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <main+0xcc>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
#ifndef TRACK
      if (gameState == IN_GAME && movQ.count)
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <main+0xdc>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b53      	cmp	r3, #83	; 0x53
 800058a:	d1dc      	bne.n	8000546 <main+0x5e>
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0xe0>)
 800058e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0d7      	beq.n	8000546 <main+0x5e>
        send_pulses(dequeueMove());
 8000596:	f000 fba3 	bl	8000ce0 <dequeueMove>
 800059a:	4603      	mov	r3, r0
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fbd1 	bl	8000d44 <send_pulses>
    if (msgReady) {
 80005a2:	e7d0      	b.n	8000546 <main+0x5e>
 80005a4:	20000140 	.word	0x20000140
 80005a8:	200001b8 	.word	0x200001b8
 80005ac:	200000b0 	.word	0x200000b0
 80005b0:	200000f8 	.word	0x200000f8
 80005b4:	200001e0 	.word	0x200001e0
 80005b8:	200001e4 	.word	0x200001e4
 80005bc:	200001e5 	.word	0x200001e5
 80005c0:	08005848 	.word	0x08005848
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000204 	.word	0x20000204

080005cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f80a 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 80005fe:	230a      	movs	r3, #10
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
      RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000612:	2300      	movs	r3, #0
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000616:	230d      	movs	r3, #13
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 800061a:	23c3      	movs	r3, #195	; 0xc3
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000622:	2304      	movs	r3, #4
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fad2 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
    Error_Handler();
 8000636:	f000 fc77 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800063a:	230f      	movs	r3, #15
 800063c:	617b      	str	r3, [r7, #20]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fd0f 	bl	800207c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x9c>
    Error_Handler();
 8000664:	f000 fc60 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000668:	2304      	movs	r3, #4
 800066a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800066c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000670:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000672:	463b      	mov	r3, r7
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ff01 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb8>
    Error_Handler();
 8000680:	f000 fc52 	bl	8000f28 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
   */
  hdac.Instance = DAC;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DAC_Init+0x60>)
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_DAC_Init+0x64>)
 800069e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_DAC_Init+0x60>)
 80006a2:	f000 ffd6 	bl	8001652 <HAL_DAC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DAC_Init+0x24>
    Error_Handler();
 80006ac:	f000 fc3c 	bl	8000f28 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_DAC_Init+0x60>)
 80006c0:	f000 ffe9 	bl	8001696 <HAL_DAC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DAC_Init+0x42>
    Error_Handler();
 80006ca:	f000 fc2d 	bl	8000f28 <Error_Handler>
  }

  /** DAC channel OUT2 config
   */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 80006ce:	463b      	mov	r3, r7
 80006d0:	2210      	movs	r2, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DAC_Init+0x60>)
 80006d6:	f000 ffde 	bl	8001696 <HAL_DAC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DAC_Init+0x58>
    Error_Handler();
 80006e0:	f000 fc22 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	40007400 	.word	0x40007400

080006f4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_RTC_Init+0x44>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_RTC_Init+0x48>)
 80006fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_RTC_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_RTC_Init+0x44>)
 8000706:	227f      	movs	r2, #127	; 0x7f
 8000708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_RTC_Init+0x44>)
 800070c:	22ff      	movs	r2, #255	; 0xff
 800070e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_RTC_Init+0x44>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_RTC_Init+0x44>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_RTC_Init+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_RTC_Init+0x44>)
 8000724:	f001 ffa0 	bl	8002668 <HAL_RTC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_RTC_Init+0x3e>
    Error_Handler();
 800072e:	f000 fbfb 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000090 	.word	0x20000090
 800073c:	40002800 	.word	0x40002800

08000740 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b092      	sub	sp, #72	; 0x48
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 ff42 	bl	80045f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_TIM1_Init+0x10c>)
 8000772:	4a37      	ldr	r2, [pc, #220]	; (8000850 <MX_TIM1_Init+0x110>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_TIM1_Init+0x10c>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_TIM1_Init+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <MX_TIM1_Init+0x10c>)
 8000784:	2204      	movs	r2, #4
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_TIM1_Init+0x10c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_TIM1_Init+0x10c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM1_Init+0x10c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800079a:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_TIM1_Init+0x10c>)
 800079c:	f002 f8b0 	bl	8002900 <HAL_TIM_PWM_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x6a>
    Error_Handler();
 80007a6:	f000 fbbf 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK) {
 80007aa:	2108      	movs	r1, #8
 80007ac:	4827      	ldr	r0, [pc, #156]	; (800084c <MX_TIM1_Init+0x10c>)
 80007ae:	f002 f9bf 	bl	8002b30 <HAL_TIM_OnePulse_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x7c>
    Error_Handler();
 80007b8:	f000 fbb6 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80007c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c8:	4619      	mov	r1, r3
 80007ca:	4820      	ldr	r0, [pc, #128]	; (800084c <MX_TIM1_Init+0x10c>)
 80007cc:	f002 fe98 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x9a>
    Error_Handler();
 80007d6:	f000 fba7 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80007da:	2370      	movs	r3, #112	; 0x70
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	220c      	movs	r2, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM1_Init+0x10c>)
 80007fc:	f002 f9f2 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xca>
    Error_Handler();
 8000806:	f000 fb8f 	bl	8000f28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x10c>)
 800082e:	f002 fee1 	bl	80035f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xfc>
    Error_Handler();
 8000838:	f000 fb76 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x10c>)
 800083e:	f000 fc3b 	bl	80010b8 <HAL_TIM_MspPostInit>
}
 8000842:	bf00      	nop
 8000844:	3748      	adds	r7, #72	; 0x48
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000b0 	.word	0x200000b0
 8000850:	40010000 	.word	0x40010000

08000854 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_TIM12_Init+0xcc>)
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <MX_TIM12_Init+0xd0>)
 800087e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_TIM12_Init+0xcc>)
 800088e:	2204      	movs	r2, #4
 8000890:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_TIM12_Init+0xcc>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008a0:	f001 ffdf 	bl	8002862 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM12_Init+0x5a>
    Error_Handler();
 80008aa:	f000 fb3d 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4619      	mov	r1, r3
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008bc:	f002 fa54 	bl	8002d68 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM12_Init+0x76>
    Error_Handler();
 80008c6:	f000 fb2f 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 80008ca:	4815      	ldr	r0, [pc, #84]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008cc:	f002 f818 	bl	8002900 <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM12_Init+0x86>
    Error_Handler();
 80008d6:	f000 fb27 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK) {
 80008da:	2108      	movs	r1, #8
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_TIM12_Init+0xcc>)
 80008de:	f002 f927 	bl	8002b30 <HAL_TIM_OnePulse_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM12_Init+0x98>
    Error_Handler();
 80008e8:	f000 fb1e 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008ec:	2370      	movs	r3, #112	; 0x70
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000904:	f002 f96e 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM12_Init+0xbe>
    Error_Handler();
 800090e:	f000 fb0b 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM12_Init+0xcc>)
 8000914:	f000 fbd0 	bl	80010b8 <HAL_TIM_MspPostInit>
}
 8000918:	bf00      	nop
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000f8 	.word	0x200000f8
 8000924:	40001800 	.word	0x40001800

08000928 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART6_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000934:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000938:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK) {
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART6_UART_Init+0x4c>)
 8000960:	f002 fe9a 	bl	8003698 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART6_UART_Init+0x46>
    Error_Handler();
 800096a:	f000 fadd 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000140 	.word	0x20000140
 8000978:	40011400 	.word	0x40011400

0800097c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	4b54      	ldr	r3, [pc, #336]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a53      	ldr	r2, [pc, #332]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a45      	ldr	r2, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x16c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <MX_GPIO_Init+0x170>)
 8000a42:	f001 f8af 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <MX_GPIO_Init+0x174>)
 8000a4e:	f001 f8a9 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a5a:	f001 f8a3 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2101      	movs	r1, #1
 8000a62:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MX_GPIO_Init+0x17c>)
 8000a64:	f001 f89e 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0x170>)
 8000a82:	f000 fef1 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x174>)
 8000aa0:	f000 fee2 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000abe:	f000 fed3 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_GPIO_Init+0x17c>)
 8000ada:	f000 fec5 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	; 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40021000 	.word	0x40021000

08000afc <transmit>:

/* USER CODE BEGIN 4 */
void transmit(const char *m) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
  char s[MAX_TX_LEN];
  snprintf(s, sizeof(s), "%s#%s;\n", m, m);
 8000b04:	f107 0008 	add.w	r0, r7, #8
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <transmit+0x40>)
 8000b10:	211e      	movs	r1, #30
 8000b12:	f003 fd0f 	bl	8004534 <sniprintf>
  HAL_UART_Transmit(&huart6, (unsigned char *)s, strlen(s), HAL_MAX_DELAY);
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb5c 	bl	80001d8 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f107 0108 	add.w	r1, r7, #8
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <transmit+0x44>)
 8000b2e:	f002 fe11 	bl	8003754 <HAL_UART_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08005850 	.word	0x08005850
 8000b40:	20000140 	.word	0x20000140

08000b44 <resetMotors>:

void resetMotors() { return; }
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <handleCommand>:

void handleCommand(const char code) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  switch (code) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	3b44      	subs	r3, #68	; 0x44
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	d850      	bhi.n	8000c04 <handleCommand+0xb4>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <handleCommand+0x18>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000bd9 	.word	0x08000bd9
 8000b6c:	08000c05 	.word	0x08000c05
 8000b70:	08000c05 	.word	0x08000c05
 8000b74:	08000c05 	.word	0x08000c05
 8000b78:	08000c05 	.word	0x08000c05
 8000b7c:	08000bb7 	.word	0x08000bb7
 8000b80:	08000c05 	.word	0x08000c05
 8000b84:	08000c05 	.word	0x08000c05
 8000b88:	08000c05 	.word	0x08000c05
 8000b8c:	08000c05 	.word	0x08000c05
 8000b90:	08000c05 	.word	0x08000c05
 8000b94:	08000c05 	.word	0x08000c05
 8000b98:	08000c05 	.word	0x08000c05
 8000b9c:	08000c05 	.word	0x08000c05
 8000ba0:	08000ba9 	.word	0x08000ba9
 8000ba4:	08000be7 	.word	0x08000be7
  case 'R':
    gameState = RE_CENTER;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <handleCommand+0xc4>)
 8000baa:	2252      	movs	r2, #82	; 0x52
 8000bac:	701a      	strb	r2, [r3, #0]
    transmit("!R\0");
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <handleCommand+0xc8>)
 8000bb0:	f7ff ffa4 	bl	8000afc <transmit>
    break;
 8000bb4:	e02a      	b.n	8000c0c <handleCommand+0xbc>
  case 'I':
    if (gameState == RE_CENTER || gameState == IN_GAME)
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <handleCommand+0xc4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b52      	cmp	r3, #82	; 0x52
 8000bbc:	d003      	beq.n	8000bc6 <handleCommand+0x76>
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <handleCommand+0xc4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b53      	cmp	r3, #83	; 0x53
 8000bc4:	d101      	bne.n	8000bca <handleCommand+0x7a>
      resetMotors();
 8000bc6:	f7ff ffbd 	bl	8000b44 <resetMotors>
    gameState = IDLE;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <handleCommand+0xc4>)
 8000bcc:	2249      	movs	r2, #73	; 0x49
 8000bce:	701a      	strb	r2, [r3, #0]
    transmit("!I\0");
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <handleCommand+0xcc>)
 8000bd2:	f7ff ff93 	bl	8000afc <transmit>
    break;
 8000bd6:	e019      	b.n	8000c0c <handleCommand+0xbc>
  case 'D':
    gameState = DISCONNECTED;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <handleCommand+0xc4>)
 8000bda:	2244      	movs	r2, #68	; 0x44
 8000bdc:	701a      	strb	r2, [r3, #0]
    transmit("!D\0");
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <handleCommand+0xd0>)
 8000be0:	f7ff ff8c 	bl	8000afc <transmit>
    break;
 8000be4:	e012      	b.n	8000c0c <handleCommand+0xbc>
  case 'S':
    if (gameState != IDLE)
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <handleCommand+0xc4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b49      	cmp	r3, #73	; 0x49
 8000bec:	d003      	beq.n	8000bf6 <handleCommand+0xa6>
      transmit("A988\0");
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <handleCommand+0xd4>)
 8000bf0:	f7ff ff84 	bl	8000afc <transmit>
    else {
      gameState = IN_GAME;
      transmit("!S\0");
    }
    break;
 8000bf4:	e00a      	b.n	8000c0c <handleCommand+0xbc>
      gameState = IN_GAME;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <handleCommand+0xc4>)
 8000bf8:	2253      	movs	r2, #83	; 0x53
 8000bfa:	701a      	strb	r2, [r3, #0]
      transmit("!S\0");
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <handleCommand+0xd8>)
 8000bfe:	f7ff ff7d 	bl	8000afc <transmit>
    break;
 8000c02:	e003      	b.n	8000c0c <handleCommand+0xbc>
  default:
    transmit("A989\0");
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <handleCommand+0xdc>)
 8000c06:	f7ff ff79 	bl	8000afc <transmit>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	08005858 	.word	0x08005858
 8000c1c:	0800585c 	.word	0x0800585c
 8000c20:	08005860 	.word	0x08005860
 8000c24:	08005864 	.word	0x08005864
 8000c28:	0800586c 	.word	0x0800586c
 8000c2c:	08005870 	.word	0x08005870

08000c30 <enqueueMove>:

void enqueueMove(Position m) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	463b      	mov	r3, r7
 8000c38:	e883 0003 	stmia.w	r3, {r0, r1}
  Position *end = &movQ.moves[movQ.end++];
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <enqueueMove+0x70>)
 8000c3e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	b2d1      	uxtb	r1, r2
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <enqueueMove+0x70>)
 8000c48:	f882 1321 	strb.w	r1, [r2, #801]	; 0x321
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <enqueueMove+0x70>)
 8000c50:	4413      	add	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
  movQ.end %= MAX_Q_LEN;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <enqueueMove+0x70>)
 8000c56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <enqueueMove+0x74>)
 8000c5c:	fba2 1203 	umull	r1, r2, r2, r3
 8000c60:	0952      	lsrs	r2, r2, #5
 8000c62:	2164      	movs	r1, #100	; 0x64
 8000c64:	fb01 f202 	mul.w	r2, r1, r2
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <enqueueMove+0x70>)
 8000c6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  if (movQ.count++ == MAX_Q_LEN)
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <enqueueMove+0x70>)
 8000c74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	b2d1      	uxtb	r1, r2
 8000c7c:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <enqueueMove+0x70>)
 8000c7e:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d102      	bne.n	8000c8c <enqueueMove+0x5c>
    transmit("A979\0");
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <enqueueMove+0x78>)
 8000c88:	f7ff ff38 	bl	8000afc <transmit>
  end->xPul = m.xPul;
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]
  end->yPul = m.yPul;
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	605a      	str	r2, [r3, #4]
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000204 	.word	0x20000204
 8000ca4:	51eb851f 	.word	0x51eb851f
 8000ca8:	08005878 	.word	0x08005878

08000cac <handlePos>:
  char message[MAX_TX_LEN] = {0};
  sprintf(message, "X%d,%d", p.xPul, p.yPul);
  transmit(message);
}

void handlePos(unsigned char *data) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  Position m;
  sscanf((char *)data, "%d,%d", &m.xPul, &m.yPul);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	3304      	adds	r3, #4
 8000cba:	f107 0208 	add.w	r2, r7, #8
 8000cbe:	4907      	ldr	r1, [pc, #28]	; (8000cdc <handlePos+0x30>)
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f003 fc6b 	bl	800459c <siscanf>
#ifdef TRACK
  curPos.xPul += m.xPul;
  curPos.yPul += m.yPul;
  sendPos(curPos);
#else
  enqueueMove(m);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cce:	f7ff ffaf 	bl	8000c30 <enqueueMove>
#endif
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08005888 	.word	0x08005888

08000ce0 <dequeueMove>:

Position *dequeueMove() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  if (!movQ.count)
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <dequeueMove+0x58>)
 8000ce8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <dequeueMove+0x16>
    transmit("A969\0");
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <dequeueMove+0x5c>)
 8000cf2:	f7ff ff03 	bl	8000afc <transmit>
  Position *move = &movQ.moves[movQ.start++];
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <dequeueMove+0x58>)
 8000cf8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	b2d1      	uxtb	r1, r2
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <dequeueMove+0x58>)
 8000d02:	f882 1320 	strb.w	r1, [r2, #800]	; 0x320
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <dequeueMove+0x58>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	607b      	str	r3, [r7, #4]
  movQ.start %= MAX_Q_LEN;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <dequeueMove+0x58>)
 8000d10:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <dequeueMove+0x60>)
 8000d16:	fba2 1203 	umull	r1, r2, r2, r3
 8000d1a:	0952      	lsrs	r2, r2, #5
 8000d1c:	2164      	movs	r1, #100	; 0x64
 8000d1e:	fb01 f202 	mul.w	r2, r1, r2
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <dequeueMove+0x58>)
 8000d28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  return move;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000204 	.word	0x20000204
 8000d3c:	08005890 	.word	0x08005890
 8000d40:	51eb851f 	.word	0x51eb851f

08000d44 <send_pulses>:

void send_pulses(Position *move) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  int sent1 = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  int sent2 = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  int i;
  unsigned char arr_check = htim12.Instance->ARR;
 8000d54:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <send_pulses+0x130>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	72fb      	strb	r3, [r7, #11]
  if (move->xPul > move->yPul) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd3a      	ble.n	8000dde <send_pulses+0x9a>
    for (sent1 = 0; sent1 < move->xPul; sent1++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e031      	b.n	8000dd2 <send_pulses+0x8e>
      if (sent2 < move->yPul) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	da17      	bge.n	8000da8 <send_pulses+0x64>
        for (i = 0; i < arr_check; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e00a      	b.n	8000d94 <send_pulses+0x50>
          htim12.Instance->CNT = i;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <send_pulses+0x130>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
          htim1.Instance->CNT = i;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <send_pulses+0x134>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
        for (i = 0; i < arr_check; i++) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <send_pulses+0x3a>
        }
        i = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
        sent2++;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	3301      	adds	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e011      	b.n	8000dcc <send_pulses+0x88>
      } else {
        htim1.Instance->CNT = 0;
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <send_pulses+0x134>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
        for (; i < arr_check; i++) {
 8000db0:	e006      	b.n	8000dc0 <send_pulses+0x7c>
          htim12.Instance->CNT = i;
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <send_pulses+0x130>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
        for (; i < arr_check; i++) {
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf4      	blt.n	8000db2 <send_pulses+0x6e>
        }
        i = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
    for (sent1 = 0; sent1 < move->xPul; sent1++) {
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbc8      	blt.n	8000d6e <send_pulses+0x2a>
 8000ddc:	e039      	b.n	8000e52 <send_pulses+0x10e>
      }
    }
  } else {
    for (sent2 = 0; sent2 < move->yPul; sent2++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e031      	b.n	8000e48 <send_pulses+0x104>
      if (sent1 < move->xPul) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da17      	bge.n	8000e1e <send_pulses+0xda>
        for (i = 0; i < arr_check; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e00a      	b.n	8000e0a <send_pulses+0xc6>
          htim12.Instance->CNT = i;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <send_pulses+0x130>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
          htim1.Instance->CNT = i;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <send_pulses+0x134>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
        for (i = 0; i < arr_check; i++) {
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbf0      	blt.n	8000df4 <send_pulses+0xb0>
        }
        i = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
        sent1++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e011      	b.n	8000e42 <send_pulses+0xfe>
      } else {
        htim12.Instance->CNT = 0;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <send_pulses+0x130>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
        for (; i < arr_check; i++) {
 8000e26:	e006      	b.n	8000e36 <send_pulses+0xf2>
          htim1.Instance->CNT = i;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <send_pulses+0x134>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
        for (; i < arr_check; i++) {
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf4      	blt.n	8000e28 <send_pulses+0xe4>
        }
        i = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
    for (sent2 = 0; sent2 < move->yPul; sent2++) {
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	3301      	adds	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbc8      	blt.n	8000de4 <send_pulses+0xa0>
      }
    }
  }
  htim12.Instance->CNT = 0;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <send_pulses+0x130>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  htim1.Instance->CNT = 0;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <send_pulses+0x134>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <send_pulses+0x138>)
 8000e68:	f000 fe9c 	bl	8001ba4 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	200000b0 	.word	0x200000b0
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  switch (c) {
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_UART_RxCpltCallback+0x90>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b23      	cmp	r3, #35	; 0x23
 8000e8e:	d002      	beq.n	8000e96 <HAL_UART_RxCpltCallback+0x16>
 8000e90:	2b3b      	cmp	r3, #59	; 0x3b
 8000e92:	d013      	beq.n	8000ebc <HAL_UART_RxCpltCallback+0x3c>
 8000e94:	e02d      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x72>
  case '#':
    msg[i] = buffer[i] = '\0';
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	54d1      	strb	r1, [r2, r3]
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_UART_RxCpltCallback+0x9c>)
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	54d1      	strb	r1, [r2, r3]
    strcpy((char *)msg, (char *)buffer);
 8000eac:	491a      	ldr	r1, [pc, #104]	; (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <HAL_UART_RxCpltCallback+0x9c>)
 8000eb0:	f003 fbd4 	bl	800465c <strcpy>
    i = 0;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
    break;
 8000eba:	e024      	b.n	8000f06 <HAL_UART_RxCpltCallback+0x86>
  case ';':
    buffer[i] = '\0';
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	54d1      	strb	r1, [r2, r3]
    if (strcmp((char *)msg, (char *)buffer) || msgReady)
 8000ec6:	4914      	ldr	r1, [pc, #80]	; (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <HAL_UART_RxCpltCallback+0x9c>)
 8000eca:	f7ff f97b 	bl	80001c4 <strcmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <HAL_UART_RxCpltCallback+0x5c>
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_UART_RxCpltCallback+0x64>
      gameState = DISCONNECTED;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_RxCpltCallback+0xa4>)
 8000ede:	2244      	movs	r2, #68	; 0x44
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e002      	b.n	8000eea <HAL_UART_RxCpltCallback+0x6a>
    else
      msgReady = 1;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
    i = 0;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
    break;
 8000ef0:	e009      	b.n	8000f06 <HAL_UART_RxCpltCallback+0x86>
  default:
    buffer[i++] = c;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	4906      	ldr	r1, [pc, #24]	; (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000efa:	600a      	str	r2, [r1, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_UART_RxCpltCallback+0x90>)
 8000efe:	7811      	ldrb	r1, [r2, #0]
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000f02:	54d1      	strb	r1, [r2, r3]
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001b8 	.word	0x200001b8
 8000f14:	200001dc 	.word	0x200001dc
 8000f18:	200001bc 	.word	0x200001bc
 8000f1c:	200001e4 	.word	0x200001e4
 8000f20:	200001e0 	.word	0x200001e0
 8000f24:	20000000 	.word	0x20000000

08000f28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
   */
  __disable_irq();
  //  while (1) {
  //  }
  /* USER CODE END Error_Handler_Debug */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x48>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x48>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x48>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_MspInit+0x48>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_MspInit+0x48>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_MspInit+0x48>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_DAC_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d127      	bne.n	8000ff6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_DAC_MspInit+0x80>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fde:	2330      	movs	r3, #48	; 0x30
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_DAC_MspInit+0x84>)
 8000ff2:	f000 fc39 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40007400 	.word	0x40007400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a05      	ldr	r2, [pc, #20]	; (8001030 <HAL_RTC_MspInit+0x24>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d102      	bne.n	8001024 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_RTC_MspInit+0x28>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40002800 	.word	0x40002800
 8001034:	42470e3c 	.word	0x42470e3c

08001038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_TIM_PWM_MspInit+0x38>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10d      	bne.n	8001066 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40010000 	.word	0x40010000
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10d      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_TIM_Base_MspInit+0x3c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40001800 	.word	0x40001800
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a25      	ldr	r2, [pc, #148]	; (800116c <HAL_TIM_MspPostInit+0xb4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d11f      	bne.n	800111a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a23      	ldr	r2, [pc, #140]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001108:	2301      	movs	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <HAL_TIM_MspPostInit+0xbc>)
 8001114:	f000 fba8 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001118:	e023      	b.n	8001162 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_TIM_MspPostInit+0xc0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d11e      	bne.n	8001162 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001152:	2309      	movs	r3, #9
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <HAL_TIM_MspPostInit+0xc4>)
 800115e:	f000 fb83 	bl	8001868 <HAL_GPIO_Init>
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40010000 	.word	0x40010000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000
 8001178:	40001800 	.word	0x40001800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_UART_MspInit+0x94>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d133      	bne.n	800120a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_UART_MspInit+0x98>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011ea:	2308      	movs	r3, #8
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_UART_MspInit+0x9c>)
 80011f6:	f000 fb37 	bl	8001868 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2047      	movs	r0, #71	; 0x47
 8001200:	f000 f9f1 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001204:	2047      	movs	r0, #71	; 0x47
 8001206:	f000 fa0a 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40011400 	.word	0x40011400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 f8cb 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <USART6_IRQHandler+0x18>)
 8001276:	f002 fb15 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  HAL_UART_Receive_IT(&huart6, &c, 1);
 800127a:	2201      	movs	r2, #1
 800127c:	4903      	ldr	r1, [pc, #12]	; (800128c <USART6_IRQHandler+0x1c>)
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <USART6_IRQHandler+0x18>)
 8001280:	f002 faeb 	bl	800385a <HAL_UART_Receive_IT>
  /* USER CODE END USART6_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000140 	.word	0x20000140
 800128c:	200001b8 	.word	0x200001b8

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f003 f9a0 	bl	8004604 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20020000 	.word	0x20020000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	20000528 	.word	0x20000528
 80012f8:	20000678 	.word	0x20000678

080012fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800130c:	f7ff fff6 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f003 f96b 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff f8d5 	bl	80004e8 <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800134c:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8001350:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001354:	20000678 	.word	0x20000678

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f923 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	200f      	movs	r0, #15
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fdd2 	bl	8000f38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f93b 	bl	800163a <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f903 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000004 	.word	0x20000004
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x1c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_IncTick+0x20>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_IncTick+0x20>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	2000000c 	.word	0x2000000c
 8001420:	2000052c 	.word	0x2000052c

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_GetTick+0x10>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	2000052c 	.word	0x2000052c

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4906      	ldr	r1, [pc, #24]	; (80014d0 <__NVIC_EnableIRQ+0x34>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff90 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff2d 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff42 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff35 	bl	800149c <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e014      	b.n	800168e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fc85 	bl	8000f84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001696:	b480      	push	{r7}
 8001698:	b089      	sub	sp, #36	; 0x24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_DAC_ConfigChannel+0x1c>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e042      	b.n	800173c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	795b      	ldrb	r3, [r3, #5]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_DAC_ConfigChannel+0x2c>
 80016be:	2302      	movs	r3, #2
 80016c0:	e03c      	b.n	800173c <HAL_DAC_ConfigChannel+0xa6>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2202      	movs	r2, #2
 80016cc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	22c0      	movs	r2, #192	; 0xc0
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800173a:	7ffb      	ldrb	r3, [r7, #31]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff fe66 	bl	8001424 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d008      	beq.n	8001778 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e052      	b.n	800181e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0216 	bic.w	r2, r2, #22
 8001786:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001796:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <HAL_DMA_Abort+0x62>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c8:	e013      	b.n	80017f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ca:	f7ff fe2b 	bl	8001424 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d90c      	bls.n	80017f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e015      	b.n	800181e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e4      	bne.n	80017ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e00c      	b.n	800185e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2205      	movs	r2, #5
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e16f      	b.n	8001b58 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8161 	beq.w	8001b52 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d005      	beq.n	80018a8 <HAL_GPIO_Init+0x40>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b03      	cmp	r3, #3
 8001914:	d017      	beq.n	8001946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d123      	bne.n	800199a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80bb 	beq.w	8001b52 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ea:	6453      	str	r3, [r2, #68]	; 0x44
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f8:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <HAL_GPIO_Init+0x310>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d031      	beq.n	8001a88 <HAL_GPIO_Init+0x220>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d02b      	beq.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d025      	beq.n	8001a80 <HAL_GPIO_Init+0x218>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d01f      	beq.n	8001a7c <HAL_GPIO_Init+0x214>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d019      	beq.n	8001a78 <HAL_GPIO_Init+0x210>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_GPIO_Init+0x328>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x20c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x208>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x204>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x200>
 8001a64:	2308      	movs	r3, #8
 8001a66:	e010      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a68:	2309      	movs	r3, #9
 8001a6a:	e00e      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	e00c      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a70:	2306      	movs	r3, #6
 8001a72:	e00a      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e008      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9c:	4936      	ldr	r1, [pc, #216]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae88 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e23b      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d050      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	4b9e      	ldr	r3, [pc, #632]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4b9b      	ldr	r3, [pc, #620]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d112      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d036      	beq.n	8001c92 <HAL_RCC_OscConfig+0xbe>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d132      	bne.n	8001c92 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e216      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_RCC_OscConfig+0x29c>)
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d013      	beq.n	8001c6a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fbef 	bl	8001424 <HAL_GetTick>
 8001c46:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fbeb 	bl	8001424 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e200      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c68:	e014      	b.n	8001c94 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fbdb 	bl	8001424 <HAL_GetTick>
 8001c6e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c72:	f7ff fbd7 	bl	8001424 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	; 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1ec      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x9e>
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d077      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d126      	bne.n	8001d06 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d120      	bne.n	8001d06 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc4:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e1c0      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	21f8      	movs	r1, #248	; 0xf8
 8001cea:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	69b9      	ldr	r1, [r7, #24]
 8001cee:	fa91 f1a1 	rbit	r1, r1
 8001cf2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cf4:	6979      	ldr	r1, [r7, #20]
 8001cf6:	fab1 f181 	clz	r1, r1
 8001cfa:	b2c9      	uxtb	r1, r1
 8001cfc:	408b      	lsls	r3, r1
 8001cfe:	495b      	ldr	r1, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d04:	e044      	b.n	8001d90 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d02a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_OscConfig+0x2a0>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb86 	bl	8001424 <HAL_GetTick>
 8001d18:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fb82 	bl	8001424 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e197      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	21f8      	movs	r1, #248	; 0xf8
 8001d48:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	fa91 f1a1 	rbit	r1, r1
 8001d50:	60f9      	str	r1, [r7, #12]
  return result;
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	fab1 f181 	clz	r1, r1
 8001d58:	b2c9      	uxtb	r1, r1
 8001d5a:	408b      	lsls	r3, r1
 8001d5c:	4943      	ldr	r1, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
 8001d62:	e015      	b.n	8001d90 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x2a0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb5b 	bl	8001424 <HAL_GetTick>
 8001d6e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fb57 	bl	8001424 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e16c      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d030      	beq.n	8001dfe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d016      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x2a4>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb3b 	bl	8001424 <HAL_GetTick>
 8001dae:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fb37 	bl	8001424 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e14c      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1de>
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_RCC_OscConfig+0x2a4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fb24 	bl	8001424 <HAL_GetTick>
 8001ddc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fb20 	bl	8001424 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e135      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d110      	bne.n	8001e40 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_OscConfig+0x298>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_RCC_OscConfig+0x2a8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x2a8>)
 8001e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x2a8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d122      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x2a8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x2a8>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fade 	bl	8001424 <HAL_GetTick>
 8001e68:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	e012      	b.n	8001e92 <HAL_RCC_OscConfig+0x2be>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40023802 	.word	0x40023802
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
 8001e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7ff fad0 	bl	8001424 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0e5      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b75      	ldr	r3, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x494>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x498>)
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fab8 	bl	8001424 <HAL_GetTick>
 8001eb4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fab4 	bl	8001424 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0c7      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2e4>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff faa2 	bl	8001424 <HAL_GetTick>
 8001ee0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fa9e 	bl	8001424 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0b1      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 809c 	beq.w	800205c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f24:	4b52      	ldr	r3, [pc, #328]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x4a0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa71 	bl	8001424 <HAL_GetTick>
 8001f42:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa6d 	bl	8001424 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e082      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x4a4>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	69d1      	ldr	r1, [r2, #28]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6a12      	ldr	r2, [r2, #32]
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7a:	0192      	lsls	r2, r2, #6
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f82:	0612      	lsls	r2, r2, #24
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f8a:	0852      	lsrs	r2, r2, #1
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	0412      	lsls	r2, r2, #16
 8001f90:	430a      	orrs	r2, r1
 8001f92:	4937      	ldr	r1, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x4a0>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa41 	bl	8001424 <HAL_GetTick>
 8001fa2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fa3d 	bl	8001424 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e052      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3d2>
 8001fc4:	e04a      	b.n	800205c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_OscConfig+0x4a0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fa2a 	bl	8001424 <HAL_GetTick>
 8001fd0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fa26 	bl	8001424 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e03b      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x400>
 8001ff2:	e033      	b.n	800205c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e02e      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x49c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	d121      	bne.n	8002058 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	3b01      	subs	r3, #1
 8002042:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40007000 	.word	0x40007000
 800206c:	40023870 	.word	0x40023870
 8002070:	40023800 	.word	0x40023800
 8002074:	42470060 	.word	0x42470060
 8002078:	f0bc8000 	.word	0xf0bc8000

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d2      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0be      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a55      	ldr	r2, [pc, #340]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4950      	ldr	r1, [pc, #320]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d040      	beq.n	8002194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e085      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e079      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e071      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4939      	ldr	r1, [pc, #228]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff f95e 	bl	8001424 <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f95a 	bl	8001424 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e059      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e03c      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	491b      	ldr	r1, [pc, #108]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4913      	ldr	r1, [pc, #76]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80021fa:	f000 f82b 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002208:	22f0      	movs	r2, #240	; 0xf0
 800220a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	fa92 f2a2 	rbit	r2, r2
 8002212:	60fa      	str	r2, [r7, #12]
  return result;
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	fab2 f282 	clz	r2, r2
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	40d3      	lsrs	r3, r2
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	fa21 f303 	lsr.w	r3, r1, r3
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f8b6 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00
 8002244:	40023800 	.word	0x40023800
 8002248:	080058a4 	.word	0x080058a4
 800224c:	20000004 	.word	0x20000004
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b090      	sub	sp, #64	; 0x40
 800225a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
 8002260:	2300      	movs	r3, #0
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d00d      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x40>
 8002278:	2b08      	cmp	r3, #8
 800227a:	f200 80a2 	bhi.w	80023c2 <HAL_RCC_GetSysClockFreq+0x16e>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x34>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x3a>
 8002286:	e09c      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800228c:	e09c      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002292:	e099      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4b4f      	ldr	r3, [pc, #316]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d027      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2200      	movs	r2, #0
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	627a      	str	r2, [r7, #36]	; 0x24
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022bc:	2100      	movs	r1, #0
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 80022c0:	fb03 f201 	mul.w	r2, r3, r1
 80022c4:	2300      	movs	r3, #0
 80022c6:	fb00 f303 	mul.w	r3, r0, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	4a43      	ldr	r2, [pc, #268]	; (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 80022ce:	fba0 2102 	umull	r2, r1, r0, r2
 80022d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80022d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80022d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d8:	4413      	add	r3, r2
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	2200      	movs	r2, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	61fa      	str	r2, [r7, #28]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022ec:	f7fd ff7c 	bl	80001e8 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4613      	mov	r3, r2
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f8:	e055      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	2200      	movs	r2, #0
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	617a      	str	r2, [r7, #20]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800230c:	f04f 0b00 	mov.w	fp, #0
 8002310:	4652      	mov	r2, sl
 8002312:	465b      	mov	r3, fp
 8002314:	f04f 0000 	mov.w	r0, #0
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	0159      	lsls	r1, r3, #5
 800231e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002322:	0150      	lsls	r0, r2, #5
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	ebb2 080a 	subs.w	r8, r2, sl
 800232c:	eb63 090b 	sbc.w	r9, r3, fp
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800233c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002340:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002344:	ebb2 0408 	subs.w	r4, r2, r8
 8002348:	eb63 0509 	sbc.w	r5, r3, r9
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	00eb      	lsls	r3, r5, #3
 8002356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235a:	00e2      	lsls	r2, r4, #3
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	eb14 030a 	adds.w	r3, r4, sl
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	eb45 030b 	adc.w	r3, r5, fp
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002378:	4629      	mov	r1, r5
 800237a:	028b      	lsls	r3, r1, #10
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	4604      	mov	r4, r0
 8002382:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002386:	4601      	mov	r1, r0
 8002388:	028a      	lsls	r2, r1, #10
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	2200      	movs	r2, #0
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	60fa      	str	r2, [r7, #12]
 8002396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239a:	f7fd ff25 	bl	80001e8 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4613      	mov	r3, r2
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	3301      	adds	r3, #1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3740      	adds	r7, #64	; 0x40
 80023ce:	46bd      	mov	sp, r7
 80023d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	017d7840 	.word	0x017d7840

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80023fa:	f7ff fff1 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002408:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800240c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	603a      	str	r2, [r7, #0]
  return result;
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	40d3      	lsrs	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	080058b4 	.word	0x080058b4

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800243e:	f7ff ffcf 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002442:	4601      	mov	r1, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800244c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002450:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	603a      	str	r2, [r7, #0]
  return result;
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	40d3      	lsrs	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	080058b4 	.word	0x080058b4

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800249c:	2b08      	cmp	r3, #8
 800249e:	d14c      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024a6:	f7fe ffbd 	bl	8001424 <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024ae:	f7fe ffb9 	bl	8001424 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0c7      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	fa92 f2a2 	rbit	r2, r2
 80024dc:	613a      	str	r2, [r7, #16]
  return result;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	fa03 f202 	lsl.w	r2, r3, r2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80024f2:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	69f9      	ldr	r1, [r7, #28]
 80024f6:	fa91 f1a1 	rbit	r1, r1
 80024fa:	61b9      	str	r1, [r7, #24]
  return result;
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	fab1 f181 	clz	r1, r1
 8002502:	b2c9      	uxtb	r1, r1
 8002504:	408b      	lsls	r3, r1
 8002506:	4955      	ldr	r1, [pc, #340]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe ff86 	bl	8001424 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800251c:	f7fe ff82 	bl	8001424 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e090      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8083 	beq.w	800264e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a42      	ldr	r2, [pc, #264]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3d      	ldr	r2, [pc, #244]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002570:	f7fe ff58 	bl	8001424 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002578:	f7fe ff54 	bl	8001424 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e062      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02f      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d028      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025bc:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025be:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025ca:	4a24      	ldr	r2, [pc, #144]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d114      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff22 	bl	8001424 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe ff1e 	bl	8001424 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e02a      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002612:	d10d      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
 800262e:	e005      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	4904      	ldr	r1, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	42470068 	.word	0x42470068
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470e40 	.word	0x42470e40

08002668 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7f5b      	ldrb	r3, [r3, #29]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fcbc 	bl	800100c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d055      	beq.n	8002754 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	22ca      	movs	r2, #202	; 0xca
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2253      	movs	r2, #83	; 0x53
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f87d 	bl	80027b8 <RTC_EnterInitMode>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12c      	bne.n	8002722 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026da:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68d2      	ldr	r2, [r2, #12]
 8002702:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	041a      	lsls	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f884 	bl	8002826 <RTC_ExitInitMode>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
 8002752:	e001      	b.n	8002758 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f643 7257 	movw	r2, #16215	; 0x3f57
 8002782:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002784:	f7fe fe4e 	bl	8001424 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800278a:	e009      	b.n	80027a0 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800278c:	f7fe fe4a 	bl	8001424 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279a:	d901      	bls.n	80027a0 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e007      	b.n	80027b0 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d122      	bne.n	800281c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027e6:	f7fe fe1d 	bl	8001424 <HAL_GetTick>
 80027ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027ec:	e00c      	b.n	8002808 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ee:	f7fe fe19 	bl	8001424 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027fc:	d904      	bls.n	8002808 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2204      	movs	r2, #4
 8002802:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <RTC_EnterInitMode+0x64>
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d1e8      	bne.n	80027ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002840:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff93 	bl	800276e <HAL_RTC_WaitForSynchro>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e041      	b.n	80028f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7fe fbf5 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f000 fb29 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e041      	b.n	8002996 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fb86 	bl	8001038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 fada 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_TIM_PWM_Start+0x24>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e022      	b.n	8002a0a <HAL_TIM_PWM_Start+0x6a>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d109      	bne.n	80029de <HAL_TIM_PWM_Start+0x3e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	e015      	b.n	8002a0a <HAL_TIM_PWM_Start+0x6a>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d109      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x58>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e008      	b.n	8002a0a <HAL_TIM_PWM_Start+0x6a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07c      	b.n	8002b0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0x82>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	e013      	b.n	8002a4a <HAL_TIM_PWM_Start+0xaa>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d104      	bne.n	8002a32 <HAL_TIM_PWM_Start+0x92>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	e00b      	b.n	8002a4a <HAL_TIM_PWM_Start+0xaa>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_PWM_Start+0xa2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	e003      	b.n	8002a4a <HAL_TIM_PWM_Start+0xaa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fd30 	bl	80034b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <HAL_TIM_PWM_Start+0x174>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_TIM_PWM_Start+0xcc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <HAL_TIM_PWM_Start+0x178>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_PWM_Start+0xd0>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_PWM_Start+0xd2>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_TIM_PWM_Start+0x174>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d01d      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <HAL_TIM_PWM_Start+0x17c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_TIM_PWM_Start+0x180>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_TIM_PWM_Start+0x184>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_TIM_PWM_Start+0x178>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_TIM_PWM_Start+0x188>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x136>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_TIM_PWM_Start+0x18c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d111      	bne.n	8002afa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d010      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af8:	e007      	b.n	8002b0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40010400 	.word	0x40010400
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40001800 	.word	0x40001800

08002b30 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e041      	b.n	8002bc8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f839 	bl	8002bd0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f000 f9c1 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0ae      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	f200 809f 	bhi.w	8002d50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002d51 	.word	0x08002d51
 8002c20:	08002d51 	.word	0x08002d51
 8002c24:	08002d51 	.word	0x08002d51
 8002c28:	08002c8d 	.word	0x08002c8d
 8002c2c:	08002d51 	.word	0x08002d51
 8002c30:	08002d51 	.word	0x08002d51
 8002c34:	08002d51 	.word	0x08002d51
 8002c38:	08002ccf 	.word	0x08002ccf
 8002c3c:	08002d51 	.word	0x08002d51
 8002c40:	08002d51 	.word	0x08002d51
 8002c44:	08002d51 	.word	0x08002d51
 8002c48:	08002d0f 	.word	0x08002d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f9ee 	bl	8003034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0208 	orr.w	r2, r2, #8
 8002c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	619a      	str	r2, [r3, #24]
      break;
 8002c8a:	e064      	b.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fa3e 	bl	8003114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6999      	ldr	r1, [r3, #24]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	021a      	lsls	r2, r3, #8
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
      break;
 8002ccc:	e043      	b.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fa91 	bl	80031fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0208 	orr.w	r2, r2, #8
 8002ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0204 	bic.w	r2, r2, #4
 8002cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69d9      	ldr	r1, [r3, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
      break;
 8002d0c:	e023      	b.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fae5 	bl	80032e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	021a      	lsls	r2, r3, #8
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	61da      	str	r2, [r3, #28]
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75fb      	strb	r3, [r7, #23]
      break;
 8002d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_ConfigClockSource+0x1c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0b4      	b.n	8002eee <HAL_TIM_ConfigClockSource+0x186>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbc:	d03e      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xd4>
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	f200 8087 	bhi.w	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	f000 8086 	beq.w	8002eda <HAL_TIM_ConfigClockSource+0x172>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d87f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d01a      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xa6>
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d87b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d050      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x11a>
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d877      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d03c      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xfa>
 8002de8:	2b50      	cmp	r3, #80	; 0x50
 8002dea:	d873      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d058      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d86f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d064      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002df8:	2b30      	cmp	r3, #48	; 0x30
 8002dfa:	d86b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d060      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d867      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d05a      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e0c:	e062      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e1e:	f000 fb2c 	bl	800347a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
      break;
 8002e3a:	e04f      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	f000 fb15 	bl	800347a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5e:	609a      	str	r2, [r3, #8]
      break;
 8002e60:	e03c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 fa8c 	bl	800338c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2150      	movs	r1, #80	; 0x50
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fae3 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002e80:	e02c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 faaa 	bl	80033e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2160      	movs	r1, #96	; 0x60
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fad3 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e01c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa6c 	bl	800338c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fac3 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e00c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f000 faba 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002ed2:	e003      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e000      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3f      	ldr	r2, [pc, #252]	; (8003008 <TIM_Base_SetConfig+0x110>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d00f      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3c      	ldr	r2, [pc, #240]	; (800300c <TIM_Base_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <TIM_Base_SetConfig+0x118>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d007      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <TIM_Base_SetConfig+0x11c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <TIM_Base_SetConfig+0x120>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <TIM_Base_SetConfig+0x110>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d027      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	; (800300c <TIM_Base_SetConfig+0x114>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d023      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <TIM_Base_SetConfig+0x118>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <TIM_Base_SetConfig+0x11c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a28      	ldr	r2, [pc, #160]	; (8003018 <TIM_Base_SetConfig+0x120>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d017      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <TIM_Base_SetConfig+0x124>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <TIM_Base_SetConfig+0x128>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	; (8003024 <TIM_Base_SetConfig+0x12c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <TIM_Base_SetConfig+0x130>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <TIM_Base_SetConfig+0x134>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	; (8003030 <TIM_Base_SetConfig+0x138>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <TIM_Base_SetConfig+0x110>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0xf8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <TIM_Base_SetConfig+0x120>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d103      	bne.n	8002ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	615a      	str	r2, [r3, #20]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800
 8003028:	40001800 	.word	0x40001800
 800302c:	40001c00 	.word	0x40001c00
 8003030:	40002000 	.word	0x40002000

08003034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 0201 	bic.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <TIM_OC1_SetConfig+0xd8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC1_SetConfig+0x64>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <TIM_OC1_SetConfig+0xdc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10c      	bne.n	80030b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0308 	bic.w	r3, r3, #8
 800309e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <TIM_OC1_SetConfig+0xd8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_OC1_SetConfig+0x8e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <TIM_OC1_SetConfig+0xdc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400

08003114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 0210 	bic.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0320 	bic.w	r3, r3, #32
 800315e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <TIM_OC2_SetConfig+0xe0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_OC2_SetConfig+0x68>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <TIM_OC2_SetConfig+0xe4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d10d      	bne.n	8003198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <TIM_OC2_SetConfig+0xe0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_OC2_SetConfig+0x94>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <TIM_OC2_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d113      	bne.n	80031d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40010400 	.word	0x40010400

080031fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <TIM_OC3_SetConfig+0xe0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_OC3_SetConfig+0x66>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <TIM_OC3_SetConfig+0xe4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10d      	bne.n	800327e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <TIM_OC3_SetConfig+0xe0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_OC3_SetConfig+0x92>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <TIM_OC3_SetConfig+0xe4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010400 	.word	0x40010400

080032e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	031b      	lsls	r3, r3, #12
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <TIM_OC4_SetConfig+0xa0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_OC4_SetConfig+0x68>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <TIM_OC4_SetConfig+0xa4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d109      	bne.n	8003360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	019b      	lsls	r3, r3, #6
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40010000 	.word	0x40010000
 8003388:	40010400 	.word	0x40010400

0800338c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0201 	bic.w	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 030a 	bic.w	r3, r3, #10
 80033c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f023 0210 	bic.w	r2, r3, #16
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	031b      	lsls	r3, r3, #12
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003424:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	f043 0307 	orr.w	r3, r3, #7
 8003468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b087      	sub	sp, #28
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	431a      	orrs	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	609a      	str	r2, [r3, #8]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e05a      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d01d      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40010400 	.word	0x40010400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40001800 	.word	0x40001800

080035f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800360c:	2302      	movs	r3, #2
 800360e:	e03d      	b.n	800368c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
	...

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e04d      	b.n	8003746 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d111      	bne.n	80036da <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fbd2 	bl	8003e68 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_UART_Init+0xb8>)
 80036d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fe34 	bl	8004360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003706:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003716:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	08001181 	.word	0x08001181

08003754 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d16d      	bne.n	8003850 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Transmit+0x2c>
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e066      	b.n	8003852 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003792:	f7fd fe47 	bl	8001424 <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d108      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e003      	b.n	80037c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c8:	e02a      	b.n	8003820 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fb7d 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e036      	b.n	8003852 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	3302      	adds	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	e007      	b.n	8003812 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1cf      	bne.n	80037ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fb4d 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e006      	b.n	8003852 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b20      	cmp	r3, #32
 8003872:	d112      	bne.n	800389a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_Receive_IT+0x26>
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e00b      	b.n	800389c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	461a      	mov	r2, r3
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fb8d 	bl	8003fb0 <UART_Start_Receive_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	e000      	b.n	800389c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0ba      	sub	sp, #232	; 0xe8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_UART_IRQHandler+0x66>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fc6c 	bl	80041e0 <UART_Receive_IT>
      return;
 8003908:	e260      	b.n	8003dcc <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800390a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80e1 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x232>
 8003914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003924:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80d4 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_UART_IRQHandler+0xae>
 800393a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_UART_IRQHandler+0xd2>
 800395e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_UART_IRQHandler+0xf6>
 8003982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <HAL_UART_IRQHandler+0x126>
 80039a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f043 0208 	orr.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 81f7 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_UART_IRQHandler+0x14e>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fbf7 	bl	80041e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <HAL_UART_IRQHandler+0x17a>
 8003a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d051      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 faff 	bl	8004022 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d142      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1d9      	bne.n	8003a32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d013      	beq.n	8003aae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	4a80      	ldr	r2, [pc, #512]	; (8003c8c <HAL_UART_IRQHandler+0x3e8>)
 8003a8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fec7 	bl	8001826 <HAL_DMA_Abort_IT>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d019      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e011      	b.n	8003ad2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	e00c      	b.n	8003ad2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ad0:	e177      	b.n	8003dc2 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad2:	bf00      	nop
    return;
 8003ad4:	e175      	b.n	8003dc2 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	f040 8151 	bne.w	8003d82 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 814a 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8143 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	f040 80b7 	bne.w	8003c90 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8147 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f080 8140 	bcs.w	8003dc6 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	f000 8088 	beq.w	8003c6c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1d9      	bne.n	8003b5c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e1      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e3      	bne.n	8003be4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e3      	bne.n	8003c2a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fd6d 	bl	8001746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	1a8a      	subs	r2, r1, r2
 8003c82:	b292      	uxth	r2, r2
 8003c84:	4611      	mov	r1, r2
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c8a:	e09c      	b.n	8003dc6 <HAL_UART_IRQHandler+0x522>
 8003c8c:	080040e7 	.word	0x080040e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 808f 	beq.w	8003dca <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 808a 	beq.w	8003dca <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cda:	647a      	str	r2, [r7, #68]	; 0x44
 8003cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e3      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d12:	633a      	str	r2, [r7, #48]	; 0x30
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	617b      	str	r3, [r7, #20]
   return(result);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d80:	e023      	b.n	8003dca <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4fe>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f9b8 	bl	8004110 <UART_Transmit_IT>
    return;
 8003da0:	e014      	b.n	8003dcc <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <HAL_UART_IRQHandler+0x528>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9f7 	bl	80041ae <UART_EndTransmit_IT>
    return;
 8003dc0:	e004      	b.n	8003dcc <HAL_UART_IRQHandler+0x528>
    return;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <HAL_UART_IRQHandler+0x528>
      return;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <HAL_UART_IRQHandler+0x528>
      return;
 8003dca:	bf00      	nop
  }
}
 8003dcc:	37e8      	adds	r7, #232	; 0xe8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <UART_InitCallbacksToDefault+0x48>)
 8003e74:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <UART_InitCallbacksToDefault+0x4c>)
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <UART_InitCallbacksToDefault+0x50>)
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <UART_InitCallbacksToDefault+0x54>)
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <UART_InitCallbacksToDefault+0x58>)
 8003e8c:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <UART_InitCallbacksToDefault+0x5c>)
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <UART_InitCallbacksToDefault+0x60>)
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <UART_InitCallbacksToDefault+0x64>)
 8003e9e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <UART_InitCallbacksToDefault+0x68>)
 8003ea4:	66da      	str	r2, [r3, #108]	; 0x6c

}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	08003de7 	.word	0x08003de7
 8003eb4:	08003dd5 	.word	0x08003dd5
 8003eb8:	08003df9 	.word	0x08003df9
 8003ebc:	08000e81 	.word	0x08000e81
 8003ec0:	08003e0b 	.word	0x08003e0b
 8003ec4:	08003e1d 	.word	0x08003e1d
 8003ec8:	08003e2f 	.word	0x08003e2f
 8003ecc:	08003e41 	.word	0x08003e41
 8003ed0:	08003e53 	.word	0x08003e53

08003ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b090      	sub	sp, #64	; 0x40
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	e050      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d04c      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef4:	f7fd fa96 	bl	8001424 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d241      	bcs.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f24:	637a      	str	r2, [r7, #52]	; 0x34
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	613b      	str	r3, [r7, #16]
   return(result);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f58:	623a      	str	r2, [r7, #32]
 8003f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e00f      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d09f      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3740      	adds	r7, #64	; 0x40
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2222      	movs	r2, #34	; 0x22
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004022:	b480      	push	{r7}
 8004024:	b095      	sub	sp, #84	; 0x54
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800404a:	643a      	str	r2, [r7, #64]	; 0x40
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e5      	bne.n	800402a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	61fb      	str	r3, [r7, #28]
   return(result);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e5      	bne.n	800405e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	2b01      	cmp	r3, #1
 8004098:	d119      	bne.n	80040ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f023 0310 	bic.w	r3, r3, #16
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ba:	61ba      	str	r2, [r7, #24]
 80040bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6979      	ldr	r1, [r7, #20]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	613b      	str	r3, [r7, #16]
   return(result);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e5      	bne.n	800409a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040dc:	bf00      	nop
 80040de:	3754      	adds	r7, #84	; 0x54
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b21      	cmp	r3, #33	; 0x21
 8004122:	d13e      	bne.n	80041a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d114      	bne.n	8004158 <UART_Transmit_IT+0x48>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d110      	bne.n	8004158 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]
 8004156:	e008      	b.n	800416a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	1c59      	adds	r1, r3, #1
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6211      	str	r1, [r2, #32]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4619      	mov	r1, r3
 8004178:	84d1      	strh	r1, [r2, #38]	; 0x26
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b22      	cmp	r3, #34	; 0x22
 80041f2:	f040 80b0 	bne.w	8004356 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d117      	bne.n	8004230 <UART_Receive_IT+0x50>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d113      	bne.n	8004230 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421e:	b29a      	uxth	r2, r3
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
 800422e:	e026      	b.n	800427e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	d007      	beq.n	8004254 <UART_Receive_IT+0x74>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <UART_Receive_IT+0x82>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e008      	b.n	8004274 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	b2da      	uxtb	r2, r3
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29b      	uxth	r3, r3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4619      	mov	r1, r3
 800428c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800428e:	2b00      	cmp	r3, #0
 8004290:	d15f      	bne.n	8004352 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0220 	bic.w	r2, r2, #32
 80042a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d136      	bne.n	8004346 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	613b      	str	r3, [r7, #16]
   return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f023 0310 	bic.w	r3, r3, #16
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	623a      	str	r2, [r7, #32]
 8004300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	61bb      	str	r3, [r7, #24]
   return(result);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b10      	cmp	r3, #16
 800431e:	d10a      	bne.n	8004336 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800433e:	4611      	mov	r1, r2
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e003      	b.n	800434e <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e002      	b.n	8004358 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8004356:	2302      	movs	r3, #2
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3730      	adds	r7, #48	; 0x30
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043a0:	f023 030c 	bic.w	r3, r3, #12
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	430b      	orrs	r3, r1
 80043ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a57      	ldr	r2, [pc, #348]	; (8004528 <UART_SetConfig+0x1c8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <UART_SetConfig+0x78>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a56      	ldr	r2, [pc, #344]	; (800452c <UART_SetConfig+0x1cc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe f82e 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	e002      	b.n	80043e6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe f808 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80043e4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ee:	d14c      	bne.n	800448a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009a      	lsls	r2, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <UART_SetConfig+0x1d0>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	0119      	lsls	r1, r3, #4
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009a      	lsls	r2, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fbb2 f2f3 	udiv	r2, r2, r3
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <UART_SetConfig+0x1d0>)
 8004428:	fba3 0302 	umull	r0, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2064      	movs	r0, #100	; 0x64
 8004430:	fb00 f303 	mul.w	r3, r0, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <UART_SetConfig+0x1d0>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	4419      	add	r1, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b33      	ldr	r3, [pc, #204]	; (8004530 <UART_SetConfig+0x1d0>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a2e      	ldr	r2, [pc, #184]	; (8004530 <UART_SetConfig+0x1d0>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 0207 	and.w	r2, r3, #7
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	440a      	add	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004488:	e04a      	b.n	8004520 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009a      	lsls	r2, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4a23      	ldr	r2, [pc, #140]	; (8004530 <UART_SetConfig+0x1d0>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	0119      	lsls	r1, r3, #4
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <UART_SetConfig+0x1d0>)
 80044c2:	fba3 0302 	umull	r0, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2064      	movs	r0, #100	; 0x64
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <UART_SetConfig+0x1d0>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	4419      	add	r1, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <UART_SetConfig+0x1d0>)
 80044fa:	fba3 0302 	umull	r0, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2064      	movs	r0, #100	; 0x64
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <UART_SetConfig+0x1d0>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	440a      	add	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40011000 	.word	0x40011000
 800452c:	40011400 	.word	0x40011400
 8004530:	51eb851f 	.word	0x51eb851f

08004534 <sniprintf>:
 8004534:	b40c      	push	{r2, r3}
 8004536:	b530      	push	{r4, r5, lr}
 8004538:	4b17      	ldr	r3, [pc, #92]	; (8004598 <sniprintf+0x64>)
 800453a:	1e0c      	subs	r4, r1, #0
 800453c:	681d      	ldr	r5, [r3, #0]
 800453e:	b09d      	sub	sp, #116	; 0x74
 8004540:	da08      	bge.n	8004554 <sniprintf+0x20>
 8004542:	238b      	movs	r3, #139	; 0x8b
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	b01d      	add	sp, #116	; 0x74
 800454c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004550:	b002      	add	sp, #8
 8004552:	4770      	bx	lr
 8004554:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004558:	f8ad 3014 	strh.w	r3, [sp, #20]
 800455c:	bf0c      	ite	eq
 800455e:	4623      	moveq	r3, r4
 8004560:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	9307      	str	r3, [sp, #28]
 8004568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800456c:	9002      	str	r0, [sp, #8]
 800456e:	9006      	str	r0, [sp, #24]
 8004570:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004574:	4628      	mov	r0, r5
 8004576:	ab21      	add	r3, sp, #132	; 0x84
 8004578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800457a:	a902      	add	r1, sp, #8
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	f000 f9c3 	bl	8004908 <_svfiprintf_r>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	bfbc      	itt	lt
 8004586:	238b      	movlt	r3, #139	; 0x8b
 8004588:	602b      	strlt	r3, [r5, #0]
 800458a:	2c00      	cmp	r4, #0
 800458c:	d0dd      	beq.n	800454a <sniprintf+0x16>
 800458e:	2200      	movs	r2, #0
 8004590:	9b02      	ldr	r3, [sp, #8]
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e7d9      	b.n	800454a <sniprintf+0x16>
 8004596:	bf00      	nop
 8004598:	2000005c 	.word	0x2000005c

0800459c <siscanf>:
 800459c:	b40e      	push	{r1, r2, r3}
 800459e:	f44f 7201 	mov.w	r2, #516	; 0x204
 80045a2:	b530      	push	{r4, r5, lr}
 80045a4:	b09c      	sub	sp, #112	; 0x70
 80045a6:	ac1f      	add	r4, sp, #124	; 0x7c
 80045a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80045ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80045b0:	9002      	str	r0, [sp, #8]
 80045b2:	9006      	str	r0, [sp, #24]
 80045b4:	f7fb fe10 	bl	80001d8 <strlen>
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <siscanf+0x4c>)
 80045ba:	9003      	str	r0, [sp, #12]
 80045bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045be:	2300      	movs	r3, #0
 80045c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80045c2:	9314      	str	r3, [sp, #80]	; 0x50
 80045c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c8:	9007      	str	r0, [sp, #28]
 80045ca:	4808      	ldr	r0, [pc, #32]	; (80045ec <siscanf+0x50>)
 80045cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045d0:	462a      	mov	r2, r5
 80045d2:	4623      	mov	r3, r4
 80045d4:	a902      	add	r1, sp, #8
 80045d6:	6800      	ldr	r0, [r0, #0]
 80045d8:	9401      	str	r4, [sp, #4]
 80045da:	f000 faed 	bl	8004bb8 <__ssvfiscanf_r>
 80045de:	b01c      	add	sp, #112	; 0x70
 80045e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045e4:	b003      	add	sp, #12
 80045e6:	4770      	bx	lr
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	2000005c 	.word	0x2000005c

080045f0 <__seofread>:
 80045f0:	2000      	movs	r0, #0
 80045f2:	4770      	bx	lr

080045f4 <memset>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	4402      	add	r2, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <__errno>:
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <__errno+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000005c 	.word	0x2000005c

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	2600      	movs	r6, #0
 8004614:	4d0c      	ldr	r5, [pc, #48]	; (8004648 <__libc_init_array+0x38>)
 8004616:	4c0d      	ldr	r4, [pc, #52]	; (800464c <__libc_init_array+0x3c>)
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	f001 f906 	bl	8005830 <_init>
 8004624:	2600      	movs	r6, #0
 8004626:	4d0a      	ldr	r5, [pc, #40]	; (8004650 <__libc_init_array+0x40>)
 8004628:	4c0a      	ldr	r4, [pc, #40]	; (8004654 <__libc_init_array+0x44>)
 800462a:	1b64      	subs	r4, r4, r5
 800462c:	10a4      	asrs	r4, r4, #2
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	08005a14 	.word	0x08005a14
 800464c:	08005a14 	.word	0x08005a14
 8004650:	08005a14 	.word	0x08005a14
 8004654:	08005a18 	.word	0x08005a18

08004658 <__retarget_lock_acquire_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_release_recursive>:
 800465a:	4770      	bx	lr

0800465c <strcpy>:
 800465c:	4603      	mov	r3, r0
 800465e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004662:	f803 2b01 	strb.w	r2, [r3], #1
 8004666:	2a00      	cmp	r2, #0
 8004668:	d1f9      	bne.n	800465e <strcpy+0x2>
 800466a:	4770      	bx	lr

0800466c <_free_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4605      	mov	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d040      	beq.n	80046f6 <_free_r+0x8a>
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f0c      	subs	r4, r1, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfb8      	it	lt
 800467e:	18e4      	addlt	r4, r4, r3
 8004680:	f000 f8dc 	bl	800483c <__malloc_lock>
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <_free_r+0x8c>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	b933      	cbnz	r3, 8004698 <_free_r+0x2c>
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	6014      	str	r4, [r2, #0]
 800468e:	4628      	mov	r0, r5
 8004690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004694:	f000 b8d8 	b.w	8004848 <__malloc_unlock>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d908      	bls.n	80046ae <_free_r+0x42>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	e7ed      	b.n	800468a <_free_r+0x1e>
 80046ae:	461a      	mov	r2, r3
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b10b      	cbz	r3, 80046b8 <_free_r+0x4c>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d9fa      	bls.n	80046ae <_free_r+0x42>
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	1850      	adds	r0, r2, r1
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d10b      	bne.n	80046d8 <_free_r+0x6c>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	4401      	add	r1, r0
 80046c4:	1850      	adds	r0, r2, r1
 80046c6:	4283      	cmp	r3, r0
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	d1e0      	bne.n	800468e <_free_r+0x22>
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4408      	add	r0, r1
 80046d2:	6010      	str	r0, [r2, #0]
 80046d4:	6053      	str	r3, [r2, #4]
 80046d6:	e7da      	b.n	800468e <_free_r+0x22>
 80046d8:	d902      	bls.n	80046e0 <_free_r+0x74>
 80046da:	230c      	movs	r3, #12
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	e7d6      	b.n	800468e <_free_r+0x22>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	1821      	adds	r1, r4, r0
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf01      	itttt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	1809      	addeq	r1, r1, r0
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	6054      	str	r4, [r2, #4]
 80046f4:	e7cb      	b.n	800468e <_free_r+0x22>
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	20000670 	.word	0x20000670

080046fc <sbrk_aligned>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4e0e      	ldr	r6, [pc, #56]	; (8004738 <sbrk_aligned+0x3c>)
 8004700:	460c      	mov	r4, r1
 8004702:	6831      	ldr	r1, [r6, #0]
 8004704:	4605      	mov	r5, r0
 8004706:	b911      	cbnz	r1, 800470e <sbrk_aligned+0x12>
 8004708:	f000 ff3a 	bl	8005580 <_sbrk_r>
 800470c:	6030      	str	r0, [r6, #0]
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 ff35 	bl	8005580 <_sbrk_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d00a      	beq.n	8004730 <sbrk_aligned+0x34>
 800471a:	1cc4      	adds	r4, r0, #3
 800471c:	f024 0403 	bic.w	r4, r4, #3
 8004720:	42a0      	cmp	r0, r4
 8004722:	d007      	beq.n	8004734 <sbrk_aligned+0x38>
 8004724:	1a21      	subs	r1, r4, r0
 8004726:	4628      	mov	r0, r5
 8004728:	f000 ff2a 	bl	8005580 <_sbrk_r>
 800472c:	3001      	adds	r0, #1
 800472e:	d101      	bne.n	8004734 <sbrk_aligned+0x38>
 8004730:	f04f 34ff 	mov.w	r4, #4294967295
 8004734:	4620      	mov	r0, r4
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	20000674 	.word	0x20000674

0800473c <_malloc_r>:
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	f025 0503 	bic.w	r5, r5, #3
 8004746:	3508      	adds	r5, #8
 8004748:	2d0c      	cmp	r5, #12
 800474a:	bf38      	it	cc
 800474c:	250c      	movcc	r5, #12
 800474e:	2d00      	cmp	r5, #0
 8004750:	4607      	mov	r7, r0
 8004752:	db01      	blt.n	8004758 <_malloc_r+0x1c>
 8004754:	42a9      	cmp	r1, r5
 8004756:	d905      	bls.n	8004764 <_malloc_r+0x28>
 8004758:	230c      	movs	r3, #12
 800475a:	2600      	movs	r6, #0
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4630      	mov	r0, r6
 8004760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004838 <_malloc_r+0xfc>
 8004768:	f000 f868 	bl	800483c <__malloc_lock>
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	461c      	mov	r4, r3
 8004772:	bb5c      	cbnz	r4, 80047cc <_malloc_r+0x90>
 8004774:	4629      	mov	r1, r5
 8004776:	4638      	mov	r0, r7
 8004778:	f7ff ffc0 	bl	80046fc <sbrk_aligned>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	4604      	mov	r4, r0
 8004780:	d155      	bne.n	800482e <_malloc_r+0xf2>
 8004782:	f8d8 4000 	ldr.w	r4, [r8]
 8004786:	4626      	mov	r6, r4
 8004788:	2e00      	cmp	r6, #0
 800478a:	d145      	bne.n	8004818 <_malloc_r+0xdc>
 800478c:	2c00      	cmp	r4, #0
 800478e:	d048      	beq.n	8004822 <_malloc_r+0xe6>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	4631      	mov	r1, r6
 8004794:	4638      	mov	r0, r7
 8004796:	eb04 0903 	add.w	r9, r4, r3
 800479a:	f000 fef1 	bl	8005580 <_sbrk_r>
 800479e:	4581      	cmp	r9, r0
 80047a0:	d13f      	bne.n	8004822 <_malloc_r+0xe6>
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	4638      	mov	r0, r7
 80047a6:	1a6d      	subs	r5, r5, r1
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7ff ffa7 	bl	80046fc <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d037      	beq.n	8004822 <_malloc_r+0xe6>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	f8d8 3000 	ldr.w	r3, [r8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d038      	beq.n	8004832 <_malloc_r+0xf6>
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	42a2      	cmp	r2, r4
 80047c4:	d12b      	bne.n	800481e <_malloc_r+0xe2>
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e00f      	b.n	80047ec <_malloc_r+0xb0>
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	1b52      	subs	r2, r2, r5
 80047d0:	d41f      	bmi.n	8004812 <_malloc_r+0xd6>
 80047d2:	2a0b      	cmp	r2, #11
 80047d4:	d917      	bls.n	8004806 <_malloc_r+0xca>
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	42a3      	cmp	r3, r4
 80047da:	6025      	str	r5, [r4, #0]
 80047dc:	bf18      	it	ne
 80047de:	6059      	strne	r1, [r3, #4]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	bf08      	it	eq
 80047e4:	f8c8 1000 	streq.w	r1, [r8]
 80047e8:	5162      	str	r2, [r4, r5]
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	4638      	mov	r0, r7
 80047ee:	f104 060b 	add.w	r6, r4, #11
 80047f2:	f000 f829 	bl	8004848 <__malloc_unlock>
 80047f6:	f026 0607 	bic.w	r6, r6, #7
 80047fa:	1d23      	adds	r3, r4, #4
 80047fc:	1af2      	subs	r2, r6, r3
 80047fe:	d0ae      	beq.n	800475e <_malloc_r+0x22>
 8004800:	1b9b      	subs	r3, r3, r6
 8004802:	50a3      	str	r3, [r4, r2]
 8004804:	e7ab      	b.n	800475e <_malloc_r+0x22>
 8004806:	42a3      	cmp	r3, r4
 8004808:	6862      	ldr	r2, [r4, #4]
 800480a:	d1dd      	bne.n	80047c8 <_malloc_r+0x8c>
 800480c:	f8c8 2000 	str.w	r2, [r8]
 8004810:	e7ec      	b.n	80047ec <_malloc_r+0xb0>
 8004812:	4623      	mov	r3, r4
 8004814:	6864      	ldr	r4, [r4, #4]
 8004816:	e7ac      	b.n	8004772 <_malloc_r+0x36>
 8004818:	4634      	mov	r4, r6
 800481a:	6876      	ldr	r6, [r6, #4]
 800481c:	e7b4      	b.n	8004788 <_malloc_r+0x4c>
 800481e:	4613      	mov	r3, r2
 8004820:	e7cc      	b.n	80047bc <_malloc_r+0x80>
 8004822:	230c      	movs	r3, #12
 8004824:	4638      	mov	r0, r7
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	f000 f80e 	bl	8004848 <__malloc_unlock>
 800482c:	e797      	b.n	800475e <_malloc_r+0x22>
 800482e:	6025      	str	r5, [r4, #0]
 8004830:	e7dc      	b.n	80047ec <_malloc_r+0xb0>
 8004832:	605b      	str	r3, [r3, #4]
 8004834:	deff      	udf	#255	; 0xff
 8004836:	bf00      	nop
 8004838:	20000670 	.word	0x20000670

0800483c <__malloc_lock>:
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <__malloc_lock+0x8>)
 800483e:	f7ff bf0b 	b.w	8004658 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	2000066c 	.word	0x2000066c

08004848 <__malloc_unlock>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__malloc_unlock+0x8>)
 800484a:	f7ff bf06 	b.w	800465a <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	2000066c 	.word	0x2000066c

08004854 <__ssputs_r>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	461f      	mov	r7, r3
 800485a:	688e      	ldr	r6, [r1, #8]
 800485c:	4682      	mov	sl, r0
 800485e:	42be      	cmp	r6, r7
 8004860:	460c      	mov	r4, r1
 8004862:	4690      	mov	r8, r2
 8004864:	680b      	ldr	r3, [r1, #0]
 8004866:	d82c      	bhi.n	80048c2 <__ssputs_r+0x6e>
 8004868:	898a      	ldrh	r2, [r1, #12]
 800486a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800486e:	d026      	beq.n	80048be <__ssputs_r+0x6a>
 8004870:	6965      	ldr	r5, [r4, #20]
 8004872:	6909      	ldr	r1, [r1, #16]
 8004874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004878:	eba3 0901 	sub.w	r9, r3, r1
 800487c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004880:	1c7b      	adds	r3, r7, #1
 8004882:	444b      	add	r3, r9
 8004884:	106d      	asrs	r5, r5, #1
 8004886:	429d      	cmp	r5, r3
 8004888:	bf38      	it	cc
 800488a:	461d      	movcc	r5, r3
 800488c:	0553      	lsls	r3, r2, #21
 800488e:	d527      	bpl.n	80048e0 <__ssputs_r+0x8c>
 8004890:	4629      	mov	r1, r5
 8004892:	f7ff ff53 	bl	800473c <_malloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	b360      	cbz	r0, 80048f4 <__ssputs_r+0xa0>
 800489a:	464a      	mov	r2, r9
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	f000 fe8d 	bl	80055bc <memcpy>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	6126      	str	r6, [r4, #16]
 80048b0:	444e      	add	r6, r9
 80048b2:	6026      	str	r6, [r4, #0]
 80048b4:	463e      	mov	r6, r7
 80048b6:	6165      	str	r5, [r4, #20]
 80048b8:	eba5 0509 	sub.w	r5, r5, r9
 80048bc:	60a5      	str	r5, [r4, #8]
 80048be:	42be      	cmp	r6, r7
 80048c0:	d900      	bls.n	80048c4 <__ssputs_r+0x70>
 80048c2:	463e      	mov	r6, r7
 80048c4:	4632      	mov	r2, r6
 80048c6:	4641      	mov	r1, r8
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	f000 fe3e 	bl	800554a <memmove>
 80048ce:	2000      	movs	r0, #0
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	1b9b      	subs	r3, r3, r6
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4433      	add	r3, r6
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	462a      	mov	r2, r5
 80048e2:	f000 fe79 	bl	80055d8 <_realloc_r>
 80048e6:	4606      	mov	r6, r0
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1e0      	bne.n	80048ae <__ssputs_r+0x5a>
 80048ec:	4650      	mov	r0, sl
 80048ee:	6921      	ldr	r1, [r4, #16]
 80048f0:	f7ff febc 	bl	800466c <_free_r>
 80048f4:	230c      	movs	r3, #12
 80048f6:	f8ca 3000 	str.w	r3, [sl]
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	e7e9      	b.n	80048dc <__ssputs_r+0x88>

08004908 <_svfiprintf_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	4698      	mov	r8, r3
 800490e:	898b      	ldrh	r3, [r1, #12]
 8004910:	4607      	mov	r7, r0
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	460d      	mov	r5, r1
 8004916:	4614      	mov	r4, r2
 8004918:	b09d      	sub	sp, #116	; 0x74
 800491a:	d50e      	bpl.n	800493a <_svfiprintf_r+0x32>
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	b963      	cbnz	r3, 800493a <_svfiprintf_r+0x32>
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f7ff ff0b 	bl	800473c <_malloc_r>
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	6128      	str	r0, [r5, #16]
 800492a:	b920      	cbnz	r0, 8004936 <_svfiprintf_r+0x2e>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e0d0      	b.n	8004ad8 <_svfiprintf_r+0x1d0>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	616b      	str	r3, [r5, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9309      	str	r3, [sp, #36]	; 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f04f 0901 	mov.w	r9, #1
 800494a:	f8cd 800c 	str.w	r8, [sp, #12]
 800494e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004af0 <_svfiprintf_r+0x1e8>
 8004952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004956:	4623      	mov	r3, r4
 8004958:	469a      	mov	sl, r3
 800495a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495e:	b10a      	cbz	r2, 8004964 <_svfiprintf_r+0x5c>
 8004960:	2a25      	cmp	r2, #37	; 0x25
 8004962:	d1f9      	bne.n	8004958 <_svfiprintf_r+0x50>
 8004964:	ebba 0b04 	subs.w	fp, sl, r4
 8004968:	d00b      	beq.n	8004982 <_svfiprintf_r+0x7a>
 800496a:	465b      	mov	r3, fp
 800496c:	4622      	mov	r2, r4
 800496e:	4629      	mov	r1, r5
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff6f 	bl	8004854 <__ssputs_r>
 8004976:	3001      	adds	r0, #1
 8004978:	f000 80a9 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 800497c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497e:	445a      	add	r2, fp
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a1 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 800498c:	2300      	movs	r3, #0
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004996:	f10a 0a01 	add.w	sl, sl, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9307      	str	r3, [sp, #28]
 800499e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a2:	931a      	str	r3, [sp, #104]	; 0x68
 80049a4:	4654      	mov	r4, sl
 80049a6:	2205      	movs	r2, #5
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	4850      	ldr	r0, [pc, #320]	; (8004af0 <_svfiprintf_r+0x1e8>)
 80049ae:	f000 fdf7 	bl	80055a0 <memchr>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	b9d8      	cbnz	r0, 80049ee <_svfiprintf_r+0xe6>
 80049b6:	06d0      	lsls	r0, r2, #27
 80049b8:	bf44      	itt	mi
 80049ba:	2320      	movmi	r3, #32
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c0:	0711      	lsls	r1, r2, #28
 80049c2:	bf44      	itt	mi
 80049c4:	232b      	movmi	r3, #43	; 0x2b
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d015      	beq.n	80049fe <_svfiprintf_r+0xf6>
 80049d2:	4654      	mov	r4, sl
 80049d4:	2000      	movs	r0, #0
 80049d6:	f04f 0c0a 	mov.w	ip, #10
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	4621      	mov	r1, r4
 80049de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e2:	3b30      	subs	r3, #48	; 0x30
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d94d      	bls.n	8004a84 <_svfiprintf_r+0x17c>
 80049e8:	b1b0      	cbz	r0, 8004a18 <_svfiprintf_r+0x110>
 80049ea:	9207      	str	r2, [sp, #28]
 80049ec:	e014      	b.n	8004a18 <_svfiprintf_r+0x110>
 80049ee:	eba0 0308 	sub.w	r3, r0, r8
 80049f2:	fa09 f303 	lsl.w	r3, r9, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	46a2      	mov	sl, r4
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	e7d2      	b.n	80049a4 <_svfiprintf_r+0x9c>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9103      	str	r1, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfbb      	ittet	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a10:	9307      	strge	r3, [sp, #28]
 8004a12:	9307      	strlt	r3, [sp, #28]
 8004a14:	bfb8      	it	lt
 8004a16:	9204      	strlt	r2, [sp, #16]
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1c:	d10c      	bne.n	8004a38 <_svfiprintf_r+0x130>
 8004a1e:	7863      	ldrb	r3, [r4, #1]
 8004a20:	2b2a      	cmp	r3, #42	; 0x2a
 8004a22:	d134      	bne.n	8004a8e <_svfiprintf_r+0x186>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	3402      	adds	r4, #2
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	9203      	str	r2, [sp, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfb8      	it	lt
 8004a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004af4 <_svfiprintf_r+0x1ec>
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4650      	mov	r0, sl
 8004a40:	7821      	ldrb	r1, [r4, #0]
 8004a42:	f000 fdad 	bl	80055a0 <memchr>
 8004a46:	b138      	cbz	r0, 8004a58 <_svfiprintf_r+0x150>
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	9b04      	ldr	r3, [sp, #16]
 8004a4c:	eba0 000a 	sub.w	r0, r0, sl
 8004a50:	4082      	lsls	r2, r0
 8004a52:	4313      	orrs	r3, r2
 8004a54:	3401      	adds	r4, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5c:	2206      	movs	r2, #6
 8004a5e:	4826      	ldr	r0, [pc, #152]	; (8004af8 <_svfiprintf_r+0x1f0>)
 8004a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a64:	f000 fd9c 	bl	80055a0 <memchr>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d038      	beq.n	8004ade <_svfiprintf_r+0x1d6>
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004a6e:	bb1b      	cbnz	r3, 8004ab8 <_svfiprintf_r+0x1b0>
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	3307      	adds	r3, #7
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	3308      	adds	r3, #8
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7e:	4433      	add	r3, r6
 8004a80:	9309      	str	r3, [sp, #36]	; 0x24
 8004a82:	e768      	b.n	8004956 <_svfiprintf_r+0x4e>
 8004a84:	460c      	mov	r4, r1
 8004a86:	2001      	movs	r0, #1
 8004a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8c:	e7a6      	b.n	80049dc <_svfiprintf_r+0xd4>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f04f 0c0a 	mov.w	ip, #10
 8004a94:	4619      	mov	r1, r3
 8004a96:	3401      	adds	r4, #1
 8004a98:	9305      	str	r3, [sp, #20]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa0:	3a30      	subs	r2, #48	; 0x30
 8004aa2:	2a09      	cmp	r2, #9
 8004aa4:	d903      	bls.n	8004aae <_svfiprintf_r+0x1a6>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c6      	beq.n	8004a38 <_svfiprintf_r+0x130>
 8004aaa:	9105      	str	r1, [sp, #20]
 8004aac:	e7c4      	b.n	8004a38 <_svfiprintf_r+0x130>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab6:	e7f0      	b.n	8004a9a <_svfiprintf_r+0x192>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	462a      	mov	r2, r5
 8004abe:	4638      	mov	r0, r7
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	1c42      	adds	r2, r0, #1
 8004aca:	4606      	mov	r6, r0
 8004acc:	d1d6      	bne.n	8004a7c <_svfiprintf_r+0x174>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	065b      	lsls	r3, r3, #25
 8004ad2:	f53f af2d 	bmi.w	8004930 <_svfiprintf_r+0x28>
 8004ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad8:	b01d      	add	sp, #116	; 0x74
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	ab03      	add	r3, sp, #12
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	f000 fa4f 	bl	8004f8c <_printf_i>
 8004aee:	e7eb      	b.n	8004ac8 <_svfiprintf_r+0x1c0>
 8004af0:	080058bc 	.word	0x080058bc
 8004af4:	080058c2 	.word	0x080058c2
 8004af8:	080058c6 	.word	0x080058c6
 8004afc:	00000000 	.word	0x00000000
 8004b00:	08004855 	.word	0x08004855

08004b04 <_sungetc_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	1c4b      	adds	r3, r1, #1
 8004b08:	4614      	mov	r4, r2
 8004b0a:	d103      	bne.n	8004b14 <_sungetc_r+0x10>
 8004b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b10:	4628      	mov	r0, r5
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	8993      	ldrh	r3, [r2, #12]
 8004b16:	b2cd      	uxtb	r5, r1
 8004b18:	f023 0320 	bic.w	r3, r3, #32
 8004b1c:	8193      	strh	r3, [r2, #12]
 8004b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b20:	6852      	ldr	r2, [r2, #4]
 8004b22:	b18b      	cbz	r3, 8004b48 <_sungetc_r+0x44>
 8004b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b26:	4293      	cmp	r3, r2
 8004b28:	dd08      	ble.n	8004b3c <_sungetc_r+0x38>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	6022      	str	r2, [r4, #0]
 8004b30:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	3301      	adds	r3, #1
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	e7e9      	b.n	8004b10 <_sungetc_r+0xc>
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	f000 fccc 	bl	80054da <__submore>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0f1      	beq.n	8004b2a <_sungetc_r+0x26>
 8004b46:	e7e1      	b.n	8004b0c <_sungetc_r+0x8>
 8004b48:	6921      	ldr	r1, [r4, #16]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	b151      	cbz	r1, 8004b64 <_sungetc_r+0x60>
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	d208      	bcs.n	8004b64 <_sungetc_r+0x60>
 8004b52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004b56:	42a9      	cmp	r1, r5
 8004b58:	d104      	bne.n	8004b64 <_sungetc_r+0x60>
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	6062      	str	r2, [r4, #4]
 8004b62:	e7d5      	b.n	8004b10 <_sungetc_r+0xc>
 8004b64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8004b6e:	2303      	movs	r3, #3
 8004b70:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b72:	4623      	mov	r3, r4
 8004b74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7dc      	b.n	8004b38 <_sungetc_r+0x34>

08004b7e <__ssrefill_r>:
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	460c      	mov	r4, r1
 8004b82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004b84:	b169      	cbz	r1, 8004ba2 <__ssrefill_r+0x24>
 8004b86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	d001      	beq.n	8004b92 <__ssrefill_r+0x14>
 8004b8e:	f7ff fd6d 	bl	800466c <_free_r>
 8004b92:	2000      	movs	r0, #0
 8004b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b96:	6360      	str	r0, [r4, #52]	; 0x34
 8004b98:	6063      	str	r3, [r4, #4]
 8004b9a:	b113      	cbz	r3, 8004ba2 <__ssrefill_r+0x24>
 8004b9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	e7f3      	b.n	8004ba0 <__ssrefill_r+0x22>

08004bb8 <__ssvfiscanf_r>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004bc6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004bca:	49a6      	ldr	r1, [pc, #664]	; (8004e64 <__ssvfiscanf_r+0x2ac>)
 8004bcc:	f10d 0804 	add.w	r8, sp, #4
 8004bd0:	91a0      	str	r1, [sp, #640]	; 0x280
 8004bd2:	49a5      	ldr	r1, [pc, #660]	; (8004e68 <__ssvfiscanf_r+0x2b0>)
 8004bd4:	4fa5      	ldr	r7, [pc, #660]	; (8004e6c <__ssvfiscanf_r+0x2b4>)
 8004bd6:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004e70 <__ssvfiscanf_r+0x2b8>
 8004bda:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004bde:	91a1      	str	r1, [sp, #644]	; 0x284
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	7813      	ldrb	r3, [r2, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 815a 	beq.w	8004e9e <__ssvfiscanf_r+0x2e6>
 8004bea:	5cf9      	ldrb	r1, [r7, r3]
 8004bec:	1c55      	adds	r5, r2, #1
 8004bee:	f011 0108 	ands.w	r1, r1, #8
 8004bf2:	d019      	beq.n	8004c28 <__ssvfiscanf_r+0x70>
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dd0f      	ble.n	8004c1a <__ssvfiscanf_r+0x62>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	781a      	ldrb	r2, [r3, #0]
 8004bfe:	5cba      	ldrb	r2, [r7, r2]
 8004c00:	0712      	lsls	r2, r2, #28
 8004c02:	d401      	bmi.n	8004c08 <__ssvfiscanf_r+0x50>
 8004c04:	462a      	mov	r2, r5
 8004c06:	e7ec      	b.n	8004be2 <__ssvfiscanf_r+0x2a>
 8004c08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	3201      	adds	r2, #1
 8004c0e:	9245      	str	r2, [sp, #276]	; 0x114
 8004c10:	6862      	ldr	r2, [r4, #4]
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	3a01      	subs	r2, #1
 8004c16:	6062      	str	r2, [r4, #4]
 8004c18:	e7ec      	b.n	8004bf4 <__ssvfiscanf_r+0x3c>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c20:	4798      	blx	r3
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d0e9      	beq.n	8004bfa <__ssvfiscanf_r+0x42>
 8004c26:	e7ed      	b.n	8004c04 <__ssvfiscanf_r+0x4c>
 8004c28:	2b25      	cmp	r3, #37	; 0x25
 8004c2a:	d012      	beq.n	8004c52 <__ssvfiscanf_r+0x9a>
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f340 8092 	ble.w	8004d5a <__ssvfiscanf_r+0x1a2>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	7813      	ldrb	r3, [r2, #0]
 8004c3a:	4553      	cmp	r3, sl
 8004c3c:	f040 812f 	bne.w	8004e9e <__ssvfiscanf_r+0x2e6>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	3201      	adds	r2, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	9345      	str	r3, [sp, #276]	; 0x114
 8004c50:	e7d8      	b.n	8004c04 <__ssvfiscanf_r+0x4c>
 8004c52:	9141      	str	r1, [sp, #260]	; 0x104
 8004c54:	9143      	str	r1, [sp, #268]	; 0x10c
 8004c56:	7853      	ldrb	r3, [r2, #1]
 8004c58:	2b2a      	cmp	r3, #42	; 0x2a
 8004c5a:	bf04      	itt	eq
 8004c5c:	2310      	moveq	r3, #16
 8004c5e:	1c95      	addeq	r5, r2, #2
 8004c60:	f04f 020a 	mov.w	r2, #10
 8004c64:	bf08      	it	eq
 8004c66:	9341      	streq	r3, [sp, #260]	; 0x104
 8004c68:	46aa      	mov	sl, r5
 8004c6a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004c6e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	d91c      	bls.n	8004cb0 <__ssvfiscanf_r+0xf8>
 8004c76:	2203      	movs	r2, #3
 8004c78:	487d      	ldr	r0, [pc, #500]	; (8004e70 <__ssvfiscanf_r+0x2b8>)
 8004c7a:	f000 fc91 	bl	80055a0 <memchr>
 8004c7e:	b138      	cbz	r0, 8004c90 <__ssvfiscanf_r+0xd8>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4655      	mov	r5, sl
 8004c84:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c86:	eba0 0009 	sub.w	r0, r0, r9
 8004c8a:	4083      	lsls	r3, r0
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	9341      	str	r3, [sp, #260]	; 0x104
 8004c90:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c94:	2b78      	cmp	r3, #120	; 0x78
 8004c96:	d806      	bhi.n	8004ca6 <__ssvfiscanf_r+0xee>
 8004c98:	2b57      	cmp	r3, #87	; 0x57
 8004c9a:	d810      	bhi.n	8004cbe <__ssvfiscanf_r+0x106>
 8004c9c:	2b25      	cmp	r3, #37	; 0x25
 8004c9e:	d0c5      	beq.n	8004c2c <__ssvfiscanf_r+0x74>
 8004ca0:	d856      	bhi.n	8004d50 <__ssvfiscanf_r+0x198>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d064      	beq.n	8004d70 <__ssvfiscanf_r+0x1b8>
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	9347      	str	r3, [sp, #284]	; 0x11c
 8004caa:	230a      	movs	r3, #10
 8004cac:	9342      	str	r3, [sp, #264]	; 0x108
 8004cae:	e075      	b.n	8004d9c <__ssvfiscanf_r+0x1e4>
 8004cb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004cb2:	4655      	mov	r5, sl
 8004cb4:	fb02 1103 	mla	r1, r2, r3, r1
 8004cb8:	3930      	subs	r1, #48	; 0x30
 8004cba:	9143      	str	r1, [sp, #268]	; 0x10c
 8004cbc:	e7d4      	b.n	8004c68 <__ssvfiscanf_r+0xb0>
 8004cbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004cc2:	2a20      	cmp	r2, #32
 8004cc4:	d8ef      	bhi.n	8004ca6 <__ssvfiscanf_r+0xee>
 8004cc6:	a101      	add	r1, pc, #4	; (adr r1, 8004ccc <__ssvfiscanf_r+0x114>)
 8004cc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ccc:	08004d7f 	.word	0x08004d7f
 8004cd0:	08004ca7 	.word	0x08004ca7
 8004cd4:	08004ca7 	.word	0x08004ca7
 8004cd8:	08004ddd 	.word	0x08004ddd
 8004cdc:	08004ca7 	.word	0x08004ca7
 8004ce0:	08004ca7 	.word	0x08004ca7
 8004ce4:	08004ca7 	.word	0x08004ca7
 8004ce8:	08004ca7 	.word	0x08004ca7
 8004cec:	08004ca7 	.word	0x08004ca7
 8004cf0:	08004ca7 	.word	0x08004ca7
 8004cf4:	08004ca7 	.word	0x08004ca7
 8004cf8:	08004df3 	.word	0x08004df3
 8004cfc:	08004dd9 	.word	0x08004dd9
 8004d00:	08004d57 	.word	0x08004d57
 8004d04:	08004d57 	.word	0x08004d57
 8004d08:	08004d57 	.word	0x08004d57
 8004d0c:	08004ca7 	.word	0x08004ca7
 8004d10:	08004d95 	.word	0x08004d95
 8004d14:	08004ca7 	.word	0x08004ca7
 8004d18:	08004ca7 	.word	0x08004ca7
 8004d1c:	08004ca7 	.word	0x08004ca7
 8004d20:	08004ca7 	.word	0x08004ca7
 8004d24:	08004e03 	.word	0x08004e03
 8004d28:	08004dd1 	.word	0x08004dd1
 8004d2c:	08004d77 	.word	0x08004d77
 8004d30:	08004ca7 	.word	0x08004ca7
 8004d34:	08004ca7 	.word	0x08004ca7
 8004d38:	08004dff 	.word	0x08004dff
 8004d3c:	08004ca7 	.word	0x08004ca7
 8004d40:	08004dd9 	.word	0x08004dd9
 8004d44:	08004ca7 	.word	0x08004ca7
 8004d48:	08004ca7 	.word	0x08004ca7
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	3b45      	subs	r3, #69	; 0x45
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d8a7      	bhi.n	8004ca6 <__ssvfiscanf_r+0xee>
 8004d56:	2305      	movs	r3, #5
 8004d58:	e01f      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004d60:	4798      	blx	r3
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f43f af67 	beq.w	8004c36 <__ssvfiscanf_r+0x7e>
 8004d68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f040 808d 	bne.w	8004e8a <__ssvfiscanf_r+0x2d2>
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	e08f      	b.n	8004e96 <__ssvfiscanf_r+0x2de>
 8004d76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d78:	f042 0220 	orr.w	r2, r2, #32
 8004d7c:	9241      	str	r2, [sp, #260]	; 0x104
 8004d7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	9241      	str	r2, [sp, #260]	; 0x104
 8004d86:	2210      	movs	r2, #16
 8004d88:	2b6f      	cmp	r3, #111	; 0x6f
 8004d8a:	bf34      	ite	cc
 8004d8c:	2303      	movcc	r3, #3
 8004d8e:	2304      	movcs	r3, #4
 8004d90:	9242      	str	r2, [sp, #264]	; 0x108
 8004d92:	e002      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004d94:	2300      	movs	r3, #0
 8004d96:	9342      	str	r3, [sp, #264]	; 0x108
 8004d98:	2303      	movs	r3, #3
 8004d9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	dd3d      	ble.n	8004e1e <__ssvfiscanf_r+0x266>
 8004da2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004da4:	0659      	lsls	r1, r3, #25
 8004da6:	d404      	bmi.n	8004db2 <__ssvfiscanf_r+0x1fa>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	5cba      	ldrb	r2, [r7, r2]
 8004dae:	0712      	lsls	r2, r2, #28
 8004db0:	d43c      	bmi.n	8004e2c <__ssvfiscanf_r+0x274>
 8004db2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	dc4b      	bgt.n	8004e50 <__ssvfiscanf_r+0x298>
 8004db8:	466b      	mov	r3, sp
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	a941      	add	r1, sp, #260	; 0x104
 8004dc0:	f000 fa06 	bl	80051d0 <_scanf_chars>
 8004dc4:	2801      	cmp	r0, #1
 8004dc6:	d06a      	beq.n	8004e9e <__ssvfiscanf_r+0x2e6>
 8004dc8:	2802      	cmp	r0, #2
 8004dca:	f47f af1b 	bne.w	8004c04 <__ssvfiscanf_r+0x4c>
 8004dce:	e7cb      	b.n	8004d68 <__ssvfiscanf_r+0x1b0>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	9342      	str	r3, [sp, #264]	; 0x108
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	e7e0      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004dd8:	220a      	movs	r2, #10
 8004dda:	e7d5      	b.n	8004d88 <__ssvfiscanf_r+0x1d0>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4640      	mov	r0, r8
 8004de0:	f000 fb42 	bl	8005468 <__sccl>
 8004de4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004de6:	4605      	mov	r5, r0
 8004de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dec:	9341      	str	r3, [sp, #260]	; 0x104
 8004dee:	2301      	movs	r3, #1
 8004df0:	e7d3      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004df2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df8:	9341      	str	r3, [sp, #260]	; 0x104
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e7cd      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e7cb      	b.n	8004d9a <__ssvfiscanf_r+0x1e2>
 8004e02:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e04:	06c3      	lsls	r3, r0, #27
 8004e06:	f53f aefd 	bmi.w	8004c04 <__ssvfiscanf_r+0x4c>
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e0e:	1d19      	adds	r1, r3, #4
 8004e10:	9100      	str	r1, [sp, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	07c0      	lsls	r0, r0, #31
 8004e16:	bf4c      	ite	mi
 8004e18:	801a      	strhmi	r2, [r3, #0]
 8004e1a:	601a      	strpl	r2, [r3, #0]
 8004e1c:	e6f2      	b.n	8004c04 <__ssvfiscanf_r+0x4c>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4630      	mov	r0, r6
 8004e22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e24:	4798      	blx	r3
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0bb      	beq.n	8004da2 <__ssvfiscanf_r+0x1ea>
 8004e2a:	e79d      	b.n	8004d68 <__ssvfiscanf_r+0x1b0>
 8004e2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e2e:	3201      	adds	r2, #1
 8004e30:	9245      	str	r2, [sp, #276]	; 0x114
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	3a01      	subs	r2, #1
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	6062      	str	r2, [r4, #4]
 8004e3a:	dd02      	ble.n	8004e42 <__ssvfiscanf_r+0x28a>
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	e7b2      	b.n	8004da8 <__ssvfiscanf_r+0x1f0>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4630      	mov	r0, r6
 8004e46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e48:	4798      	blx	r3
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ac      	beq.n	8004da8 <__ssvfiscanf_r+0x1f0>
 8004e4e:	e78b      	b.n	8004d68 <__ssvfiscanf_r+0x1b0>
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	dc0f      	bgt.n	8004e74 <__ssvfiscanf_r+0x2bc>
 8004e54:	466b      	mov	r3, sp
 8004e56:	4622      	mov	r2, r4
 8004e58:	4630      	mov	r0, r6
 8004e5a:	a941      	add	r1, sp, #260	; 0x104
 8004e5c:	f000 fa12 	bl	8005284 <_scanf_i>
 8004e60:	e7b0      	b.n	8004dc4 <__ssvfiscanf_r+0x20c>
 8004e62:	bf00      	nop
 8004e64:	08004b05 	.word	0x08004b05
 8004e68:	08004b7f 	.word	0x08004b7f
 8004e6c:	0800590b 	.word	0x0800590b
 8004e70:	080058c2 	.word	0x080058c2
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <__ssvfiscanf_r+0x2ec>)
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f43f aec4 	beq.w	8004c04 <__ssvfiscanf_r+0x4c>
 8004e7c:	466b      	mov	r3, sp
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4630      	mov	r0, r6
 8004e82:	a941      	add	r1, sp, #260	; 0x104
 8004e84:	f3af 8000 	nop.w
 8004e88:	e79c      	b.n	8004dc4 <__ssvfiscanf_r+0x20c>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e90:	bf18      	it	ne
 8004e92:	f04f 30ff 	movne.w	r0, #4294967295
 8004e96:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004ea0:	e7f9      	b.n	8004e96 <__ssvfiscanf_r+0x2de>
 8004ea2:	bf00      	nop
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <_printf_common>:
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eac:	4616      	mov	r6, r2
 8004eae:	4699      	mov	r9, r3
 8004eb0:	688a      	ldr	r2, [r1, #8]
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	bfb8      	it	lt
 8004eba:	4613      	movlt	r3, r2
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec8:	b10a      	cbz	r2, 8004ece <_printf_common+0x26>
 8004eca:	3301      	adds	r3, #1
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	0699      	lsls	r1, r3, #26
 8004ed2:	bf42      	ittt	mi
 8004ed4:	6833      	ldrmi	r3, [r6, #0]
 8004ed6:	3302      	addmi	r3, #2
 8004ed8:	6033      	strmi	r3, [r6, #0]
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	f015 0506 	ands.w	r5, r5, #6
 8004ee0:	d106      	bne.n	8004ef0 <_printf_common+0x48>
 8004ee2:	f104 0a19 	add.w	sl, r4, #25
 8004ee6:	68e3      	ldr	r3, [r4, #12]
 8004ee8:	6832      	ldr	r2, [r6, #0]
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	42ab      	cmp	r3, r5
 8004eee:	dc2b      	bgt.n	8004f48 <_printf_common+0xa0>
 8004ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ef4:	1e13      	subs	r3, r2, #0
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	bf18      	it	ne
 8004efa:	2301      	movne	r3, #1
 8004efc:	0692      	lsls	r2, r2, #26
 8004efe:	d430      	bmi.n	8004f62 <_printf_common+0xba>
 8004f00:	4649      	mov	r1, r9
 8004f02:	4638      	mov	r0, r7
 8004f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f08:	47c0      	blx	r8
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d023      	beq.n	8004f56 <_printf_common+0xae>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6922      	ldr	r2, [r4, #16]
 8004f12:	f003 0306 	and.w	r3, r3, #6
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	bf14      	ite	ne
 8004f1a:	2500      	movne	r5, #0
 8004f1c:	6833      	ldreq	r3, [r6, #0]
 8004f1e:	f04f 0600 	mov.w	r6, #0
 8004f22:	bf08      	it	eq
 8004f24:	68e5      	ldreq	r5, [r4, #12]
 8004f26:	f104 041a 	add.w	r4, r4, #26
 8004f2a:	bf08      	it	eq
 8004f2c:	1aed      	subeq	r5, r5, r3
 8004f2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f32:	bf08      	it	eq
 8004f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bfc4      	itt	gt
 8004f3c:	1a9b      	subgt	r3, r3, r2
 8004f3e:	18ed      	addgt	r5, r5, r3
 8004f40:	42b5      	cmp	r5, r6
 8004f42:	d11a      	bne.n	8004f7a <_printf_common+0xd2>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e008      	b.n	8004f5a <_printf_common+0xb2>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4638      	mov	r0, r7
 8004f50:	47c0      	blx	r8
 8004f52:	3001      	adds	r0, #1
 8004f54:	d103      	bne.n	8004f5e <_printf_common+0xb6>
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	3501      	adds	r5, #1
 8004f60:	e7c1      	b.n	8004ee6 <_printf_common+0x3e>
 8004f62:	2030      	movs	r0, #48	; 0x30
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f70:	4422      	add	r2, r4
 8004f72:	3302      	adds	r3, #2
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f78:	e7c2      	b.n	8004f00 <_printf_common+0x58>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c0      	blx	r8
 8004f84:	3001      	adds	r0, #1
 8004f86:	d0e6      	beq.n	8004f56 <_printf_common+0xae>
 8004f88:	3601      	adds	r6, #1
 8004f8a:	e7d9      	b.n	8004f40 <_printf_common+0x98>

08004f8c <_printf_i>:
 8004f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	7e0f      	ldrb	r7, [r1, #24]
 8004f92:	4691      	mov	r9, r2
 8004f94:	2f78      	cmp	r7, #120	; 0x78
 8004f96:	4680      	mov	r8, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa2:	d807      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fa4:	2f62      	cmp	r7, #98	; 0x62
 8004fa6:	d80a      	bhi.n	8004fbe <_printf_i+0x32>
 8004fa8:	2f00      	cmp	r7, #0
 8004faa:	f000 80d5 	beq.w	8005158 <_printf_i+0x1cc>
 8004fae:	2f58      	cmp	r7, #88	; 0x58
 8004fb0:	f000 80c1 	beq.w	8005136 <_printf_i+0x1aa>
 8004fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fbc:	e03a      	b.n	8005034 <_printf_i+0xa8>
 8004fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc2:	2b15      	cmp	r3, #21
 8004fc4:	d8f6      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fc6:	a101      	add	r1, pc, #4	; (adr r1, 8004fcc <_printf_i+0x40>)
 8004fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fcc:	08005025 	.word	0x08005025
 8004fd0:	08005039 	.word	0x08005039
 8004fd4:	08004fb5 	.word	0x08004fb5
 8004fd8:	08004fb5 	.word	0x08004fb5
 8004fdc:	08004fb5 	.word	0x08004fb5
 8004fe0:	08004fb5 	.word	0x08004fb5
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	08004fb5 	.word	0x08004fb5
 8004fec:	08004fb5 	.word	0x08004fb5
 8004ff0:	08004fb5 	.word	0x08004fb5
 8004ff4:	08004fb5 	.word	0x08004fb5
 8004ff8:	0800513f 	.word	0x0800513f
 8004ffc:	08005065 	.word	0x08005065
 8005000:	080050f9 	.word	0x080050f9
 8005004:	08004fb5 	.word	0x08004fb5
 8005008:	08004fb5 	.word	0x08004fb5
 800500c:	08005161 	.word	0x08005161
 8005010:	08004fb5 	.word	0x08004fb5
 8005014:	08005065 	.word	0x08005065
 8005018:	08004fb5 	.word	0x08004fb5
 800501c:	08004fb5 	.word	0x08004fb5
 8005020:	08005101 	.word	0x08005101
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	602a      	str	r2, [r5, #0]
 800502c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005034:	2301      	movs	r3, #1
 8005036:	e0a0      	b.n	800517a <_printf_i+0x1ee>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	682b      	ldr	r3, [r5, #0]
 800503c:	0607      	lsls	r7, r0, #24
 800503e:	f103 0104 	add.w	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	d501      	bpl.n	800504a <_printf_i+0xbe>
 8005046:	681e      	ldr	r6, [r3, #0]
 8005048:	e003      	b.n	8005052 <_printf_i+0xc6>
 800504a:	0646      	lsls	r6, r0, #25
 800504c:	d5fb      	bpl.n	8005046 <_printf_i+0xba>
 800504e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005052:	2e00      	cmp	r6, #0
 8005054:	da03      	bge.n	800505e <_printf_i+0xd2>
 8005056:	232d      	movs	r3, #45	; 0x2d
 8005058:	4276      	negs	r6, r6
 800505a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505e:	230a      	movs	r3, #10
 8005060:	4859      	ldr	r0, [pc, #356]	; (80051c8 <_printf_i+0x23c>)
 8005062:	e012      	b.n	800508a <_printf_i+0xfe>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	0605      	lsls	r5, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xe8>
 8005070:	681e      	ldr	r6, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0xee>
 8005074:	0641      	lsls	r1, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xe4>
 8005078:	881e      	ldrh	r6, [r3, #0]
 800507a:	2f6f      	cmp	r7, #111	; 0x6f
 800507c:	bf0c      	ite	eq
 800507e:	2308      	moveq	r3, #8
 8005080:	230a      	movne	r3, #10
 8005082:	4851      	ldr	r0, [pc, #324]	; (80051c8 <_printf_i+0x23c>)
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508a:	6865      	ldr	r5, [r4, #4]
 800508c:	2d00      	cmp	r5, #0
 800508e:	bfa8      	it	ge
 8005090:	6821      	ldrge	r1, [r4, #0]
 8005092:	60a5      	str	r5, [r4, #8]
 8005094:	bfa4      	itt	ge
 8005096:	f021 0104 	bicge.w	r1, r1, #4
 800509a:	6021      	strge	r1, [r4, #0]
 800509c:	b90e      	cbnz	r6, 80050a2 <_printf_i+0x116>
 800509e:	2d00      	cmp	r5, #0
 80050a0:	d04b      	beq.n	800513a <_printf_i+0x1ae>
 80050a2:	4615      	mov	r5, r2
 80050a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80050a8:	fb03 6711 	mls	r7, r3, r1, r6
 80050ac:	5dc7      	ldrb	r7, [r0, r7]
 80050ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b2:	4637      	mov	r7, r6
 80050b4:	42bb      	cmp	r3, r7
 80050b6:	460e      	mov	r6, r1
 80050b8:	d9f4      	bls.n	80050a4 <_printf_i+0x118>
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d10b      	bne.n	80050d6 <_printf_i+0x14a>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	07de      	lsls	r6, r3, #31
 80050c2:	d508      	bpl.n	80050d6 <_printf_i+0x14a>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	6861      	ldr	r1, [r4, #4]
 80050c8:	4299      	cmp	r1, r3
 80050ca:	bfde      	ittt	le
 80050cc:	2330      	movle	r3, #48	; 0x30
 80050ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050d6:	1b52      	subs	r2, r2, r5
 80050d8:	6122      	str	r2, [r4, #16]
 80050da:	464b      	mov	r3, r9
 80050dc:	4621      	mov	r1, r4
 80050de:	4640      	mov	r0, r8
 80050e0:	f8cd a000 	str.w	sl, [sp]
 80050e4:	aa03      	add	r2, sp, #12
 80050e6:	f7ff fedf 	bl	8004ea8 <_printf_common>
 80050ea:	3001      	adds	r0, #1
 80050ec:	d14a      	bne.n	8005184 <_printf_i+0x1f8>
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	b004      	add	sp, #16
 80050f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f043 0320 	orr.w	r3, r3, #32
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	2778      	movs	r7, #120	; 0x78
 8005102:	4832      	ldr	r0, [pc, #200]	; (80051cc <_printf_i+0x240>)
 8005104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	6829      	ldr	r1, [r5, #0]
 800510c:	061f      	lsls	r7, r3, #24
 800510e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005112:	d402      	bmi.n	800511a <_printf_i+0x18e>
 8005114:	065f      	lsls	r7, r3, #25
 8005116:	bf48      	it	mi
 8005118:	b2b6      	uxthmi	r6, r6
 800511a:	07df      	lsls	r7, r3, #31
 800511c:	bf48      	it	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6029      	str	r1, [r5, #0]
 8005124:	bf48      	it	mi
 8005126:	6023      	strmi	r3, [r4, #0]
 8005128:	b91e      	cbnz	r6, 8005132 <_printf_i+0x1a6>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f023 0320 	bic.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2310      	movs	r3, #16
 8005134:	e7a6      	b.n	8005084 <_printf_i+0xf8>
 8005136:	4824      	ldr	r0, [pc, #144]	; (80051c8 <_printf_i+0x23c>)
 8005138:	e7e4      	b.n	8005104 <_printf_i+0x178>
 800513a:	4615      	mov	r5, r2
 800513c:	e7bd      	b.n	80050ba <_printf_i+0x12e>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	6826      	ldr	r6, [r4, #0]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6961      	ldr	r1, [r4, #20]
 8005146:	6028      	str	r0, [r5, #0]
 8005148:	0635      	lsls	r5, r6, #24
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	d501      	bpl.n	8005152 <_printf_i+0x1c6>
 800514e:	6019      	str	r1, [r3, #0]
 8005150:	e002      	b.n	8005158 <_printf_i+0x1cc>
 8005152:	0670      	lsls	r0, r6, #25
 8005154:	d5fb      	bpl.n	800514e <_printf_i+0x1c2>
 8005156:	8019      	strh	r1, [r3, #0]
 8005158:	2300      	movs	r3, #0
 800515a:	4615      	mov	r5, r2
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	e7bc      	b.n	80050da <_printf_i+0x14e>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	2100      	movs	r1, #0
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	6862      	ldr	r2, [r4, #4]
 800516c:	4628      	mov	r0, r5
 800516e:	f000 fa17 	bl	80055a0 <memchr>
 8005172:	b108      	cbz	r0, 8005178 <_printf_i+0x1ec>
 8005174:	1b40      	subs	r0, r0, r5
 8005176:	6060      	str	r0, [r4, #4]
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	2300      	movs	r3, #0
 800517e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005182:	e7aa      	b.n	80050da <_printf_i+0x14e>
 8005184:	462a      	mov	r2, r5
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	47d0      	blx	sl
 800518e:	3001      	adds	r0, #1
 8005190:	d0ad      	beq.n	80050ee <_printf_i+0x162>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	079b      	lsls	r3, r3, #30
 8005196:	d413      	bmi.n	80051c0 <_printf_i+0x234>
 8005198:	68e0      	ldr	r0, [r4, #12]
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	4298      	cmp	r0, r3
 800519e:	bfb8      	it	lt
 80051a0:	4618      	movlt	r0, r3
 80051a2:	e7a6      	b.n	80050f2 <_printf_i+0x166>
 80051a4:	2301      	movs	r3, #1
 80051a6:	4632      	mov	r2, r6
 80051a8:	4649      	mov	r1, r9
 80051aa:	4640      	mov	r0, r8
 80051ac:	47d0      	blx	sl
 80051ae:	3001      	adds	r0, #1
 80051b0:	d09d      	beq.n	80050ee <_printf_i+0x162>
 80051b2:	3501      	adds	r5, #1
 80051b4:	68e3      	ldr	r3, [r4, #12]
 80051b6:	9903      	ldr	r1, [sp, #12]
 80051b8:	1a5b      	subs	r3, r3, r1
 80051ba:	42ab      	cmp	r3, r5
 80051bc:	dcf2      	bgt.n	80051a4 <_printf_i+0x218>
 80051be:	e7eb      	b.n	8005198 <_printf_i+0x20c>
 80051c0:	2500      	movs	r5, #0
 80051c2:	f104 0619 	add.w	r6, r4, #25
 80051c6:	e7f5      	b.n	80051b4 <_printf_i+0x228>
 80051c8:	080058cd 	.word	0x080058cd
 80051cc:	080058de 	.word	0x080058de

080051d0 <_scanf_chars>:
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	4615      	mov	r5, r2
 80051d6:	688a      	ldr	r2, [r1, #8]
 80051d8:	4680      	mov	r8, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b932      	cbnz	r2, 80051ec <_scanf_chars+0x1c>
 80051de:	698a      	ldr	r2, [r1, #24]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2201      	moveq	r2, #1
 80051e6:	f04f 32ff 	movne.w	r2, #4294967295
 80051ea:	608a      	str	r2, [r1, #8]
 80051ec:	2700      	movs	r7, #0
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005280 <_scanf_chars+0xb0>
 80051f4:	06d1      	lsls	r1, r2, #27
 80051f6:	bf5f      	itttt	pl
 80051f8:	681a      	ldrpl	r2, [r3, #0]
 80051fa:	1d11      	addpl	r1, r2, #4
 80051fc:	6019      	strpl	r1, [r3, #0]
 80051fe:	6816      	ldrpl	r6, [r2, #0]
 8005200:	69a0      	ldr	r0, [r4, #24]
 8005202:	b188      	cbz	r0, 8005228 <_scanf_chars+0x58>
 8005204:	2801      	cmp	r0, #1
 8005206:	d107      	bne.n	8005218 <_scanf_chars+0x48>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	6963      	ldr	r3, [r4, #20]
 800520e:	5c9b      	ldrb	r3, [r3, r2]
 8005210:	b953      	cbnz	r3, 8005228 <_scanf_chars+0x58>
 8005212:	2f00      	cmp	r7, #0
 8005214:	d031      	beq.n	800527a <_scanf_chars+0xaa>
 8005216:	e022      	b.n	800525e <_scanf_chars+0x8e>
 8005218:	2802      	cmp	r0, #2
 800521a:	d120      	bne.n	800525e <_scanf_chars+0x8e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	d41a      	bmi.n	800525e <_scanf_chars+0x8e>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	3701      	adds	r7, #1
 800522c:	06da      	lsls	r2, r3, #27
 800522e:	bf5e      	ittt	pl
 8005230:	682b      	ldrpl	r3, [r5, #0]
 8005232:	781b      	ldrbpl	r3, [r3, #0]
 8005234:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005238:	682a      	ldr	r2, [r5, #0]
 800523a:	686b      	ldr	r3, [r5, #4]
 800523c:	3201      	adds	r2, #1
 800523e:	602a      	str	r2, [r5, #0]
 8005240:	68a2      	ldr	r2, [r4, #8]
 8005242:	3b01      	subs	r3, #1
 8005244:	3a01      	subs	r2, #1
 8005246:	606b      	str	r3, [r5, #4]
 8005248:	60a2      	str	r2, [r4, #8]
 800524a:	b142      	cbz	r2, 800525e <_scanf_chars+0x8e>
 800524c:	2b00      	cmp	r3, #0
 800524e:	dcd7      	bgt.n	8005200 <_scanf_chars+0x30>
 8005250:	4629      	mov	r1, r5
 8005252:	4640      	mov	r0, r8
 8005254:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005258:	4798      	blx	r3
 800525a:	2800      	cmp	r0, #0
 800525c:	d0d0      	beq.n	8005200 <_scanf_chars+0x30>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	f013 0310 	ands.w	r3, r3, #16
 8005264:	d105      	bne.n	8005272 <_scanf_chars+0xa2>
 8005266:	68e2      	ldr	r2, [r4, #12]
 8005268:	3201      	adds	r2, #1
 800526a:	60e2      	str	r2, [r4, #12]
 800526c:	69a2      	ldr	r2, [r4, #24]
 800526e:	b102      	cbz	r2, 8005272 <_scanf_chars+0xa2>
 8005270:	7033      	strb	r3, [r6, #0]
 8005272:	2000      	movs	r0, #0
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	443b      	add	r3, r7
 8005278:	6123      	str	r3, [r4, #16]
 800527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800527e:	bf00      	nop
 8005280:	0800590b 	.word	0x0800590b

08005284 <_scanf_i>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	460c      	mov	r4, r1
 800528a:	4698      	mov	r8, r3
 800528c:	4b72      	ldr	r3, [pc, #456]	; (8005458 <_scanf_i+0x1d4>)
 800528e:	b087      	sub	sp, #28
 8005290:	4682      	mov	sl, r0
 8005292:	4616      	mov	r6, r2
 8005294:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005298:	ab03      	add	r3, sp, #12
 800529a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800529e:	4b6f      	ldr	r3, [pc, #444]	; (800545c <_scanf_i+0x1d8>)
 80052a0:	69a1      	ldr	r1, [r4, #24]
 80052a2:	4a6f      	ldr	r2, [pc, #444]	; (8005460 <_scanf_i+0x1dc>)
 80052a4:	4627      	mov	r7, r4
 80052a6:	2903      	cmp	r1, #3
 80052a8:	bf18      	it	ne
 80052aa:	461a      	movne	r2, r3
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	1e5a      	subs	r2, r3, #1
 80052b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80052b6:	bf81      	itttt	hi
 80052b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052bc:	eb03 0905 	addhi.w	r9, r3, r5
 80052c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052c4:	60a3      	strhi	r3, [r4, #8]
 80052c6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80052ca:	bf98      	it	ls
 80052cc:	f04f 0900 	movls.w	r9, #0
 80052d0:	463d      	mov	r5, r7
 80052d2:	f04f 0b00 	mov.w	fp, #0
 80052d6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	6831      	ldr	r1, [r6, #0]
 80052de:	ab03      	add	r3, sp, #12
 80052e0:	2202      	movs	r2, #2
 80052e2:	7809      	ldrb	r1, [r1, #0]
 80052e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80052e8:	f000 f95a 	bl	80055a0 <memchr>
 80052ec:	b328      	cbz	r0, 800533a <_scanf_i+0xb6>
 80052ee:	f1bb 0f01 	cmp.w	fp, #1
 80052f2:	d159      	bne.n	80053a8 <_scanf_i+0x124>
 80052f4:	6862      	ldr	r2, [r4, #4]
 80052f6:	b92a      	cbnz	r2, 8005304 <_scanf_i+0x80>
 80052f8:	2308      	movs	r3, #8
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	68a2      	ldr	r2, [r4, #8]
 800530e:	1e51      	subs	r1, r2, #1
 8005310:	60a1      	str	r1, [r4, #8]
 8005312:	b192      	cbz	r2, 800533a <_scanf_i+0xb6>
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	1c51      	adds	r1, r2, #1
 8005318:	6031      	str	r1, [r6, #0]
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	f805 2b01 	strb.w	r2, [r5], #1
 8005320:	6872      	ldr	r2, [r6, #4]
 8005322:	3a01      	subs	r2, #1
 8005324:	2a00      	cmp	r2, #0
 8005326:	6072      	str	r2, [r6, #4]
 8005328:	dc07      	bgt.n	800533a <_scanf_i+0xb6>
 800532a:	4631      	mov	r1, r6
 800532c:	4650      	mov	r0, sl
 800532e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005332:	4790      	blx	r2
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 8085 	bne.w	8005444 <_scanf_i+0x1c0>
 800533a:	f10b 0b01 	add.w	fp, fp, #1
 800533e:	f1bb 0f03 	cmp.w	fp, #3
 8005342:	d1cb      	bne.n	80052dc <_scanf_i+0x58>
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	b90b      	cbnz	r3, 800534c <_scanf_i+0xc8>
 8005348:	230a      	movs	r3, #10
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	4945      	ldr	r1, [pc, #276]	; (8005464 <_scanf_i+0x1e0>)
 8005350:	6960      	ldr	r0, [r4, #20]
 8005352:	1ac9      	subs	r1, r1, r3
 8005354:	f000 f888 	bl	8005468 <__sccl>
 8005358:	f04f 0b00 	mov.w	fp, #0
 800535c:	68a3      	ldr	r3, [r4, #8]
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03d      	beq.n	80053e0 <_scanf_i+0x15c>
 8005364:	6831      	ldr	r1, [r6, #0]
 8005366:	6960      	ldr	r0, [r4, #20]
 8005368:	f891 c000 	ldrb.w	ip, [r1]
 800536c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005370:	2800      	cmp	r0, #0
 8005372:	d035      	beq.n	80053e0 <_scanf_i+0x15c>
 8005374:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005378:	d124      	bne.n	80053c4 <_scanf_i+0x140>
 800537a:	0510      	lsls	r0, r2, #20
 800537c:	d522      	bpl.n	80053c4 <_scanf_i+0x140>
 800537e:	f10b 0b01 	add.w	fp, fp, #1
 8005382:	f1b9 0f00 	cmp.w	r9, #0
 8005386:	d003      	beq.n	8005390 <_scanf_i+0x10c>
 8005388:	3301      	adds	r3, #1
 800538a:	f109 39ff 	add.w	r9, r9, #4294967295
 800538e:	60a3      	str	r3, [r4, #8]
 8005390:	6873      	ldr	r3, [r6, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	6073      	str	r3, [r6, #4]
 8005398:	dd1b      	ble.n	80053d2 <_scanf_i+0x14e>
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	68a3      	ldr	r3, [r4, #8]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	e7d9      	b.n	800535c <_scanf_i+0xd8>
 80053a8:	f1bb 0f02 	cmp.w	fp, #2
 80053ac:	d1ae      	bne.n	800530c <_scanf_i+0x88>
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80053b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80053b8:	d1bf      	bne.n	800533a <_scanf_i+0xb6>
 80053ba:	2310      	movs	r3, #16
 80053bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	e7a2      	b.n	800530a <_scanf_i+0x86>
 80053c4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	780b      	ldrb	r3, [r1, #0]
 80053cc:	f805 3b01 	strb.w	r3, [r5], #1
 80053d0:	e7de      	b.n	8005390 <_scanf_i+0x10c>
 80053d2:	4631      	mov	r1, r6
 80053d4:	4650      	mov	r0, sl
 80053d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053da:	4798      	blx	r3
 80053dc:	2800      	cmp	r0, #0
 80053de:	d0df      	beq.n	80053a0 <_scanf_i+0x11c>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	05d9      	lsls	r1, r3, #23
 80053e4:	d50d      	bpl.n	8005402 <_scanf_i+0x17e>
 80053e6:	42bd      	cmp	r5, r7
 80053e8:	d909      	bls.n	80053fe <_scanf_i+0x17a>
 80053ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80053ee:	4632      	mov	r2, r6
 80053f0:	4650      	mov	r0, sl
 80053f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80053fa:	4798      	blx	r3
 80053fc:	464d      	mov	r5, r9
 80053fe:	42bd      	cmp	r5, r7
 8005400:	d028      	beq.n	8005454 <_scanf_i+0x1d0>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	f012 0210 	ands.w	r2, r2, #16
 8005408:	d113      	bne.n	8005432 <_scanf_i+0x1ae>
 800540a:	702a      	strb	r2, [r5, #0]
 800540c:	4639      	mov	r1, r7
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	4650      	mov	r0, sl
 8005412:	9e01      	ldr	r6, [sp, #4]
 8005414:	47b0      	blx	r6
 8005416:	f8d8 3000 	ldr.w	r3, [r8]
 800541a:	6821      	ldr	r1, [r4, #0]
 800541c:	1d1a      	adds	r2, r3, #4
 800541e:	f8c8 2000 	str.w	r2, [r8]
 8005422:	f011 0f20 	tst.w	r1, #32
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	d00f      	beq.n	800544a <_scanf_i+0x1c6>
 800542a:	6018      	str	r0, [r3, #0]
 800542c:	68e3      	ldr	r3, [r4, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60e3      	str	r3, [r4, #12]
 8005432:	2000      	movs	r0, #0
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	1bed      	subs	r5, r5, r7
 8005438:	445d      	add	r5, fp
 800543a:	442b      	add	r3, r5
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	b007      	add	sp, #28
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	f04f 0b00 	mov.w	fp, #0
 8005448:	e7ca      	b.n	80053e0 <_scanf_i+0x15c>
 800544a:	07ca      	lsls	r2, r1, #31
 800544c:	bf4c      	ite	mi
 800544e:	8018      	strhmi	r0, [r3, #0]
 8005450:	6018      	strpl	r0, [r3, #0]
 8005452:	e7eb      	b.n	800542c <_scanf_i+0x1a8>
 8005454:	2001      	movs	r0, #1
 8005456:	e7f2      	b.n	800543e <_scanf_i+0x1ba>
 8005458:	08005898 	.word	0x08005898
 800545c:	0800581d 	.word	0x0800581d
 8005460:	08005735 	.word	0x08005735
 8005464:	080058ff 	.word	0x080058ff

08005468 <__sccl>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	780b      	ldrb	r3, [r1, #0]
 800546c:	4604      	mov	r4, r0
 800546e:	2b5e      	cmp	r3, #94	; 0x5e
 8005470:	bf0b      	itete	eq
 8005472:	784b      	ldrbeq	r3, [r1, #1]
 8005474:	1c4a      	addne	r2, r1, #1
 8005476:	1c8a      	addeq	r2, r1, #2
 8005478:	2100      	movne	r1, #0
 800547a:	bf08      	it	eq
 800547c:	2101      	moveq	r1, #1
 800547e:	3801      	subs	r0, #1
 8005480:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005484:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005488:	42a8      	cmp	r0, r5
 800548a:	d1fb      	bne.n	8005484 <__sccl+0x1c>
 800548c:	b90b      	cbnz	r3, 8005492 <__sccl+0x2a>
 800548e:	1e50      	subs	r0, r2, #1
 8005490:	bd70      	pop	{r4, r5, r6, pc}
 8005492:	f081 0101 	eor.w	r1, r1, #1
 8005496:	4610      	mov	r0, r2
 8005498:	54e1      	strb	r1, [r4, r3]
 800549a:	4602      	mov	r2, r0
 800549c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80054a0:	2d2d      	cmp	r5, #45	; 0x2d
 80054a2:	d005      	beq.n	80054b0 <__sccl+0x48>
 80054a4:	2d5d      	cmp	r5, #93	; 0x5d
 80054a6:	d016      	beq.n	80054d6 <__sccl+0x6e>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	d0f1      	beq.n	8005490 <__sccl+0x28>
 80054ac:	462b      	mov	r3, r5
 80054ae:	e7f2      	b.n	8005496 <__sccl+0x2e>
 80054b0:	7846      	ldrb	r6, [r0, #1]
 80054b2:	2e5d      	cmp	r6, #93	; 0x5d
 80054b4:	d0fa      	beq.n	80054ac <__sccl+0x44>
 80054b6:	42b3      	cmp	r3, r6
 80054b8:	dcf8      	bgt.n	80054ac <__sccl+0x44>
 80054ba:	461a      	mov	r2, r3
 80054bc:	3002      	adds	r0, #2
 80054be:	3201      	adds	r2, #1
 80054c0:	4296      	cmp	r6, r2
 80054c2:	54a1      	strb	r1, [r4, r2]
 80054c4:	dcfb      	bgt.n	80054be <__sccl+0x56>
 80054c6:	1af2      	subs	r2, r6, r3
 80054c8:	3a01      	subs	r2, #1
 80054ca:	42b3      	cmp	r3, r6
 80054cc:	bfa8      	it	ge
 80054ce:	2200      	movge	r2, #0
 80054d0:	1c5d      	adds	r5, r3, #1
 80054d2:	18ab      	adds	r3, r5, r2
 80054d4:	e7e1      	b.n	800549a <__sccl+0x32>
 80054d6:	4610      	mov	r0, r2
 80054d8:	e7da      	b.n	8005490 <__sccl+0x28>

080054da <__submore>:
 80054da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	460c      	mov	r4, r1
 80054e0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80054e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e6:	4299      	cmp	r1, r3
 80054e8:	d11b      	bne.n	8005522 <__submore+0x48>
 80054ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054ee:	f7ff f925 	bl	800473c <_malloc_r>
 80054f2:	b918      	cbnz	r0, 80054fc <__submore+0x22>
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005500:	63a3      	str	r3, [r4, #56]	; 0x38
 8005502:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005506:	6360      	str	r0, [r4, #52]	; 0x34
 8005508:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800550c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005510:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005514:	7043      	strb	r3, [r0, #1]
 8005516:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800551a:	7003      	strb	r3, [r0, #0]
 800551c:	6020      	str	r0, [r4, #0]
 800551e:	2000      	movs	r0, #0
 8005520:	e7ea      	b.n	80054f8 <__submore+0x1e>
 8005522:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005524:	0077      	lsls	r7, r6, #1
 8005526:	463a      	mov	r2, r7
 8005528:	f000 f856 	bl	80055d8 <_realloc_r>
 800552c:	4605      	mov	r5, r0
 800552e:	2800      	cmp	r0, #0
 8005530:	d0e0      	beq.n	80054f4 <__submore+0x1a>
 8005532:	eb00 0806 	add.w	r8, r0, r6
 8005536:	4601      	mov	r1, r0
 8005538:	4632      	mov	r2, r6
 800553a:	4640      	mov	r0, r8
 800553c:	f000 f83e 	bl	80055bc <memcpy>
 8005540:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005544:	f8c4 8000 	str.w	r8, [r4]
 8005548:	e7e9      	b.n	800551e <__submore+0x44>

0800554a <memmove>:
 800554a:	4288      	cmp	r0, r1
 800554c:	b510      	push	{r4, lr}
 800554e:	eb01 0402 	add.w	r4, r1, r2
 8005552:	d902      	bls.n	800555a <memmove+0x10>
 8005554:	4284      	cmp	r4, r0
 8005556:	4623      	mov	r3, r4
 8005558:	d807      	bhi.n	800556a <memmove+0x20>
 800555a:	1e43      	subs	r3, r0, #1
 800555c:	42a1      	cmp	r1, r4
 800555e:	d008      	beq.n	8005572 <memmove+0x28>
 8005560:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005564:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005568:	e7f8      	b.n	800555c <memmove+0x12>
 800556a:	4601      	mov	r1, r0
 800556c:	4402      	add	r2, r0
 800556e:	428a      	cmp	r2, r1
 8005570:	d100      	bne.n	8005574 <memmove+0x2a>
 8005572:	bd10      	pop	{r4, pc}
 8005574:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005578:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800557c:	e7f7      	b.n	800556e <memmove+0x24>
	...

08005580 <_sbrk_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	2300      	movs	r3, #0
 8005584:	4d05      	ldr	r5, [pc, #20]	; (800559c <_sbrk_r+0x1c>)
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	f7fb fe80 	bl	8001290 <_sbrk>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_sbrk_r+0x1a>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_sbrk_r+0x1a>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000668 	.word	0x20000668

080055a0 <memchr>:
 80055a0:	4603      	mov	r3, r0
 80055a2:	b510      	push	{r4, lr}
 80055a4:	b2c9      	uxtb	r1, r1
 80055a6:	4402      	add	r2, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	d101      	bne.n	80055b2 <memchr+0x12>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e003      	b.n	80055ba <memchr+0x1a>
 80055b2:	7804      	ldrb	r4, [r0, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	428c      	cmp	r4, r1
 80055b8:	d1f6      	bne.n	80055a8 <memchr+0x8>
 80055ba:	bd10      	pop	{r4, pc}

080055bc <memcpy>:
 80055bc:	440a      	add	r2, r1
 80055be:	4291      	cmp	r1, r2
 80055c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c4:	d100      	bne.n	80055c8 <memcpy+0xc>
 80055c6:	4770      	bx	lr
 80055c8:	b510      	push	{r4, lr}
 80055ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ce:	4291      	cmp	r1, r2
 80055d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d4:	d1f9      	bne.n	80055ca <memcpy+0xe>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <_realloc_r>:
 80055d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	4680      	mov	r8, r0
 80055de:	4614      	mov	r4, r2
 80055e0:	460e      	mov	r6, r1
 80055e2:	b921      	cbnz	r1, 80055ee <_realloc_r+0x16>
 80055e4:	4611      	mov	r1, r2
 80055e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ea:	f7ff b8a7 	b.w	800473c <_malloc_r>
 80055ee:	b92a      	cbnz	r2, 80055fc <_realloc_r+0x24>
 80055f0:	f7ff f83c 	bl	800466c <_free_r>
 80055f4:	4625      	mov	r5, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	f000 f910 	bl	8005820 <_malloc_usable_size_r>
 8005600:	4284      	cmp	r4, r0
 8005602:	4607      	mov	r7, r0
 8005604:	d802      	bhi.n	800560c <_realloc_r+0x34>
 8005606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800560a:	d812      	bhi.n	8005632 <_realloc_r+0x5a>
 800560c:	4621      	mov	r1, r4
 800560e:	4640      	mov	r0, r8
 8005610:	f7ff f894 	bl	800473c <_malloc_r>
 8005614:	4605      	mov	r5, r0
 8005616:	2800      	cmp	r0, #0
 8005618:	d0ed      	beq.n	80055f6 <_realloc_r+0x1e>
 800561a:	42bc      	cmp	r4, r7
 800561c:	4622      	mov	r2, r4
 800561e:	4631      	mov	r1, r6
 8005620:	bf28      	it	cs
 8005622:	463a      	movcs	r2, r7
 8005624:	f7ff ffca 	bl	80055bc <memcpy>
 8005628:	4631      	mov	r1, r6
 800562a:	4640      	mov	r0, r8
 800562c:	f7ff f81e 	bl	800466c <_free_r>
 8005630:	e7e1      	b.n	80055f6 <_realloc_r+0x1e>
 8005632:	4635      	mov	r5, r6
 8005634:	e7df      	b.n	80055f6 <_realloc_r+0x1e>
	...

08005638 <_strtol_l.constprop.0>:
 8005638:	2b01      	cmp	r3, #1
 800563a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563e:	4686      	mov	lr, r0
 8005640:	4690      	mov	r8, r2
 8005642:	d001      	beq.n	8005648 <_strtol_l.constprop.0+0x10>
 8005644:	2b24      	cmp	r3, #36	; 0x24
 8005646:	d906      	bls.n	8005656 <_strtol_l.constprop.0+0x1e>
 8005648:	f7fe ffdc 	bl	8004604 <__errno>
 800564c:	2316      	movs	r3, #22
 800564e:	6003      	str	r3, [r0, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005656:	460d      	mov	r5, r1
 8005658:	4835      	ldr	r0, [pc, #212]	; (8005730 <_strtol_l.constprop.0+0xf8>)
 800565a:	462a      	mov	r2, r5
 800565c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005660:	5d06      	ldrb	r6, [r0, r4]
 8005662:	f016 0608 	ands.w	r6, r6, #8
 8005666:	d1f8      	bne.n	800565a <_strtol_l.constprop.0+0x22>
 8005668:	2c2d      	cmp	r4, #45	; 0x2d
 800566a:	d12e      	bne.n	80056ca <_strtol_l.constprop.0+0x92>
 800566c:	2601      	movs	r6, #1
 800566e:	782c      	ldrb	r4, [r5, #0]
 8005670:	1c95      	adds	r5, r2, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d057      	beq.n	8005726 <_strtol_l.constprop.0+0xee>
 8005676:	2b10      	cmp	r3, #16
 8005678:	d109      	bne.n	800568e <_strtol_l.constprop.0+0x56>
 800567a:	2c30      	cmp	r4, #48	; 0x30
 800567c:	d107      	bne.n	800568e <_strtol_l.constprop.0+0x56>
 800567e:	782a      	ldrb	r2, [r5, #0]
 8005680:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005684:	2a58      	cmp	r2, #88	; 0x58
 8005686:	d149      	bne.n	800571c <_strtol_l.constprop.0+0xe4>
 8005688:	2310      	movs	r3, #16
 800568a:	786c      	ldrb	r4, [r5, #1]
 800568c:	3502      	adds	r5, #2
 800568e:	2200      	movs	r2, #0
 8005690:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005694:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005698:	fbbc f9f3 	udiv	r9, ip, r3
 800569c:	4610      	mov	r0, r2
 800569e:	fb03 ca19 	mls	sl, r3, r9, ip
 80056a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80056a6:	2f09      	cmp	r7, #9
 80056a8:	d814      	bhi.n	80056d4 <_strtol_l.constprop.0+0x9c>
 80056aa:	463c      	mov	r4, r7
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	dd20      	ble.n	80056f2 <_strtol_l.constprop.0+0xba>
 80056b0:	1c57      	adds	r7, r2, #1
 80056b2:	d007      	beq.n	80056c4 <_strtol_l.constprop.0+0x8c>
 80056b4:	4581      	cmp	r9, r0
 80056b6:	d319      	bcc.n	80056ec <_strtol_l.constprop.0+0xb4>
 80056b8:	d101      	bne.n	80056be <_strtol_l.constprop.0+0x86>
 80056ba:	45a2      	cmp	sl, r4
 80056bc:	db16      	blt.n	80056ec <_strtol_l.constprop.0+0xb4>
 80056be:	2201      	movs	r2, #1
 80056c0:	fb00 4003 	mla	r0, r0, r3, r4
 80056c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c8:	e7eb      	b.n	80056a2 <_strtol_l.constprop.0+0x6a>
 80056ca:	2c2b      	cmp	r4, #43	; 0x2b
 80056cc:	bf04      	itt	eq
 80056ce:	782c      	ldrbeq	r4, [r5, #0]
 80056d0:	1c95      	addeq	r5, r2, #2
 80056d2:	e7ce      	b.n	8005672 <_strtol_l.constprop.0+0x3a>
 80056d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80056d8:	2f19      	cmp	r7, #25
 80056da:	d801      	bhi.n	80056e0 <_strtol_l.constprop.0+0xa8>
 80056dc:	3c37      	subs	r4, #55	; 0x37
 80056de:	e7e5      	b.n	80056ac <_strtol_l.constprop.0+0x74>
 80056e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80056e4:	2f19      	cmp	r7, #25
 80056e6:	d804      	bhi.n	80056f2 <_strtol_l.constprop.0+0xba>
 80056e8:	3c57      	subs	r4, #87	; 0x57
 80056ea:	e7df      	b.n	80056ac <_strtol_l.constprop.0+0x74>
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	e7e8      	b.n	80056c4 <_strtol_l.constprop.0+0x8c>
 80056f2:	1c53      	adds	r3, r2, #1
 80056f4:	d108      	bne.n	8005708 <_strtol_l.constprop.0+0xd0>
 80056f6:	2322      	movs	r3, #34	; 0x22
 80056f8:	4660      	mov	r0, ip
 80056fa:	f8ce 3000 	str.w	r3, [lr]
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	d0a6      	beq.n	8005652 <_strtol_l.constprop.0+0x1a>
 8005704:	1e69      	subs	r1, r5, #1
 8005706:	e006      	b.n	8005716 <_strtol_l.constprop.0+0xde>
 8005708:	b106      	cbz	r6, 800570c <_strtol_l.constprop.0+0xd4>
 800570a:	4240      	negs	r0, r0
 800570c:	f1b8 0f00 	cmp.w	r8, #0
 8005710:	d09f      	beq.n	8005652 <_strtol_l.constprop.0+0x1a>
 8005712:	2a00      	cmp	r2, #0
 8005714:	d1f6      	bne.n	8005704 <_strtol_l.constprop.0+0xcc>
 8005716:	f8c8 1000 	str.w	r1, [r8]
 800571a:	e79a      	b.n	8005652 <_strtol_l.constprop.0+0x1a>
 800571c:	2430      	movs	r4, #48	; 0x30
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1b5      	bne.n	800568e <_strtol_l.constprop.0+0x56>
 8005722:	2308      	movs	r3, #8
 8005724:	e7b3      	b.n	800568e <_strtol_l.constprop.0+0x56>
 8005726:	2c30      	cmp	r4, #48	; 0x30
 8005728:	d0a9      	beq.n	800567e <_strtol_l.constprop.0+0x46>
 800572a:	230a      	movs	r3, #10
 800572c:	e7af      	b.n	800568e <_strtol_l.constprop.0+0x56>
 800572e:	bf00      	nop
 8005730:	0800590b 	.word	0x0800590b

08005734 <_strtol_r>:
 8005734:	f7ff bf80 	b.w	8005638 <_strtol_l.constprop.0>

08005738 <_strtoul_l.constprop.0>:
 8005738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800573c:	4686      	mov	lr, r0
 800573e:	460d      	mov	r5, r1
 8005740:	4f35      	ldr	r7, [pc, #212]	; (8005818 <_strtoul_l.constprop.0+0xe0>)
 8005742:	4628      	mov	r0, r5
 8005744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005748:	5d3e      	ldrb	r6, [r7, r4]
 800574a:	f016 0608 	ands.w	r6, r6, #8
 800574e:	d1f8      	bne.n	8005742 <_strtoul_l.constprop.0+0xa>
 8005750:	2c2d      	cmp	r4, #45	; 0x2d
 8005752:	d130      	bne.n	80057b6 <_strtoul_l.constprop.0+0x7e>
 8005754:	2601      	movs	r6, #1
 8005756:	782c      	ldrb	r4, [r5, #0]
 8005758:	1c85      	adds	r5, r0, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d057      	beq.n	800580e <_strtoul_l.constprop.0+0xd6>
 800575e:	2b10      	cmp	r3, #16
 8005760:	d109      	bne.n	8005776 <_strtoul_l.constprop.0+0x3e>
 8005762:	2c30      	cmp	r4, #48	; 0x30
 8005764:	d107      	bne.n	8005776 <_strtoul_l.constprop.0+0x3e>
 8005766:	7828      	ldrb	r0, [r5, #0]
 8005768:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800576c:	2858      	cmp	r0, #88	; 0x58
 800576e:	d149      	bne.n	8005804 <_strtoul_l.constprop.0+0xcc>
 8005770:	2310      	movs	r3, #16
 8005772:	786c      	ldrb	r4, [r5, #1]
 8005774:	3502      	adds	r5, #2
 8005776:	f04f 38ff 	mov.w	r8, #4294967295
 800577a:	fbb8 f8f3 	udiv	r8, r8, r3
 800577e:	2700      	movs	r7, #0
 8005780:	fb03 f908 	mul.w	r9, r3, r8
 8005784:	4638      	mov	r0, r7
 8005786:	ea6f 0909 	mvn.w	r9, r9
 800578a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800578e:	f1bc 0f09 	cmp.w	ip, #9
 8005792:	d815      	bhi.n	80057c0 <_strtoul_l.constprop.0+0x88>
 8005794:	4664      	mov	r4, ip
 8005796:	42a3      	cmp	r3, r4
 8005798:	dd23      	ble.n	80057e2 <_strtoul_l.constprop.0+0xaa>
 800579a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800579e:	d007      	beq.n	80057b0 <_strtoul_l.constprop.0+0x78>
 80057a0:	4580      	cmp	r8, r0
 80057a2:	d31b      	bcc.n	80057dc <_strtoul_l.constprop.0+0xa4>
 80057a4:	d101      	bne.n	80057aa <_strtoul_l.constprop.0+0x72>
 80057a6:	45a1      	cmp	r9, r4
 80057a8:	db18      	blt.n	80057dc <_strtoul_l.constprop.0+0xa4>
 80057aa:	2701      	movs	r7, #1
 80057ac:	fb00 4003 	mla	r0, r0, r3, r4
 80057b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057b4:	e7e9      	b.n	800578a <_strtoul_l.constprop.0+0x52>
 80057b6:	2c2b      	cmp	r4, #43	; 0x2b
 80057b8:	bf04      	itt	eq
 80057ba:	782c      	ldrbeq	r4, [r5, #0]
 80057bc:	1c85      	addeq	r5, r0, #2
 80057be:	e7cc      	b.n	800575a <_strtoul_l.constprop.0+0x22>
 80057c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057c4:	f1bc 0f19 	cmp.w	ip, #25
 80057c8:	d801      	bhi.n	80057ce <_strtoul_l.constprop.0+0x96>
 80057ca:	3c37      	subs	r4, #55	; 0x37
 80057cc:	e7e3      	b.n	8005796 <_strtoul_l.constprop.0+0x5e>
 80057ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057d2:	f1bc 0f19 	cmp.w	ip, #25
 80057d6:	d804      	bhi.n	80057e2 <_strtoul_l.constprop.0+0xaa>
 80057d8:	3c57      	subs	r4, #87	; 0x57
 80057da:	e7dc      	b.n	8005796 <_strtoul_l.constprop.0+0x5e>
 80057dc:	f04f 37ff 	mov.w	r7, #4294967295
 80057e0:	e7e6      	b.n	80057b0 <_strtoul_l.constprop.0+0x78>
 80057e2:	1c7b      	adds	r3, r7, #1
 80057e4:	d106      	bne.n	80057f4 <_strtoul_l.constprop.0+0xbc>
 80057e6:	2322      	movs	r3, #34	; 0x22
 80057e8:	4638      	mov	r0, r7
 80057ea:	f8ce 3000 	str.w	r3, [lr]
 80057ee:	b932      	cbnz	r2, 80057fe <_strtoul_l.constprop.0+0xc6>
 80057f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f4:	b106      	cbz	r6, 80057f8 <_strtoul_l.constprop.0+0xc0>
 80057f6:	4240      	negs	r0, r0
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d0f9      	beq.n	80057f0 <_strtoul_l.constprop.0+0xb8>
 80057fc:	b107      	cbz	r7, 8005800 <_strtoul_l.constprop.0+0xc8>
 80057fe:	1e69      	subs	r1, r5, #1
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	e7f5      	b.n	80057f0 <_strtoul_l.constprop.0+0xb8>
 8005804:	2430      	movs	r4, #48	; 0x30
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1b5      	bne.n	8005776 <_strtoul_l.constprop.0+0x3e>
 800580a:	2308      	movs	r3, #8
 800580c:	e7b3      	b.n	8005776 <_strtoul_l.constprop.0+0x3e>
 800580e:	2c30      	cmp	r4, #48	; 0x30
 8005810:	d0a9      	beq.n	8005766 <_strtoul_l.constprop.0+0x2e>
 8005812:	230a      	movs	r3, #10
 8005814:	e7af      	b.n	8005776 <_strtoul_l.constprop.0+0x3e>
 8005816:	bf00      	nop
 8005818:	0800590b 	.word	0x0800590b

0800581c <_strtoul_r>:
 800581c:	f7ff bf8c 	b.w	8005738 <_strtoul_l.constprop.0>

08005820 <_malloc_usable_size_r>:
 8005820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005824:	1f18      	subs	r0, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfbc      	itt	lt
 800582a:	580b      	ldrlt	r3, [r1, r0]
 800582c:	18c0      	addlt	r0, r0, r3
 800582e:	4770      	bx	lr

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
